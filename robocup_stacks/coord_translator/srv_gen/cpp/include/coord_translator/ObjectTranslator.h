/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/coord_translator/srv/ObjectTranslator.srv */
#ifndef COORD_TRANSLATOR_SERVICE_OBJECTTRANSLATOR_H
#define COORD_TRANSLATOR_SERVICE_OBJECTTRANSLATOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Pose.h"

namespace coord_translator
{
template <class ContainerAllocator>
struct ObjectTranslatorRequest_ {
  typedef ObjectTranslatorRequest_<ContainerAllocator> Type;

  ObjectTranslatorRequest_()
  : objname()
  {
  }

  ObjectTranslatorRequest_(const ContainerAllocator& _alloc)
  : objname(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _objname_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  objname;


  typedef boost::shared_ptr< ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ObjectTranslatorRequest
typedef  ::coord_translator::ObjectTranslatorRequest_<std::allocator<void> > ObjectTranslatorRequest;

typedef boost::shared_ptr< ::coord_translator::ObjectTranslatorRequest> ObjectTranslatorRequestPtr;
typedef boost::shared_ptr< ::coord_translator::ObjectTranslatorRequest const> ObjectTranslatorRequestConstPtr;


template <class ContainerAllocator>
struct ObjectTranslatorResponse_ {
  typedef ObjectTranslatorResponse_<ContainerAllocator> Type;

  ObjectTranslatorResponse_()
  : exists(false)
  , category()
  , base_coordinates()
  , arm_coordinates()
  , databaseID(0)
  {
  }

  ObjectTranslatorResponse_(const ContainerAllocator& _alloc)
  : exists(false)
  , category(_alloc)
  , base_coordinates(_alloc)
  , arm_coordinates(_alloc)
  , databaseID(0)
  {
  }

  typedef uint8_t _exists_type;
  uint8_t exists;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _category_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  category;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _base_coordinates_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  base_coordinates;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _arm_coordinates_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  arm_coordinates;

  typedef int32_t _databaseID_type;
  int32_t databaseID;


  typedef boost::shared_ptr< ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ObjectTranslatorResponse
typedef  ::coord_translator::ObjectTranslatorResponse_<std::allocator<void> > ObjectTranslatorResponse;

typedef boost::shared_ptr< ::coord_translator::ObjectTranslatorResponse> ObjectTranslatorResponsePtr;
typedef boost::shared_ptr< ::coord_translator::ObjectTranslatorResponse const> ObjectTranslatorResponseConstPtr;

struct ObjectTranslator
{

typedef ObjectTranslatorRequest Request;
typedef ObjectTranslatorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ObjectTranslator
} // namespace coord_translator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6eb39263756bf59242c791f46749c0f";
  }

  static const char* value(const  ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc6eb39263756bf59ULL;
  static const uint64_t static_value2 = 0x242c791f46749c0fULL;
};

template<class ContainerAllocator>
struct DataType< ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coord_translator/ObjectTranslatorRequest";
  }

  static const char* value(const  ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string objname\n\
\n\
\n\
";
  }

  static const char* value(const  ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6d8104347d7e8516cb29e102a5348b7b";
  }

  static const char* value(const  ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6d8104347d7e8516ULL;
  static const uint64_t static_value2 = 0xcb29e102a5348b7bULL;
};

template<class ContainerAllocator>
struct DataType< ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coord_translator/ObjectTranslatorResponse";
  }

  static const char* value(const  ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool exists\n\
string category\n\
geometry_msgs/Point32 base_coordinates\n\
geometry_msgs/Pose    arm_coordinates\n\
int32 databaseID\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coord_translator::ObjectTranslatorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objname);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ObjectTranslatorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coord_translator::ObjectTranslatorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.exists);
    stream.next(m.category);
    stream.next(m.base_coordinates);
    stream.next(m.arm_coordinates);
    stream.next(m.databaseID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ObjectTranslatorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<coord_translator::ObjectTranslator> {
  static const char* value() 
  {
    return "748eae5c7c477554adef5020bb3c1c94";
  }

  static const char* value(const coord_translator::ObjectTranslator&) { return value(); } 
};

template<>
struct DataType<coord_translator::ObjectTranslator> {
  static const char* value() 
  {
    return "coord_translator/ObjectTranslator";
  }

  static const char* value(const coord_translator::ObjectTranslator&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coord_translator::ObjectTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "748eae5c7c477554adef5020bb3c1c94";
  }

  static const char* value(const coord_translator::ObjectTranslatorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coord_translator::ObjectTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coord_translator/ObjectTranslator";
  }

  static const char* value(const coord_translator::ObjectTranslatorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coord_translator::ObjectTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "748eae5c7c477554adef5020bb3c1c94";
  }

  static const char* value(const coord_translator::ObjectTranslatorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coord_translator::ObjectTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coord_translator/ObjectTranslator";
  }

  static const char* value(const coord_translator::ObjectTranslatorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COORD_TRANSLATOR_SERVICE_OBJECTTRANSLATOR_H

