/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/coord_translator/srv/LocationTranslator.srv */
#ifndef COORD_TRANSLATOR_SERVICE_LOCATIONTRANSLATOR_H
#define COORD_TRANSLATOR_SERVICE_LOCATIONTRANSLATOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/Point32.h"

namespace coord_translator
{
template <class ContainerAllocator>
struct LocationTranslatorRequest_ {
  typedef LocationTranslatorRequest_<ContainerAllocator> Type;

  LocationTranslatorRequest_()
  : location()
  {
  }

  LocationTranslatorRequest_(const ContainerAllocator& _alloc)
  : location(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _location_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  location;


  typedef boost::shared_ptr< ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coord_translator::LocationTranslatorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocationTranslatorRequest
typedef  ::coord_translator::LocationTranslatorRequest_<std::allocator<void> > LocationTranslatorRequest;

typedef boost::shared_ptr< ::coord_translator::LocationTranslatorRequest> LocationTranslatorRequestPtr;
typedef boost::shared_ptr< ::coord_translator::LocationTranslatorRequest const> LocationTranslatorRequestConstPtr;


template <class ContainerAllocator>
struct LocationTranslatorResponse_ {
  typedef LocationTranslatorResponse_<ContainerAllocator> Type;

  LocationTranslatorResponse_()
  : exists(false)
  , submap()
  , coordinates()
  {
  }

  LocationTranslatorResponse_(const ContainerAllocator& _alloc)
  : exists(false)
  , submap(_alloc)
  , coordinates(_alloc)
  {
  }

  typedef uint8_t _exists_type;
  uint8_t exists;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _submap_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  submap;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _coordinates_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  coordinates;


  typedef boost::shared_ptr< ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coord_translator::LocationTranslatorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocationTranslatorResponse
typedef  ::coord_translator::LocationTranslatorResponse_<std::allocator<void> > LocationTranslatorResponse;

typedef boost::shared_ptr< ::coord_translator::LocationTranslatorResponse> LocationTranslatorResponsePtr;
typedef boost::shared_ptr< ::coord_translator::LocationTranslatorResponse const> LocationTranslatorResponseConstPtr;

struct LocationTranslator
{

typedef LocationTranslatorRequest Request;
typedef LocationTranslatorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct LocationTranslator
} // namespace coord_translator

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::coord_translator::LocationTranslatorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "03da474bc61cfeb81a8854b4ca05bafa";
  }

  static const char* value(const  ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x03da474bc61cfeb8ULL;
  static const uint64_t static_value2 = 0x1a8854b4ca05bafaULL;
};

template<class ContainerAllocator>
struct DataType< ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coord_translator/LocationTranslatorRequest";
  }

  static const char* value(const  ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string location\n\
\n\
\n\
";
  }

  static const char* value(const  ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::coord_translator::LocationTranslatorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c31816d2b637d2b7696f5dcff4faaf45";
  }

  static const char* value(const  ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc31816d2b637d2b7ULL;
  static const uint64_t static_value2 = 0x696f5dcff4faaf45ULL;
};

template<class ContainerAllocator>
struct DataType< ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coord_translator/LocationTranslatorResponse";
  }

  static const char* value(const  ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool exists\n\
string submap\n\
geometry_msgs/Point32 coordinates\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coord_translator::LocationTranslatorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.location);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocationTranslatorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coord_translator::LocationTranslatorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.exists);
    stream.next(m.submap);
    stream.next(m.coordinates);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocationTranslatorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<coord_translator::LocationTranslator> {
  static const char* value() 
  {
    return "24b2d7b03ddf0d6054a3fe0bd4687b2d";
  }

  static const char* value(const coord_translator::LocationTranslator&) { return value(); } 
};

template<>
struct DataType<coord_translator::LocationTranslator> {
  static const char* value() 
  {
    return "coord_translator/LocationTranslator";
  }

  static const char* value(const coord_translator::LocationTranslator&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coord_translator::LocationTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "24b2d7b03ddf0d6054a3fe0bd4687b2d";
  }

  static const char* value(const coord_translator::LocationTranslatorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coord_translator::LocationTranslatorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coord_translator/LocationTranslator";
  }

  static const char* value(const coord_translator::LocationTranslatorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coord_translator::LocationTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "24b2d7b03ddf0d6054a3fe0bd4687b2d";
  }

  static const char* value(const coord_translator::LocationTranslatorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coord_translator::LocationTranslatorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coord_translator/LocationTranslator";
  }

  static const char* value(const coord_translator::LocationTranslatorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COORD_TRANSLATOR_SERVICE_LOCATIONTRANSLATOR_H

