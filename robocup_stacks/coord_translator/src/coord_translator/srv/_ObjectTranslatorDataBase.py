"""autogenerated by genpy from coord_translator/ObjectTranslatorDataBaseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ObjectTranslatorDataBaseRequest(genpy.Message):
  _md5sum = "c9adc8343b12d1c27df0825acd75bac1"
  _type = "coord_translator/ObjectTranslatorDataBaseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 databaseID


"""
  __slots__ = ['databaseID']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       databaseID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectTranslatorDataBaseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.databaseID is None:
        self.databaseID = 0
    else:
      self.databaseID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.databaseID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.databaseID,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.databaseID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.databaseID,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
"""autogenerated by genpy from coord_translator/ObjectTranslatorDataBaseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ObjectTranslatorDataBaseResponse(genpy.Message):
  _md5sum = "cf073fe875917c0f796b4ccc13bb4af5"
  _type = "coord_translator/ObjectTranslatorDataBaseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool exists
string objname
string category
geometry_msgs/Point32 base_coordinates
geometry_msgs/Pose    arm_coordinates



================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['exists','objname','category','base_coordinates','arm_coordinates']
  _slot_types = ['bool','string','string','geometry_msgs/Point32','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       exists,objname,category,base_coordinates,arm_coordinates

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectTranslatorDataBaseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.exists is None:
        self.exists = False
      if self.objname is None:
        self.objname = ''
      if self.category is None:
        self.category = ''
      if self.base_coordinates is None:
        self.base_coordinates = geometry_msgs.msg.Point32()
      if self.arm_coordinates is None:
        self.arm_coordinates = geometry_msgs.msg.Pose()
    else:
      self.exists = False
      self.objname = ''
      self.category = ''
      self.base_coordinates = geometry_msgs.msg.Point32()
      self.arm_coordinates = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.exists))
      _x = self.objname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3f7d.pack(_x.base_coordinates.x, _x.base_coordinates.y, _x.base_coordinates.z, _x.arm_coordinates.position.x, _x.arm_coordinates.position.y, _x.arm_coordinates.position.z, _x.arm_coordinates.orientation.x, _x.arm_coordinates.orientation.y, _x.arm_coordinates.orientation.z, _x.arm_coordinates.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.base_coordinates is None:
        self.base_coordinates = geometry_msgs.msg.Point32()
      if self.arm_coordinates is None:
        self.arm_coordinates = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 1
      (self.exists,) = _struct_B.unpack(str[start:end])
      self.exists = bool(self.exists)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.objname = str[start:end].decode('utf-8')
      else:
        self.objname = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.category = str[start:end].decode('utf-8')
      else:
        self.category = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.base_coordinates.x, _x.base_coordinates.y, _x.base_coordinates.z, _x.arm_coordinates.position.x, _x.arm_coordinates.position.y, _x.arm_coordinates.position.z, _x.arm_coordinates.orientation.x, _x.arm_coordinates.orientation.y, _x.arm_coordinates.orientation.z, _x.arm_coordinates.orientation.w,) = _struct_3f7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.exists))
      _x = self.objname
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.category
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3f7d.pack(_x.base_coordinates.x, _x.base_coordinates.y, _x.base_coordinates.z, _x.arm_coordinates.position.x, _x.arm_coordinates.position.y, _x.arm_coordinates.position.z, _x.arm_coordinates.orientation.x, _x.arm_coordinates.orientation.y, _x.arm_coordinates.orientation.z, _x.arm_coordinates.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.base_coordinates is None:
        self.base_coordinates = geometry_msgs.msg.Point32()
      if self.arm_coordinates is None:
        self.arm_coordinates = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 1
      (self.exists,) = _struct_B.unpack(str[start:end])
      self.exists = bool(self.exists)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.objname = str[start:end].decode('utf-8')
      else:
        self.objname = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.category = str[start:end].decode('utf-8')
      else:
        self.category = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.base_coordinates.x, _x.base_coordinates.y, _x.base_coordinates.z, _x.arm_coordinates.position.x, _x.arm_coordinates.position.y, _x.arm_coordinates.position.z, _x.arm_coordinates.orientation.x, _x.arm_coordinates.orientation.y, _x.arm_coordinates.orientation.z, _x.arm_coordinates.orientation.w,) = _struct_3f7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_3f7d = struct.Struct("<3f7d")
class ObjectTranslatorDataBase(object):
  _type          = 'coord_translator/ObjectTranslatorDataBase'
  _md5sum = '02b3a84d67a1e7ca6847416a119312c7'
  _request_class  = ObjectTranslatorDataBaseRequest
  _response_class = ObjectTranslatorDataBaseResponse
