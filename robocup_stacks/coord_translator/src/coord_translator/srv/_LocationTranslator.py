"""autogenerated by genpy from coord_translator/LocationTranslatorRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LocationTranslatorRequest(genpy.Message):
  _md5sum = "03da474bc61cfeb81a8854b4ca05bafa"
  _type = "coord_translator/LocationTranslatorRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
string location


"""
  __slots__ = ['location']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       location

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocationTranslatorRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.location is None:
        self.location = ''
    else:
      self.location = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location = str[start:end].decode('utf-8')
      else:
        self.location = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location = str[start:end].decode('utf-8')
      else:
        self.location = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from coord_translator/LocationTranslatorResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LocationTranslatorResponse(genpy.Message):
  _md5sum = "c31816d2b637d2b7696f5dcff4faaf45"
  _type = "coord_translator/LocationTranslatorResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool exists
string submap
geometry_msgs/Point32 coordinates


================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['exists','submap','coordinates']
  _slot_types = ['bool','string','geometry_msgs/Point32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       exists,submap,coordinates

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocationTranslatorResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.exists is None:
        self.exists = False
      if self.submap is None:
        self.submap = ''
      if self.coordinates is None:
        self.coordinates = geometry_msgs.msg.Point32()
    else:
      self.exists = False
      self.submap = ''
      self.coordinates = geometry_msgs.msg.Point32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.exists))
      _x = self.submap
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3f.pack(_x.coordinates.x, _x.coordinates.y, _x.coordinates.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.coordinates is None:
        self.coordinates = geometry_msgs.msg.Point32()
      end = 0
      start = end
      end += 1
      (self.exists,) = _struct_B.unpack(str[start:end])
      self.exists = bool(self.exists)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.submap = str[start:end].decode('utf-8')
      else:
        self.submap = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.coordinates.x, _x.coordinates.y, _x.coordinates.z,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.exists))
      _x = self.submap
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3f.pack(_x.coordinates.x, _x.coordinates.y, _x.coordinates.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.coordinates is None:
        self.coordinates = geometry_msgs.msg.Point32()
      end = 0
      start = end
      end += 1
      (self.exists,) = _struct_B.unpack(str[start:end])
      self.exists = bool(self.exists)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.submap = str[start:end].decode('utf-8')
      else:
        self.submap = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.coordinates.x, _x.coordinates.y, _x.coordinates.z,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_3f = struct.Struct("<3f")
class LocationTranslator(object):
  _type          = 'coord_translator/LocationTranslator'
  _md5sum = '24b2d7b03ddf0d6054a3fe0bd4687b2d'
  _request_class  = LocationTranslatorRequest
  _response_class = LocationTranslatorResponse
