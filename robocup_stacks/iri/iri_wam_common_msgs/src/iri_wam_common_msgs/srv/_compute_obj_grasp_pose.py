"""autogenerated by genpy from iri_wam_common_msgs/compute_obj_grasp_poseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class compute_obj_grasp_poseRequest(genpy.Message):
  _md5sum = "f56ea92237ddf5f397772505f7991f2f"
  _type = "iri_wam_common_msgs/compute_obj_grasp_poseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 filterID

"""
  __slots__ = ['filterID']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       filterID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(compute_obj_grasp_poseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.filterID is None:
        self.filterID = 0
    else:
      self.filterID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.filterID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.filterID,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.filterID))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.filterID,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
"""autogenerated by genpy from iri_wam_common_msgs/compute_obj_grasp_poseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class compute_obj_grasp_poseResponse(genpy.Message):
  _md5sum = "ecc3c30a068ed3128c7cff6196e11ce2"
  _type = "iri_wam_common_msgs/compute_obj_grasp_poseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseStamped graspPose
float32 wrinkleness


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['graspPose','wrinkleness']
  _slot_types = ['geometry_msgs/PoseStamped','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       graspPose,wrinkleness

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(compute_obj_grasp_poseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.graspPose is None:
        self.graspPose = geometry_msgs.msg.PoseStamped()
      if self.wrinkleness is None:
        self.wrinkleness = 0.
    else:
      self.graspPose = geometry_msgs.msg.PoseStamped()
      self.wrinkleness = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.graspPose.header.seq, _x.graspPose.header.stamp.secs, _x.graspPose.header.stamp.nsecs))
      _x = self.graspPose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7df.pack(_x.graspPose.pose.position.x, _x.graspPose.pose.position.y, _x.graspPose.pose.position.z, _x.graspPose.pose.orientation.x, _x.graspPose.pose.orientation.y, _x.graspPose.pose.orientation.z, _x.graspPose.pose.orientation.w, _x.wrinkleness))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.graspPose is None:
        self.graspPose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.graspPose.header.seq, _x.graspPose.header.stamp.secs, _x.graspPose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.graspPose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.graspPose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.graspPose.pose.position.x, _x.graspPose.pose.position.y, _x.graspPose.pose.position.z, _x.graspPose.pose.orientation.x, _x.graspPose.pose.orientation.y, _x.graspPose.pose.orientation.z, _x.graspPose.pose.orientation.w, _x.wrinkleness,) = _struct_7df.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.graspPose.header.seq, _x.graspPose.header.stamp.secs, _x.graspPose.header.stamp.nsecs))
      _x = self.graspPose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7df.pack(_x.graspPose.pose.position.x, _x.graspPose.pose.position.y, _x.graspPose.pose.position.z, _x.graspPose.pose.orientation.x, _x.graspPose.pose.orientation.y, _x.graspPose.pose.orientation.z, _x.graspPose.pose.orientation.w, _x.wrinkleness))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.graspPose is None:
        self.graspPose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.graspPose.header.seq, _x.graspPose.header.stamp.secs, _x.graspPose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.graspPose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.graspPose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.graspPose.pose.position.x, _x.graspPose.pose.position.y, _x.graspPose.pose.position.z, _x.graspPose.pose.orientation.x, _x.graspPose.pose.orientation.y, _x.graspPose.pose.orientation.z, _x.graspPose.pose.orientation.w, _x.wrinkleness,) = _struct_7df.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_7df = struct.Struct("<7df")
class compute_obj_grasp_pose(object):
  _type          = 'iri_wam_common_msgs/compute_obj_grasp_pose'
  _md5sum = 'a4372bd3edc1254ae3d8c932f3655620'
  _request_class  = compute_obj_grasp_poseRequest
  _response_class = compute_obj_grasp_poseResponse
