"""autogenerated by genpy from iri_wam_common_msgs/SimpleBhandPickUpAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import object_manipulation_msgs.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import iri_wam_common_msgs.msg
import genpy
import std_msgs.msg

class SimpleBhandPickUpAction(genpy.Message):
  _md5sum = "370e75ccee11eea7e64a9d4adf8f292a"
  _type = "iri_wam_common_msgs/SimpleBhandPickUpAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

SimpleBhandPickUpActionGoal action_goal
SimpleBhandPickUpActionResult action_result
SimpleBhandPickUpActionFeedback action_feedback

================================================================================
MSG: iri_wam_common_msgs/SimpleBhandPickUpActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
SimpleBhandPickUpGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: iri_wam_common_msgs/SimpleBhandPickUpGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# October 2012 - J.L Rivero, G. Alenya, D. Martinez
#
# This action was built after analyze previously the "standard" ROS message
# PickUp. The ROS message involve a lot of action we were not consider at
# the moment of writing and adapt that huge input for our needs was over-
# engineer a solution.
#
# A translator PickUp -> SimpleBhandPickUp could be done, if needed

# SimpleBhandPickUp is composed by the following phases:
#
# 1. Move the ARM from current to pre-grasp (planned if requested)
# 2. Put the fingers into the pre-grasp position
# 3. Move the ARM from pre-grasp to grasp (planned if requested)
# 4. Put the fingers into the grasp position
# 5. Perform the lift movement

# goal
# A vector of different GCL bhand commands
string[] fingers_position_for_grasp
string[] fingers_position_for_pre_grasp
# Grasp pose is defined in the Stamped 
geometry_msgs/PoseStamped grasp_pose
# pre movement relative to the grasp_pose
geometry_msgs/Pose pre_grasp_modifier
# Direction and distance to lift from the grasp_pose
object_manipulation_msgs/GripperTranslation lift

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: object_manipulation_msgs/GripperTranslation
# defines a translation for the gripper, used in pickup or place tasks
# for example for lifting an object off a table or approaching the table for placing

# the direction of the translation
geometry_msgs/Vector3Stamped direction

# the desired translation distance
float32 desired_distance

# the min distance that must be considered feasible before the
# grasp is even attempted
float32 min_distance
================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: iri_wam_common_msgs/SimpleBhandPickUpActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
SimpleBhandPickUpResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: iri_wam_common_msgs/SimpleBhandPickUpResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
object_manipulation_msgs/GraspResult grasp_result


================================================================================
MSG: object_manipulation_msgs/GraspResult
int32 SUCCESS = 1
int32 GRASP_OUT_OF_REACH = 2
int32 GRASP_IN_COLLISION = 3
int32 GRASP_UNFEASIBLE = 4
int32 PREGRASP_OUT_OF_REACH = 5
int32 PREGRASP_IN_COLLISION = 6
int32 PREGRASP_UNFEASIBLE = 7
int32 LIFT_OUT_OF_REACH = 8
int32 LIFT_IN_COLLISION = 9
int32 LIFT_UNFEASIBLE = 10
int32 MOVE_ARM_FAILED = 11
int32 GRASP_FAILED = 12
int32 LIFT_FAILED = 13
int32 RETREAT_FAILED = 14
int32 result_code

# whether the state of the world was disturbed by this attempt. generally, this flag
# shows if another task can be attempted, or a new sensed world model is recommeded
# before proceeding
bool continuation_possible

================================================================================
MSG: iri_wam_common_msgs/SimpleBhandPickUpActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
SimpleBhandPickUpFeedback feedback

================================================================================
MSG: iri_wam_common_msgs/SimpleBhandPickUpFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback


"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['iri_wam_common_msgs/SimpleBhandPickUpActionGoal','iri_wam_common_msgs/SimpleBhandPickUpActionResult','iri_wam_common_msgs/SimpleBhandPickUpActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimpleBhandPickUpAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = iri_wam_common_msgs.msg.SimpleBhandPickUpActionGoal()
      if self.action_result is None:
        self.action_result = iri_wam_common_msgs.msg.SimpleBhandPickUpActionResult()
      if self.action_feedback is None:
        self.action_feedback = iri_wam_common_msgs.msg.SimpleBhandPickUpActionFeedback()
    else:
      self.action_goal = iri_wam_common_msgs.msg.SimpleBhandPickUpActionGoal()
      self.action_result = iri_wam_common_msgs.msg.SimpleBhandPickUpActionResult()
      self.action_feedback = iri_wam_common_msgs.msg.SimpleBhandPickUpActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.fingers_position_for_grasp)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.fingers_position_for_grasp:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.fingers_position_for_pre_grasp)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.fingers_position_for_pre_grasp:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.grasp_pose.header.seq, _x.action_goal.goal.grasp_pose.header.stamp.secs, _x.action_goal.goal.grasp_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.grasp_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_14d3I.pack(_x.action_goal.goal.grasp_pose.pose.position.x, _x.action_goal.goal.grasp_pose.pose.position.y, _x.action_goal.goal.grasp_pose.pose.position.z, _x.action_goal.goal.grasp_pose.pose.orientation.x, _x.action_goal.goal.grasp_pose.pose.orientation.y, _x.action_goal.goal.grasp_pose.pose.orientation.z, _x.action_goal.goal.grasp_pose.pose.orientation.w, _x.action_goal.goal.pre_grasp_modifier.position.x, _x.action_goal.goal.pre_grasp_modifier.position.y, _x.action_goal.goal.pre_grasp_modifier.position.z, _x.action_goal.goal.pre_grasp_modifier.orientation.x, _x.action_goal.goal.pre_grasp_modifier.orientation.y, _x.action_goal.goal.pre_grasp_modifier.orientation.z, _x.action_goal.goal.pre_grasp_modifier.orientation.w, _x.action_goal.goal.lift.direction.header.seq, _x.action_goal.goal.lift.direction.header.stamp.secs, _x.action_goal.goal.lift.direction.header.stamp.nsecs))
      _x = self.action_goal.goal.lift.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2f3I.pack(_x.action_goal.goal.lift.direction.vector.x, _x.action_goal.goal.lift.direction.vector.y, _x.action_goal.goal.lift.direction.vector.z, _x.action_goal.goal.lift.desired_distance, _x.action_goal.goal.lift.min_distance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_iB3I.pack(_x.action_result.result.grasp_result.result_code, _x.action_result.result.grasp_result.continuation_possible, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = iri_wam_common_msgs.msg.SimpleBhandPickUpActionGoal()
      if self.action_result is None:
        self.action_result = iri_wam_common_msgs.msg.SimpleBhandPickUpActionResult()
      if self.action_feedback is None:
        self.action_feedback = iri_wam_common_msgs.msg.SimpleBhandPickUpActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.fingers_position_for_grasp = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.fingers_position_for_grasp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.fingers_position_for_pre_grasp = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.fingers_position_for_pre_grasp.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.grasp_pose.header.seq, _x.action_goal.goal.grasp_pose.header.stamp.secs, _x.action_goal.goal.grasp_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.grasp_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.grasp_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.action_goal.goal.grasp_pose.pose.position.x, _x.action_goal.goal.grasp_pose.pose.position.y, _x.action_goal.goal.grasp_pose.pose.position.z, _x.action_goal.goal.grasp_pose.pose.orientation.x, _x.action_goal.goal.grasp_pose.pose.orientation.y, _x.action_goal.goal.grasp_pose.pose.orientation.z, _x.action_goal.goal.grasp_pose.pose.orientation.w, _x.action_goal.goal.pre_grasp_modifier.position.x, _x.action_goal.goal.pre_grasp_modifier.position.y, _x.action_goal.goal.pre_grasp_modifier.position.z, _x.action_goal.goal.pre_grasp_modifier.orientation.x, _x.action_goal.goal.pre_grasp_modifier.orientation.y, _x.action_goal.goal.pre_grasp_modifier.orientation.z, _x.action_goal.goal.pre_grasp_modifier.orientation.w, _x.action_goal.goal.lift.direction.header.seq, _x.action_goal.goal.lift.direction.header.stamp.secs, _x.action_goal.goal.lift.direction.header.stamp.nsecs,) = _struct_14d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.lift.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.lift.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.action_goal.goal.lift.direction.vector.x, _x.action_goal.goal.lift.direction.vector.y, _x.action_goal.goal.lift.direction.vector.z, _x.action_goal.goal.lift.desired_distance, _x.action_goal.goal.lift.min_distance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3d2f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.action_result.result.grasp_result.result_code, _x.action_result.result.grasp_result.continuation_possible, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_iB3I.unpack(str[start:end])
      self.action_result.result.grasp_result.continuation_possible = bool(self.action_result.result.grasp_result.continuation_possible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.fingers_position_for_grasp)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.fingers_position_for_grasp:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.fingers_position_for_pre_grasp)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.fingers_position_for_pre_grasp:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.grasp_pose.header.seq, _x.action_goal.goal.grasp_pose.header.stamp.secs, _x.action_goal.goal.grasp_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.grasp_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_14d3I.pack(_x.action_goal.goal.grasp_pose.pose.position.x, _x.action_goal.goal.grasp_pose.pose.position.y, _x.action_goal.goal.grasp_pose.pose.position.z, _x.action_goal.goal.grasp_pose.pose.orientation.x, _x.action_goal.goal.grasp_pose.pose.orientation.y, _x.action_goal.goal.grasp_pose.pose.orientation.z, _x.action_goal.goal.grasp_pose.pose.orientation.w, _x.action_goal.goal.pre_grasp_modifier.position.x, _x.action_goal.goal.pre_grasp_modifier.position.y, _x.action_goal.goal.pre_grasp_modifier.position.z, _x.action_goal.goal.pre_grasp_modifier.orientation.x, _x.action_goal.goal.pre_grasp_modifier.orientation.y, _x.action_goal.goal.pre_grasp_modifier.orientation.z, _x.action_goal.goal.pre_grasp_modifier.orientation.w, _x.action_goal.goal.lift.direction.header.seq, _x.action_goal.goal.lift.direction.header.stamp.secs, _x.action_goal.goal.lift.direction.header.stamp.nsecs))
      _x = self.action_goal.goal.lift.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2f3I.pack(_x.action_goal.goal.lift.direction.vector.x, _x.action_goal.goal.lift.direction.vector.y, _x.action_goal.goal.lift.direction.vector.z, _x.action_goal.goal.lift.desired_distance, _x.action_goal.goal.lift.min_distance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_iB3I.pack(_x.action_result.result.grasp_result.result_code, _x.action_result.result.grasp_result.continuation_possible, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = iri_wam_common_msgs.msg.SimpleBhandPickUpActionGoal()
      if self.action_result is None:
        self.action_result = iri_wam_common_msgs.msg.SimpleBhandPickUpActionResult()
      if self.action_feedback is None:
        self.action_feedback = iri_wam_common_msgs.msg.SimpleBhandPickUpActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.fingers_position_for_grasp = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.fingers_position_for_grasp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.fingers_position_for_pre_grasp = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.fingers_position_for_pre_grasp.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.grasp_pose.header.seq, _x.action_goal.goal.grasp_pose.header.stamp.secs, _x.action_goal.goal.grasp_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.grasp_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.grasp_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.action_goal.goal.grasp_pose.pose.position.x, _x.action_goal.goal.grasp_pose.pose.position.y, _x.action_goal.goal.grasp_pose.pose.position.z, _x.action_goal.goal.grasp_pose.pose.orientation.x, _x.action_goal.goal.grasp_pose.pose.orientation.y, _x.action_goal.goal.grasp_pose.pose.orientation.z, _x.action_goal.goal.grasp_pose.pose.orientation.w, _x.action_goal.goal.pre_grasp_modifier.position.x, _x.action_goal.goal.pre_grasp_modifier.position.y, _x.action_goal.goal.pre_grasp_modifier.position.z, _x.action_goal.goal.pre_grasp_modifier.orientation.x, _x.action_goal.goal.pre_grasp_modifier.orientation.y, _x.action_goal.goal.pre_grasp_modifier.orientation.z, _x.action_goal.goal.pre_grasp_modifier.orientation.w, _x.action_goal.goal.lift.direction.header.seq, _x.action_goal.goal.lift.direction.header.stamp.secs, _x.action_goal.goal.lift.direction.header.stamp.nsecs,) = _struct_14d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.lift.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.lift.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.action_goal.goal.lift.direction.vector.x, _x.action_goal.goal.lift.direction.vector.y, _x.action_goal.goal.lift.direction.vector.z, _x.action_goal.goal.lift.desired_distance, _x.action_goal.goal.lift.min_distance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3d2f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.action_result.result.grasp_result.result_code, _x.action_result.result.grasp_result.continuation_possible, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_iB3I.unpack(str[start:end])
      self.action_result.result.grasp_result.continuation_possible = bool(self.action_result.result.grasp_result.continuation_possible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_iB3I = struct.Struct("<iB3I")
_struct_14d3I = struct.Struct("<14d3I")
_struct_3I = struct.Struct("<3I")
_struct_3d2f3I = struct.Struct("<3d2f3I")
_struct_2I = struct.Struct("<2I")
