"""autogenerated by genpy from iri_wam_common_msgs/SimpleBhandPickUpResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import object_manipulation_msgs.msg

class SimpleBhandPickUpResult(genpy.Message):
  _md5sum = "57a29b864b3e031ed431325393849b26"
  _type = "iri_wam_common_msgs/SimpleBhandPickUpResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
object_manipulation_msgs/GraspResult grasp_result


================================================================================
MSG: object_manipulation_msgs/GraspResult
int32 SUCCESS = 1
int32 GRASP_OUT_OF_REACH = 2
int32 GRASP_IN_COLLISION = 3
int32 GRASP_UNFEASIBLE = 4
int32 PREGRASP_OUT_OF_REACH = 5
int32 PREGRASP_IN_COLLISION = 6
int32 PREGRASP_UNFEASIBLE = 7
int32 LIFT_OUT_OF_REACH = 8
int32 LIFT_IN_COLLISION = 9
int32 LIFT_UNFEASIBLE = 10
int32 MOVE_ARM_FAILED = 11
int32 GRASP_FAILED = 12
int32 LIFT_FAILED = 13
int32 RETREAT_FAILED = 14
int32 result_code

# whether the state of the world was disturbed by this attempt. generally, this flag
# shows if another task can be attempted, or a new sensed world model is recommeded
# before proceeding
bool continuation_possible

"""
  __slots__ = ['grasp_result']
  _slot_types = ['object_manipulation_msgs/GraspResult']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grasp_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimpleBhandPickUpResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.grasp_result is None:
        self.grasp_result = object_manipulation_msgs.msg.GraspResult()
    else:
      self.grasp_result = object_manipulation_msgs.msg.GraspResult()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_iB.pack(_x.grasp_result.result_code, _x.grasp_result.continuation_possible))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.grasp_result is None:
        self.grasp_result = object_manipulation_msgs.msg.GraspResult()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.grasp_result.result_code, _x.grasp_result.continuation_possible,) = _struct_iB.unpack(str[start:end])
      self.grasp_result.continuation_possible = bool(self.grasp_result.continuation_possible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_iB.pack(_x.grasp_result.result_code, _x.grasp_result.continuation_possible))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.grasp_result is None:
        self.grasp_result = object_manipulation_msgs.msg.GraspResult()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.grasp_result.result_code, _x.grasp_result.continuation_possible,) = _struct_iB.unpack(str[start:end])
      self.grasp_result.continuation_possible = bool(self.grasp_result.continuation_possible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_iB = struct.Struct("<iB")
