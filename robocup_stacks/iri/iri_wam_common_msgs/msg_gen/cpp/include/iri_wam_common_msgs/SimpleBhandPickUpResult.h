/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_wam_common_msgs/msg/SimpleBhandPickUpResult.msg */
#ifndef IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPRESULT_H
#define IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "object_manipulation_msgs/GraspResult.h"

namespace iri_wam_common_msgs
{
template <class ContainerAllocator>
struct SimpleBhandPickUpResult_ {
  typedef SimpleBhandPickUpResult_<ContainerAllocator> Type;

  SimpleBhandPickUpResult_()
  : grasp_result()
  {
  }

  SimpleBhandPickUpResult_(const ContainerAllocator& _alloc)
  : grasp_result(_alloc)
  {
  }

  typedef  ::object_manipulation_msgs::GraspResult_<ContainerAllocator>  _grasp_result_type;
   ::object_manipulation_msgs::GraspResult_<ContainerAllocator>  grasp_result;


  typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimpleBhandPickUpResult
typedef  ::iri_wam_common_msgs::SimpleBhandPickUpResult_<std::allocator<void> > SimpleBhandPickUpResult;

typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpResult> SimpleBhandPickUpResultPtr;
typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpResult const> SimpleBhandPickUpResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_wam_common_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57a29b864b3e031ed431325393849b26";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x57a29b864b3e031eULL;
  static const uint64_t static_value2 = 0xd431325393849b26ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/SimpleBhandPickUpResult";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# result\n\
object_manipulation_msgs/GraspResult grasp_result\n\
\n\
\n\
================================================================================\n\
MSG: object_manipulation_msgs/GraspResult\n\
int32 SUCCESS = 1\n\
int32 GRASP_OUT_OF_REACH = 2\n\
int32 GRASP_IN_COLLISION = 3\n\
int32 GRASP_UNFEASIBLE = 4\n\
int32 PREGRASP_OUT_OF_REACH = 5\n\
int32 PREGRASP_IN_COLLISION = 6\n\
int32 PREGRASP_UNFEASIBLE = 7\n\
int32 LIFT_OUT_OF_REACH = 8\n\
int32 LIFT_IN_COLLISION = 9\n\
int32 LIFT_UNFEASIBLE = 10\n\
int32 MOVE_ARM_FAILED = 11\n\
int32 GRASP_FAILED = 12\n\
int32 LIFT_FAILED = 13\n\
int32 RETREAT_FAILED = 14\n\
int32 result_code\n\
\n\
# whether the state of the world was disturbed by this attempt. generally, this flag\n\
# shows if another task can be attempted, or a new sensed world model is recommeded\n\
# before proceeding\n\
bool continuation_possible\n\
\n\
";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.grasp_result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimpleBhandPickUpResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> & v) 
  {
    s << indent << "grasp_result: ";
s << std::endl;
    Printer< ::object_manipulation_msgs::GraspResult_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_result);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPRESULT_H

