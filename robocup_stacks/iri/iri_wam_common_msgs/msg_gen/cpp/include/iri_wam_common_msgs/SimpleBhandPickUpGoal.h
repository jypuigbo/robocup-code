/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_wam_common_msgs/msg/SimpleBhandPickUpGoal.msg */
#ifndef IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPGOAL_H
#define IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/Pose.h"
#include "object_manipulation_msgs/GripperTranslation.h"

namespace iri_wam_common_msgs
{
template <class ContainerAllocator>
struct SimpleBhandPickUpGoal_ {
  typedef SimpleBhandPickUpGoal_<ContainerAllocator> Type;

  SimpleBhandPickUpGoal_()
  : fingers_position_for_grasp()
  , fingers_position_for_pre_grasp()
  , grasp_pose()
  , pre_grasp_modifier()
  , lift()
  {
  }

  SimpleBhandPickUpGoal_(const ContainerAllocator& _alloc)
  : fingers_position_for_grasp(_alloc)
  , fingers_position_for_pre_grasp(_alloc)
  , grasp_pose(_alloc)
  , pre_grasp_modifier(_alloc)
  , lift(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _fingers_position_for_grasp_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  fingers_position_for_grasp;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _fingers_position_for_pre_grasp_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  fingers_position_for_pre_grasp;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _grasp_pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  grasp_pose;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pre_grasp_modifier_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pre_grasp_modifier;

  typedef  ::object_manipulation_msgs::GripperTranslation_<ContainerAllocator>  _lift_type;
   ::object_manipulation_msgs::GripperTranslation_<ContainerAllocator>  lift;


  typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimpleBhandPickUpGoal
typedef  ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<std::allocator<void> > SimpleBhandPickUpGoal;

typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpGoal> SimpleBhandPickUpGoalPtr;
typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpGoal const> SimpleBhandPickUpGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_wam_common_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5f90d8765528c27d77bd5b45cbdd9e78";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5f90d8765528c27dULL;
  static const uint64_t static_value2 = 0x77bd5b45cbdd9e78ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/SimpleBhandPickUpGoal";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# October 2012 - J.L Rivero, G. Alenya, D. Martinez\n\
#\n\
# This action was built after analyze previously the \"standard\" ROS message\n\
# PickUp. The ROS message involve a lot of action we were not consider at\n\
# the moment of writing and adapt that huge input for our needs was over-\n\
# engineer a solution.\n\
#\n\
# A translator PickUp -> SimpleBhandPickUp could be done, if needed\n\
\n\
# SimpleBhandPickUp is composed by the following phases:\n\
#\n\
# 1. Move the ARM from current to pre-grasp (planned if requested)\n\
# 2. Put the fingers into the pre-grasp position\n\
# 3. Move the ARM from pre-grasp to grasp (planned if requested)\n\
# 4. Put the fingers into the grasp position\n\
# 5. Perform the lift movement\n\
\n\
# goal\n\
# A vector of different GCL bhand commands\n\
string[] fingers_position_for_grasp\n\
string[] fingers_position_for_pre_grasp\n\
# Grasp pose is defined in the Stamped \n\
geometry_msgs/PoseStamped grasp_pose\n\
# pre movement relative to the grasp_pose\n\
geometry_msgs/Pose pre_grasp_modifier\n\
# Direction and distance to lift from the grasp_pose\n\
object_manipulation_msgs/GripperTranslation lift\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: object_manipulation_msgs/GripperTranslation\n\
# defines a translation for the gripper, used in pickup or place tasks\n\
# for example for lifting an object off a table or approaching the table for placing\n\
\n\
# the direction of the translation\n\
geometry_msgs/Vector3Stamped direction\n\
\n\
# the desired translation distance\n\
float32 desired_distance\n\
\n\
# the min distance that must be considered feasible before the\n\
# grasp is even attempted\n\
float32 min_distance\n\
================================================================================\n\
MSG: geometry_msgs/Vector3Stamped\n\
# This represents a Vector3 with reference coordinate frame and timestamp\n\
Header header\n\
Vector3 vector\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.fingers_position_for_grasp);
    stream.next(m.fingers_position_for_pre_grasp);
    stream.next(m.grasp_pose);
    stream.next(m.pre_grasp_modifier);
    stream.next(m.lift);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimpleBhandPickUpGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_wam_common_msgs::SimpleBhandPickUpGoal_<ContainerAllocator> & v) 
  {
    s << indent << "fingers_position_for_grasp[]" << std::endl;
    for (size_t i = 0; i < v.fingers_position_for_grasp.size(); ++i)
    {
      s << indent << "  fingers_position_for_grasp[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fingers_position_for_grasp[i]);
    }
    s << indent << "fingers_position_for_pre_grasp[]" << std::endl;
    for (size_t i = 0; i < v.fingers_position_for_pre_grasp.size(); ++i)
    {
      s << indent << "  fingers_position_for_pre_grasp[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fingers_position_for_pre_grasp[i]);
    }
    s << indent << "grasp_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_pose);
    s << indent << "pre_grasp_modifier: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pre_grasp_modifier);
    s << indent << "lift: ";
s << std::endl;
    Printer< ::object_manipulation_msgs::GripperTranslation_<ContainerAllocator> >::stream(s, indent + "  ", v.lift);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPGOAL_H

