/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_wam_common_msgs/msg/SimpleBhandPickUpActionResult.msg */
#ifndef IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPACTIONRESULT_H
#define IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPACTIONRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "actionlib_msgs/GoalStatus.h"
#include "iri_wam_common_msgs/SimpleBhandPickUpResult.h"

namespace iri_wam_common_msgs
{
template <class ContainerAllocator>
struct SimpleBhandPickUpActionResult_ {
  typedef SimpleBhandPickUpActionResult_<ContainerAllocator> Type;

  SimpleBhandPickUpActionResult_()
  : header()
  , status()
  , result()
  {
  }

  SimpleBhandPickUpActionResult_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , status(_alloc)
  , result(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::actionlib_msgs::GoalStatus_<ContainerAllocator>  _status_type;
   ::actionlib_msgs::GoalStatus_<ContainerAllocator>  status;

  typedef  ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator>  _result_type;
   ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator>  result;


  typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimpleBhandPickUpActionResult
typedef  ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<std::allocator<void> > SimpleBhandPickUpActionResult;

typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult> SimpleBhandPickUpActionResultPtr;
typedef boost::shared_ptr< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult const> SimpleBhandPickUpActionResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_wam_common_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e3656c69551c35b1e1fa9f7c78ec9fb";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8e3656c69551c35bULL;
  static const uint64_t static_value2 = 0x1e1fa9f7c78ec9fbULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/SimpleBhandPickUpActionResult";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
SimpleBhandPickUpResult result\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalStatus\n\
GoalID goal_id\n\
uint8 status\n\
uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n\
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n\
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n\
                            #   and has since completed its execution (Terminal State)\n\
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n\
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n\
                            #    to some failure (Terminal State)\n\
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n\
                            #    because the goal was unattainable or invalid (Terminal State)\n\
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n\
                            #    and has not yet completed execution\n\
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n\
                            #    but the action server has not yet confirmed that the goal is canceled\n\
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n\
                            #    and was successfully cancelled (Terminal State)\n\
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n\
                            #    sent over the wire by an action server\n\
\n\
#Allow for the user to associate a string with GoalStatus for debugging\n\
string text\n\
\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: iri_wam_common_msgs/SimpleBhandPickUpResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# result\n\
object_manipulation_msgs/GraspResult grasp_result\n\
\n\
\n\
================================================================================\n\
MSG: object_manipulation_msgs/GraspResult\n\
int32 SUCCESS = 1\n\
int32 GRASP_OUT_OF_REACH = 2\n\
int32 GRASP_IN_COLLISION = 3\n\
int32 GRASP_UNFEASIBLE = 4\n\
int32 PREGRASP_OUT_OF_REACH = 5\n\
int32 PREGRASP_IN_COLLISION = 6\n\
int32 PREGRASP_UNFEASIBLE = 7\n\
int32 LIFT_OUT_OF_REACH = 8\n\
int32 LIFT_IN_COLLISION = 9\n\
int32 LIFT_UNFEASIBLE = 10\n\
int32 MOVE_ARM_FAILED = 11\n\
int32 GRASP_FAILED = 12\n\
int32 LIFT_FAILED = 13\n\
int32 RETREAT_FAILED = 14\n\
int32 result_code\n\
\n\
# whether the state of the world was disturbed by this attempt. generally, this flag\n\
# shows if another task can be attempted, or a new sensed world model is recommeded\n\
# before proceeding\n\
bool continuation_possible\n\
\n\
";
  }

  static const char* value(const  ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.status);
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimpleBhandPickUpActionResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_wam_common_msgs::SimpleBhandPickUpActionResult_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
s << std::endl;
    Printer< ::actionlib_msgs::GoalStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "result: ";
s << std::endl;
    Printer< ::iri_wam_common_msgs::SimpleBhandPickUpResult_<ContainerAllocator> >::stream(s, indent + "  ", v.result);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_WAM_COMMON_MSGS_MESSAGE_SIMPLEBHANDPICKUPACTIONRESULT_H

