/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_wam_common_msgs/srv/wamGetRobotPoseFromToolPose.srv */
#ifndef IRI_WAM_COMMON_MSGS_SERVICE_WAMGETROBOTPOSEFROMTOOLPOSE_H
#define IRI_WAM_COMMON_MSGS_SERVICE_WAMGETROBOTPOSEFROMTOOLPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseStamped.h"


#include "geometry_msgs/PoseStamped.h"

namespace iri_wam_common_msgs
{
template <class ContainerAllocator>
struct wamGetRobotPoseFromToolPoseRequest_ {
  typedef wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> Type;

  wamGetRobotPoseFromToolPoseRequest_()
  : tool_pose()
  {
  }

  wamGetRobotPoseFromToolPoseRequest_(const ContainerAllocator& _alloc)
  : tool_pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _tool_pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  tool_pose;


  typedef boost::shared_ptr< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct wamGetRobotPoseFromToolPoseRequest
typedef  ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<std::allocator<void> > wamGetRobotPoseFromToolPoseRequest;

typedef boost::shared_ptr< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest> wamGetRobotPoseFromToolPoseRequestPtr;
typedef boost::shared_ptr< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest const> wamGetRobotPoseFromToolPoseRequestConstPtr;


template <class ContainerAllocator>
struct wamGetRobotPoseFromToolPoseResponse_ {
  typedef wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> Type;

  wamGetRobotPoseFromToolPoseResponse_()
  : robot_pose()
  {
  }

  wamGetRobotPoseFromToolPoseResponse_(const ContainerAllocator& _alloc)
  : robot_pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _robot_pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  robot_pose;


  typedef boost::shared_ptr< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct wamGetRobotPoseFromToolPoseResponse
typedef  ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<std::allocator<void> > wamGetRobotPoseFromToolPoseResponse;

typedef boost::shared_ptr< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse> wamGetRobotPoseFromToolPoseResponsePtr;
typedef boost::shared_ptr< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse const> wamGetRobotPoseFromToolPoseResponseConstPtr;

struct wamGetRobotPoseFromToolPose
{

typedef wamGetRobotPoseFromToolPoseRequest Request;
typedef wamGetRobotPoseFromToolPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct wamGetRobotPoseFromToolPose
} // namespace iri_wam_common_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f49009e637ac367cacdab60da3707bd";
  }

  static const char* value(const  ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1f49009e637ac367ULL;
  static const uint64_t static_value2 = 0xcacdab60da3707bdULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/wamGetRobotPoseFromToolPoseRequest";
  }

  static const char* value(const  ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/PoseStamped tool_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bb46cd500e029a262f0c2284fecd8ed7";
  }

  static const char* value(const  ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbb46cd500e029a26ULL;
  static const uint64_t static_value2 = 0x2f0c2284fecd8ed7ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/wamGetRobotPoseFromToolPoseResponse";
  }

  static const char* value(const  ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/PoseStamped robot_pose\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tool_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct wamGetRobotPoseFromToolPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.robot_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct wamGetRobotPoseFromToolPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<iri_wam_common_msgs::wamGetRobotPoseFromToolPose> {
  static const char* value() 
  {
    return "9bc33b41fd06e0cc64ed1e05be1d2898";
  }

  static const char* value(const iri_wam_common_msgs::wamGetRobotPoseFromToolPose&) { return value(); } 
};

template<>
struct DataType<iri_wam_common_msgs::wamGetRobotPoseFromToolPose> {
  static const char* value() 
  {
    return "iri_wam_common_msgs/wamGetRobotPoseFromToolPose";
  }

  static const char* value(const iri_wam_common_msgs::wamGetRobotPoseFromToolPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9bc33b41fd06e0cc64ed1e05be1d2898";
  }

  static const char* value(const iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/wamGetRobotPoseFromToolPose";
  }

  static const char* value(const iri_wam_common_msgs::wamGetRobotPoseFromToolPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9bc33b41fd06e0cc64ed1e05be1d2898";
  }

  static const char* value(const iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/wamGetRobotPoseFromToolPose";
  }

  static const char* value(const iri_wam_common_msgs::wamGetRobotPoseFromToolPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IRI_WAM_COMMON_MSGS_SERVICE_WAMGETROBOTPOSEFROMTOOLPOSE_H

