/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_wam_common_msgs/srv/pose_move.srv */
#ifndef IRI_WAM_COMMON_MSGS_SERVICE_POSE_MOVE_H
#define IRI_WAM_COMMON_MSGS_SERVICE_POSE_MOVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"



namespace iri_wam_common_msgs
{
template <class ContainerAllocator>
struct pose_moveRequest_ {
  typedef pose_moveRequest_<ContainerAllocator> Type;

  pose_moveRequest_()
  : pose()
  , vel(0.0)
  , acc(0.0)
  {
  }

  pose_moveRequest_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  , vel(0.0)
  , acc(0.0)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef double _vel_type;
  double vel;

  typedef double _acc_type;
  double acc;


  typedef boost::shared_ptr< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pose_moveRequest
typedef  ::iri_wam_common_msgs::pose_moveRequest_<std::allocator<void> > pose_moveRequest;

typedef boost::shared_ptr< ::iri_wam_common_msgs::pose_moveRequest> pose_moveRequestPtr;
typedef boost::shared_ptr< ::iri_wam_common_msgs::pose_moveRequest const> pose_moveRequestConstPtr;


template <class ContainerAllocator>
struct pose_moveResponse_ {
  typedef pose_moveResponse_<ContainerAllocator> Type;

  pose_moveResponse_()
  : success(0)
  {
  }

  pose_moveResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef int8_t _success_type;
  int8_t success;


  typedef boost::shared_ptr< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pose_moveResponse
typedef  ::iri_wam_common_msgs::pose_moveResponse_<std::allocator<void> > pose_moveResponse;

typedef boost::shared_ptr< ::iri_wam_common_msgs::pose_moveResponse> pose_moveResponsePtr;
typedef boost::shared_ptr< ::iri_wam_common_msgs::pose_moveResponse const> pose_moveResponseConstPtr;

struct pose_move
{

typedef pose_moveRequest Request;
typedef pose_moveResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct pose_move
} // namespace iri_wam_common_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b0268f46ec050c022f5006d1153e1924";
  }

  static const char* value(const  ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb0268f46ec050c02ULL;
  static const uint64_t static_value2 = 0x2f5006d1153e1924ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/pose_moveRequest";
  }

  static const char* value(const  ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose pose\n\
float64 vel\n\
float64 acc\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b13460cb14006d3852674b4c614f25f";
  }

  static const char* value(const  ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b13460cb14006d3ULL;
  static const uint64_t static_value2 = 0x852674b4c614f25fULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/pose_moveResponse";
  }

  static const char* value(const  ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 success\n\
\n\
\n\
";
  }

  static const char* value(const  ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
    stream.next(m.vel);
    stream.next(m.acc);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pose_moveRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pose_moveResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<iri_wam_common_msgs::pose_move> {
  static const char* value() 
  {
    return "13150f5749ba86f3ea97eb7613e22e0a";
  }

  static const char* value(const iri_wam_common_msgs::pose_move&) { return value(); } 
};

template<>
struct DataType<iri_wam_common_msgs::pose_move> {
  static const char* value() 
  {
    return "iri_wam_common_msgs/pose_move";
  }

  static const char* value(const iri_wam_common_msgs::pose_move&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "13150f5749ba86f3ea97eb7613e22e0a";
  }

  static const char* value(const iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/pose_move";
  }

  static const char* value(const iri_wam_common_msgs::pose_moveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "13150f5749ba86f3ea97eb7613e22e0a";
  }

  static const char* value(const iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_common_msgs/pose_move";
  }

  static const char* value(const iri_wam_common_msgs::pose_moveResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IRI_WAM_COMMON_MSGS_SERVICE_POSE_MOVE_H

