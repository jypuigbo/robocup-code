"""autogenerated by genpy from iri_publish_params/classifier_update.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import iri_publish_params.msg

class classifier_update(genpy.Message):
  _md5sum = "a27aec3298bbdcd2bd8ad5da8e997b16"
  _type = "iri_publish_params/classifier_update"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """classifier_params[] update_params
int32 selected_centroid
int32 filter_method

================================================================================
MSG: iri_publish_params/classifier_params
float32[] params

"""
  __slots__ = ['update_params','selected_centroid','filter_method']
  _slot_types = ['iri_publish_params/classifier_params[]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       update_params,selected_centroid,filter_method

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(classifier_update, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.update_params is None:
        self.update_params = []
      if self.selected_centroid is None:
        self.selected_centroid = 0
      if self.filter_method is None:
        self.filter_method = 0
    else:
      self.update_params = []
      self.selected_centroid = 0
      self.filter_method = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.update_params)
      buff.write(_struct_I.pack(length))
      for val1 in self.update_params:
        length = len(val1.params)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.params))
      _x = self
      buff.write(_struct_2i.pack(_x.selected_centroid, _x.filter_method))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.update_params is None:
        self.update_params = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.update_params = []
      for i in range(0, length):
        val1 = iri_publish_params.msg.classifier_params()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.params = struct.unpack(pattern, str[start:end])
        self.update_params.append(val1)
      _x = self
      start = end
      end += 8
      (_x.selected_centroid, _x.filter_method,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.update_params)
      buff.write(_struct_I.pack(length))
      for val1 in self.update_params:
        length = len(val1.params)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.params.tostring())
      _x = self
      buff.write(_struct_2i.pack(_x.selected_centroid, _x.filter_method))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.update_params is None:
        self.update_params = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.update_params = []
      for i in range(0, length):
        val1 = iri_publish_params.msg.classifier_params()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.params = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.update_params.append(val1)
      _x = self
      start = end
      end += 8
      (_x.selected_centroid, _x.filter_method,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
