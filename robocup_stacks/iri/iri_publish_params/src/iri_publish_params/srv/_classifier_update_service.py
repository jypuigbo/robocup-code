"""autogenerated by genpy from iri_publish_params/classifier_update_serviceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import iri_publish_params.msg

class classifier_update_serviceRequest(genpy.Message):
  _md5sum = "9a9b65e7e75892e27392a8d9a5127a67"
  _type = "iri_publish_params/classifier_update_serviceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """classifier_update params

================================================================================
MSG: iri_publish_params/classifier_update
classifier_params[] update_params
int32 selected_centroid
int32 filter_method

================================================================================
MSG: iri_publish_params/classifier_params
float32[] params

"""
  __slots__ = ['params']
  _slot_types = ['iri_publish_params/classifier_update']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       params

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(classifier_update_serviceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.params is None:
        self.params = iri_publish_params.msg.classifier_update()
    else:
      self.params = iri_publish_params.msg.classifier_update()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.params.update_params)
      buff.write(_struct_I.pack(length))
      for val1 in self.params.update_params:
        length = len(val1.params)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.params))
      _x = self
      buff.write(_struct_2i.pack(_x.params.selected_centroid, _x.params.filter_method))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.params is None:
        self.params = iri_publish_params.msg.classifier_update()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.params.update_params = []
      for i in range(0, length):
        val1 = iri_publish_params.msg.classifier_params()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.params = struct.unpack(pattern, str[start:end])
        self.params.update_params.append(val1)
      _x = self
      start = end
      end += 8
      (_x.params.selected_centroid, _x.params.filter_method,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.params.update_params)
      buff.write(_struct_I.pack(length))
      for val1 in self.params.update_params:
        length = len(val1.params)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.params.tostring())
      _x = self
      buff.write(_struct_2i.pack(_x.params.selected_centroid, _x.params.filter_method))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.params is None:
        self.params = iri_publish_params.msg.classifier_update()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.params.update_params = []
      for i in range(0, length):
        val1 = iri_publish_params.msg.classifier_params()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.params = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.params.update_params.append(val1)
      _x = self
      start = end
      end += 8
      (_x.params.selected_centroid, _x.params.filter_method,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
"""autogenerated by genpy from iri_publish_params/classifier_update_serviceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class classifier_update_serviceResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "iri_publish_params/classifier_update_serviceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool result


"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(classifier_update_serviceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class classifier_update_service(object):
  _type          = 'iri_publish_params/classifier_update_service'
  _md5sum = 'b7540e46e50484b76ac974e85c69cb86'
  _request_class  = classifier_update_serviceRequest
  _response_class = classifier_update_serviceResponse
