/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_publish_params/msg/classifier_update.msg */
#ifndef IRI_PUBLISH_PARAMS_MESSAGE_CLASSIFIER_UPDATE_H
#define IRI_PUBLISH_PARAMS_MESSAGE_CLASSIFIER_UPDATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "iri_publish_params/classifier_params.h"

namespace iri_publish_params
{
template <class ContainerAllocator>
struct classifier_update_ {
  typedef classifier_update_<ContainerAllocator> Type;

  classifier_update_()
  : update_params()
  , selected_centroid(0)
  , filter_method(0)
  {
  }

  classifier_update_(const ContainerAllocator& _alloc)
  : update_params(_alloc)
  , selected_centroid(0)
  , filter_method(0)
  {
  }

  typedef std::vector< ::iri_publish_params::classifier_params_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iri_publish_params::classifier_params_<ContainerAllocator> >::other >  _update_params_type;
  std::vector< ::iri_publish_params::classifier_params_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iri_publish_params::classifier_params_<ContainerAllocator> >::other >  update_params;

  typedef int32_t _selected_centroid_type;
  int32_t selected_centroid;

  typedef int32_t _filter_method_type;
  int32_t filter_method;


  typedef boost::shared_ptr< ::iri_publish_params::classifier_update_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_publish_params::classifier_update_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct classifier_update
typedef  ::iri_publish_params::classifier_update_<std::allocator<void> > classifier_update;

typedef boost::shared_ptr< ::iri_publish_params::classifier_update> classifier_updatePtr;
typedef boost::shared_ptr< ::iri_publish_params::classifier_update const> classifier_updateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_publish_params::classifier_update_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_publish_params::classifier_update_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_publish_params

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_publish_params::classifier_update_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_publish_params::classifier_update_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_publish_params::classifier_update_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a27aec3298bbdcd2bd8ad5da8e997b16";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa27aec3298bbdcd2ULL;
  static const uint64_t static_value2 = 0xbd8ad5da8e997b16ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_publish_params::classifier_update_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_publish_params/classifier_update";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_publish_params::classifier_update_<ContainerAllocator> > {
  static const char* value() 
  {
    return "classifier_params[] update_params\n\
int32 selected_centroid\n\
int32 filter_method\n\
\n\
================================================================================\n\
MSG: iri_publish_params/classifier_params\n\
float32[] params\n\
\n\
";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_publish_params::classifier_update_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.update_params);
    stream.next(m.selected_centroid);
    stream.next(m.filter_method);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct classifier_update_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_publish_params::classifier_update_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_publish_params::classifier_update_<ContainerAllocator> & v) 
  {
    s << indent << "update_params[]" << std::endl;
    for (size_t i = 0; i < v.update_params.size(); ++i)
    {
      s << indent << "  update_params[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::iri_publish_params::classifier_params_<ContainerAllocator> >::stream(s, indent + "    ", v.update_params[i]);
    }
    s << indent << "selected_centroid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.selected_centroid);
    s << indent << "filter_method: ";
    Printer<int32_t>::stream(s, indent + "  ", v.filter_method);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_PUBLISH_PARAMS_MESSAGE_CLASSIFIER_UPDATE_H

