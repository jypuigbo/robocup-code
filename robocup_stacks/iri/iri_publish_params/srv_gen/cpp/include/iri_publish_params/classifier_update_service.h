/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_publish_params/srv/classifier_update_service.srv */
#ifndef IRI_PUBLISH_PARAMS_SERVICE_CLASSIFIER_UPDATE_SERVICE_H
#define IRI_PUBLISH_PARAMS_SERVICE_CLASSIFIER_UPDATE_SERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "iri_publish_params/classifier_update.h"



namespace iri_publish_params
{
template <class ContainerAllocator>
struct classifier_update_serviceRequest_ {
  typedef classifier_update_serviceRequest_<ContainerAllocator> Type;

  classifier_update_serviceRequest_()
  : params()
  {
  }

  classifier_update_serviceRequest_(const ContainerAllocator& _alloc)
  : params(_alloc)
  {
  }

  typedef  ::iri_publish_params::classifier_update_<ContainerAllocator>  _params_type;
   ::iri_publish_params::classifier_update_<ContainerAllocator>  params;


  typedef boost::shared_ptr< ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct classifier_update_serviceRequest
typedef  ::iri_publish_params::classifier_update_serviceRequest_<std::allocator<void> > classifier_update_serviceRequest;

typedef boost::shared_ptr< ::iri_publish_params::classifier_update_serviceRequest> classifier_update_serviceRequestPtr;
typedef boost::shared_ptr< ::iri_publish_params::classifier_update_serviceRequest const> classifier_update_serviceRequestConstPtr;


template <class ContainerAllocator>
struct classifier_update_serviceResponse_ {
  typedef classifier_update_serviceResponse_<ContainerAllocator> Type;

  classifier_update_serviceResponse_()
  : result(false)
  {
  }

  classifier_update_serviceResponse_(const ContainerAllocator& _alloc)
  : result(false)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;


  typedef boost::shared_ptr< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct classifier_update_serviceResponse
typedef  ::iri_publish_params::classifier_update_serviceResponse_<std::allocator<void> > classifier_update_serviceResponse;

typedef boost::shared_ptr< ::iri_publish_params::classifier_update_serviceResponse> classifier_update_serviceResponsePtr;
typedef boost::shared_ptr< ::iri_publish_params::classifier_update_serviceResponse const> classifier_update_serviceResponseConstPtr;

struct classifier_update_service
{

typedef classifier_update_serviceRequest Request;
typedef classifier_update_serviceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct classifier_update_service
} // namespace iri_publish_params

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9a9b65e7e75892e27392a8d9a5127a67";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9a9b65e7e75892e2ULL;
  static const uint64_t static_value2 = 0x7392a8d9a5127a67ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_publish_params/classifier_update_serviceRequest";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "classifier_update params\n\
\n\
================================================================================\n\
MSG: iri_publish_params/classifier_update\n\
classifier_params[] update_params\n\
int32 selected_centroid\n\
int32 filter_method\n\
\n\
================================================================================\n\
MSG: iri_publish_params/classifier_params\n\
float32[] params\n\
\n\
";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb13ac1f1354ccecb7941ee8fa2192e8";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb13ac1f1354ccecULL;
  static const uint64_t static_value2 = 0xb7941ee8fa2192e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_publish_params/classifier_update_serviceResponse";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool result\n\
\n\
\n\
";
  }

  static const char* value(const  ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.params);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct classifier_update_serviceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct classifier_update_serviceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<iri_publish_params::classifier_update_service> {
  static const char* value() 
  {
    return "b7540e46e50484b76ac974e85c69cb86";
  }

  static const char* value(const iri_publish_params::classifier_update_service&) { return value(); } 
};

template<>
struct DataType<iri_publish_params::classifier_update_service> {
  static const char* value() 
  {
    return "iri_publish_params/classifier_update_service";
  }

  static const char* value(const iri_publish_params::classifier_update_service&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b7540e46e50484b76ac974e85c69cb86";
  }

  static const char* value(const iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_publish_params/classifier_update_service";
  }

  static const char* value(const iri_publish_params::classifier_update_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b7540e46e50484b76ac974e85c69cb86";
  }

  static const char* value(const iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_publish_params/classifier_update_service";
  }

  static const char* value(const iri_publish_params::classifier_update_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IRI_PUBLISH_PARAMS_SERVICE_CLASSIFIER_UPDATE_SERVICE_H

