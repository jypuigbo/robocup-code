/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/msg/ArrayIndexes.msg */
#ifndef ESTIRABOT_MSGS_MESSAGE_ARRAYINDEXES_H
#define ESTIRABOT_MSGS_MESSAGE_ARRAYINDEXES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace estirabot_msgs
{
template <class ContainerAllocator>
struct ArrayIndexes_ {
  typedef ArrayIndexes_<ContainerAllocator> Type;

  ArrayIndexes_()
  : indexes()
  {
  }

  ArrayIndexes_(const ContainerAllocator& _alloc)
  : indexes(_alloc)
  {
  }

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _indexes_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  indexes;


  typedef boost::shared_ptr< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ArrayIndexes
typedef  ::estirabot_msgs::ArrayIndexes_<std::allocator<void> > ArrayIndexes;

typedef boost::shared_ptr< ::estirabot_msgs::ArrayIndexes> ArrayIndexesPtr;
typedef boost::shared_ptr< ::estirabot_msgs::ArrayIndexes const> ArrayIndexesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "548f4b0df4a06b3a5adcd286cfc278aa";
  }

  static const char* value(const  ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x548f4b0df4a06b3aULL;
  static const uint64_t static_value2 = 0x5adcd286cfc278aaULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/ArrayIndexes";
  }

  static const char* value(const  ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32[] indexes\n\
";
  }

  static const char* value(const  ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.indexes);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ArrayIndexes_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::estirabot_msgs::ArrayIndexes_<ContainerAllocator> & v) 
  {
    s << indent << "indexes[]" << std::endl;
    for (size_t i = 0; i < v.indexes.size(); ++i)
    {
      s << indent << "  indexes[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.indexes[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ESTIRABOT_MSGS_MESSAGE_ARRAYINDEXES_H

