/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/msg/TraversedEllipses.msg */
#ifndef ESTIRABOT_MSGS_MESSAGE_TRAVERSEDELLIPSES_H
#define ESTIRABOT_MSGS_MESSAGE_TRAVERSEDELLIPSES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace estirabot_msgs
{
template <class ContainerAllocator>
struct TraversedEllipses_ {
  typedef TraversedEllipses_<ContainerAllocator> Type;

  TraversedEllipses_()
  : idx1(0)
  , idx2(0)
  , traversedIdxs()
  {
  }

  TraversedEllipses_(const ContainerAllocator& _alloc)
  : idx1(0)
  , idx2(0)
  , traversedIdxs(_alloc)
  {
  }

  typedef int32_t _idx1_type;
  int32_t idx1;

  typedef int32_t _idx2_type;
  int32_t idx2;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _traversedIdxs_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  traversedIdxs;


  typedef boost::shared_ptr< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TraversedEllipses
typedef  ::estirabot_msgs::TraversedEllipses_<std::allocator<void> > TraversedEllipses;

typedef boost::shared_ptr< ::estirabot_msgs::TraversedEllipses> TraversedEllipsesPtr;
typedef boost::shared_ptr< ::estirabot_msgs::TraversedEllipses const> TraversedEllipsesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> > {
  static const char* value() 
  {
    return "baffdeb476b4d43dc6469d2a664bf059";
  }

  static const char* value(const  ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbaffdeb476b4d43dULL;
  static const uint64_t static_value2 = 0xc6469d2a664bf059ULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/TraversedEllipses";
  }

  static const char* value(const  ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 idx1\n\
int32 idx2\n\
int32[] traversedIdxs\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.idx1);
    stream.next(m.idx2);
    stream.next(m.traversedIdxs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TraversedEllipses_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::estirabot_msgs::TraversedEllipses_<ContainerAllocator> & v) 
  {
    s << indent << "idx1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idx1);
    s << indent << "idx2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.idx2);
    s << indent << "traversedIdxs[]" << std::endl;
    for (size_t i = 0; i < v.traversedIdxs.size(); ++i)
    {
      s << indent << "  traversedIdxs[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.traversedIdxs[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ESTIRABOT_MSGS_MESSAGE_TRAVERSEDELLIPSES_H

