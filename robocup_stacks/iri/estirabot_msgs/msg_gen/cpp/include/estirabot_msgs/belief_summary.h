/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/msg/belief_summary.msg */
#ifndef ESTIRABOT_MSGS_MESSAGE_BELIEF_SUMMARY_H
#define ESTIRABOT_MSGS_MESSAGE_BELIEF_SUMMARY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace estirabot_msgs
{
template <class ContainerAllocator>
struct belief_summary_ {
  typedef belief_summary_<ContainerAllocator> Type;

  belief_summary_()
  : num_objects_A(0.0)
  , uncertainty_A(0.0)
  , num_objects_B(0.0)
  , uncertainty_B(0.0)
  , uncertainty_total(0.0)
  {
  }

  belief_summary_(const ContainerAllocator& _alloc)
  : num_objects_A(0.0)
  , uncertainty_A(0.0)
  , num_objects_B(0.0)
  , uncertainty_B(0.0)
  , uncertainty_total(0.0)
  {
  }

  typedef float _num_objects_A_type;
  float num_objects_A;

  typedef float _uncertainty_A_type;
  float uncertainty_A;

  typedef float _num_objects_B_type;
  float num_objects_B;

  typedef float _uncertainty_B_type;
  float uncertainty_B;

  typedef float _uncertainty_total_type;
  float uncertainty_total;


  typedef boost::shared_ptr< ::estirabot_msgs::belief_summary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::belief_summary_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct belief_summary
typedef  ::estirabot_msgs::belief_summary_<std::allocator<void> > belief_summary;

typedef boost::shared_ptr< ::estirabot_msgs::belief_summary> belief_summaryPtr;
typedef boost::shared_ptr< ::estirabot_msgs::belief_summary const> belief_summaryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::estirabot_msgs::belief_summary_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::estirabot_msgs::belief_summary_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::belief_summary_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::belief_summary_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::belief_summary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09535f079069869195fe13351686487e";
  }

  static const char* value(const  ::estirabot_msgs::belief_summary_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x09535f0790698691ULL;
  static const uint64_t static_value2 = 0x95fe13351686487eULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::belief_summary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/belief_summary";
  }

  static const char* value(const  ::estirabot_msgs::belief_summary_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::belief_summary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 num_objects_A\n\
float32 uncertainty_A\n\
float32 num_objects_B\n\
float32 uncertainty_B\n\
float32 uncertainty_total\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::belief_summary_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estirabot_msgs::belief_summary_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::belief_summary_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.num_objects_A);
    stream.next(m.uncertainty_A);
    stream.next(m.num_objects_B);
    stream.next(m.uncertainty_B);
    stream.next(m.uncertainty_total);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct belief_summary_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estirabot_msgs::belief_summary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::estirabot_msgs::belief_summary_<ContainerAllocator> & v) 
  {
    s << indent << "num_objects_A: ";
    Printer<float>::stream(s, indent + "  ", v.num_objects_A);
    s << indent << "uncertainty_A: ";
    Printer<float>::stream(s, indent + "  ", v.uncertainty_A);
    s << indent << "num_objects_B: ";
    Printer<float>::stream(s, indent + "  ", v.num_objects_B);
    s << indent << "uncertainty_B: ";
    Printer<float>::stream(s, indent + "  ", v.uncertainty_B);
    s << indent << "uncertainty_total: ";
    Printer<float>::stream(s, indent + "  ", v.uncertainty_total);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ESTIRABOT_MSGS_MESSAGE_BELIEF_SUMMARY_H

