/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/msg/PointsDistanceMsg.msg */
#ifndef ESTIRABOT_MSGS_MESSAGE_POINTSDISTANCEMSG_H
#define ESTIRABOT_MSGS_MESSAGE_POINTSDISTANCEMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace estirabot_msgs
{
template <class ContainerAllocator>
struct PointsDistanceMsg_ {
  typedef PointsDistanceMsg_<ContainerAllocator> Type;

  PointsDistanceMsg_()
  : origIdx(0)
  , dstIdx(0)
  , distance(0.0)
  {
  }

  PointsDistanceMsg_(const ContainerAllocator& _alloc)
  : origIdx(0)
  , dstIdx(0)
  , distance(0.0)
  {
  }

  typedef uint32_t _origIdx_type;
  uint32_t origIdx;

  typedef uint32_t _dstIdx_type;
  uint32_t dstIdx;

  typedef double _distance_type;
  double distance;


  typedef boost::shared_ptr< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PointsDistanceMsg
typedef  ::estirabot_msgs::PointsDistanceMsg_<std::allocator<void> > PointsDistanceMsg;

typedef boost::shared_ptr< ::estirabot_msgs::PointsDistanceMsg> PointsDistanceMsgPtr;
typedef boost::shared_ptr< ::estirabot_msgs::PointsDistanceMsg const> PointsDistanceMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f7e654975217ecc288f9361563bb698";
  }

  static const char* value(const  ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f7e654975217eccULL;
  static const uint64_t static_value2 = 0x288f9361563bb698ULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/PointsDistanceMsg";
  }

  static const char* value(const  ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 origIdx\n\
uint32 dstIdx\n\
float64 distance\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.origIdx);
    stream.next(m.dstIdx);
    stream.next(m.distance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PointsDistanceMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> & v) 
  {
    s << indent << "origIdx: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.origIdx);
    s << indent << "dstIdx: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dstIdx);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ESTIRABOT_MSGS_MESSAGE_POINTSDISTANCEMSG_H

