/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/msg/GraspPointParameters.msg */
#ifndef ESTIRABOT_MSGS_MESSAGE_GRASPPOINTPARAMETERS_H
#define ESTIRABOT_MSGS_MESSAGE_GRASPPOINTPARAMETERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Transform.h"
#include "geometry_msgs/Transform.h"

namespace estirabot_msgs
{
template <class ContainerAllocator>
struct GraspPointParameters_ {
  typedef GraspPointParameters_<ContainerAllocator> Type;

  GraspPointParameters_()
  : pre_grasp_modifier()
  , grasp_modifiers()
  , grasp_modifier_used(0)
  {
  }

  GraspPointParameters_(const ContainerAllocator& _alloc)
  : pre_grasp_modifier(_alloc)
  , grasp_modifiers(_alloc)
  , grasp_modifier_used(0)
  {
  }

  typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _pre_grasp_modifier_type;
   ::geometry_msgs::Transform_<ContainerAllocator>  pre_grasp_modifier;

  typedef std::vector< ::geometry_msgs::Transform_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Transform_<ContainerAllocator> >::other >  _grasp_modifiers_type;
  std::vector< ::geometry_msgs::Transform_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Transform_<ContainerAllocator> >::other >  grasp_modifiers;

  typedef uint8_t _grasp_modifier_used_type;
  uint8_t grasp_modifier_used;


  typedef boost::shared_ptr< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GraspPointParameters
typedef  ::estirabot_msgs::GraspPointParameters_<std::allocator<void> > GraspPointParameters;

typedef boost::shared_ptr< ::estirabot_msgs::GraspPointParameters> GraspPointParametersPtr;
typedef boost::shared_ptr< ::estirabot_msgs::GraspPointParameters const> GraspPointParametersConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4a7fd3c439b5601709521f9ae1410df2";
  }

  static const char* value(const  ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4a7fd3c439b56017ULL;
  static const uint64_t static_value2 = 0x09521f9ae1410df2ULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/GraspPointParameters";
  }

  static const char* value(const  ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Message for parameters to modify a grasp point\n\
# These parameters apply on a cartesian coordinate\n\
# (geometry_msgs/pose).\n\
\n\
geometry_msgs/Transform pre_grasp_modifier\n\
geometry_msgs/Transform[] grasp_modifiers\n\
uint8 grasp_modifier_used\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pre_grasp_modifier);
    stream.next(m.grasp_modifiers);
    stream.next(m.grasp_modifier_used);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GraspPointParameters_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> & v) 
  {
    s << indent << "pre_grasp_modifier: ";
s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.pre_grasp_modifier);
    s << indent << "grasp_modifiers[]" << std::endl;
    for (size_t i = 0; i < v.grasp_modifiers.size(); ++i)
    {
      s << indent << "  grasp_modifiers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "    ", v.grasp_modifiers[i]);
    }
    s << indent << "grasp_modifier_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grasp_modifier_used);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ESTIRABOT_MSGS_MESSAGE_GRASPPOINTPARAMETERS_H

