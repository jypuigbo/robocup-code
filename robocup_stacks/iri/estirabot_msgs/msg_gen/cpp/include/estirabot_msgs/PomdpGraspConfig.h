/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/msg/PomdpGraspConfig.msg */
#ifndef ESTIRABOT_MSGS_MESSAGE_POMDPGRASPCONFIG_H
#define ESTIRABOT_MSGS_MESSAGE_POMDPGRASPCONFIG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "estirabot_msgs/GraspPointParameters.h"
#include "geometry_msgs/PoseStamped.h"

namespace estirabot_msgs
{
template <class ContainerAllocator>
struct PomdpGraspConfig_ {
  typedef PomdpGraspConfig_<ContainerAllocator> Type;

  PomdpGraspConfig_()
  : best_pose_algorithm_id(0)
  , actiontype(0)
  , grabbing_zone(0)
  , approach_config()
  , fingers_grasp_configs()
  , place_point()
  {
  }

  PomdpGraspConfig_(const ContainerAllocator& _alloc)
  : best_pose_algorithm_id(0)
  , actiontype(0)
  , grabbing_zone(0)
  , approach_config(_alloc)
  , fingers_grasp_configs(_alloc)
  , place_point(_alloc)
  {
  }

  typedef int8_t _best_pose_algorithm_id_type;
  int8_t best_pose_algorithm_id;

  typedef int8_t _actiontype_type;
  int8_t actiontype;

  typedef int8_t _grabbing_zone_type;
  int8_t grabbing_zone;

  typedef  ::estirabot_msgs::GraspPointParameters_<ContainerAllocator>  _approach_config_type;
   ::estirabot_msgs::GraspPointParameters_<ContainerAllocator>  approach_config;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _fingers_grasp_configs_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  fingers_grasp_configs;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _place_point_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  place_point;

  enum { GRAB = 0 };
  enum { DROP = 1 };
  enum { BOTH_ZONES = 0 };
  enum { LEFT_ZONE = 1 };
  enum { RIGHT_ZONE = 2 };
  enum { MAX_HEIGHT_ALG = 0 };
  enum { MAX_WRINKLE_ALG = 1 };
  enum { FUSION_ALG = 2 };
  enum { APPROACH_TOP_DEEP = 0 };
  enum { APPROACH_TOP_SURFACE = 1 };
  enum { APPROACH_SIDE_DEEP = 2 };
  enum { APPROACH_SIDE_SURFACE = 3 };

  typedef boost::shared_ptr< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PomdpGraspConfig
typedef  ::estirabot_msgs::PomdpGraspConfig_<std::allocator<void> > PomdpGraspConfig;

typedef boost::shared_ptr< ::estirabot_msgs::PomdpGraspConfig> PomdpGraspConfigPtr;
typedef boost::shared_ptr< ::estirabot_msgs::PomdpGraspConfig const> PomdpGraspConfigConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "38bd3d3705953515e94def1a3e168b6c";
  }

  static const char* value(const  ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x38bd3d3705953515ULL;
  static const uint64_t static_value2 = 0xe94def1a3e168b6cULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/PomdpGraspConfig";
  }

  static const char* value(const  ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Message containing configuration for the pomdp grasping process\n\
\n\
# Define grabbing_zones\n\
int8 GRAB = 0\n\
int8 DROP = 1\n\
\n\
# Define grabbing_zones\n\
int8 BOTH_ZONES = 0\n\
int8 LEFT_ZONE = 1\n\
int8 RIGHT_ZONE = 2\n\
\n\
# Define best pose algorithms\n\
int8 MAX_HEIGHT_ALG = 0\n\
int8 MAX_WRINKLE_ALG = 1\n\
int8 FUSION_ALG = 2\n\
\n\
# Define posible approach identifiers\n\
int8 APPROACH_TOP_DEEP = 0\n\
int8 APPROACH_TOP_SURFACE = 1\n\
int8 APPROACH_SIDE_DEEP = 2\n\
int8 APPROACH_SIDE_SURFACE = 3\n\
\n\
int8 best_pose_algorithm_id\n\
int8 actiontype\n\
int8 grabbing_zone\n\
estirabot_msgs/GraspPointParameters approach_config\n\
string[] fingers_grasp_configs\n\
geometry_msgs/PoseStamped place_point\n\
\n\
================================================================================\n\
MSG: estirabot_msgs/GraspPointParameters\n\
# Message for parameters to modify a grasp point\n\
# These parameters apply on a cartesian coordinate\n\
# (geometry_msgs/pose).\n\
\n\
geometry_msgs/Transform pre_grasp_modifier\n\
geometry_msgs/Transform[] grasp_modifiers\n\
uint8 grasp_modifier_used\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.best_pose_algorithm_id);
    stream.next(m.actiontype);
    stream.next(m.grabbing_zone);
    stream.next(m.approach_config);
    stream.next(m.fingers_grasp_configs);
    stream.next(m.place_point);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PomdpGraspConfig_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::estirabot_msgs::PomdpGraspConfig_<ContainerAllocator> & v) 
  {
    s << indent << "best_pose_algorithm_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.best_pose_algorithm_id);
    s << indent << "actiontype: ";
    Printer<int8_t>::stream(s, indent + "  ", v.actiontype);
    s << indent << "grabbing_zone: ";
    Printer<int8_t>::stream(s, indent + "  ", v.grabbing_zone);
    s << indent << "approach_config: ";
s << std::endl;
    Printer< ::estirabot_msgs::GraspPointParameters_<ContainerAllocator> >::stream(s, indent + "  ", v.approach_config);
    s << indent << "fingers_grasp_configs[]" << std::endl;
    for (size_t i = 0; i < v.fingers_grasp_configs.size(); ++i)
    {
      s << indent << "  fingers_grasp_configs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fingers_grasp_configs[i]);
    }
    s << indent << "place_point: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.place_point);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ESTIRABOT_MSGS_MESSAGE_POMDPGRASPCONFIG_H

