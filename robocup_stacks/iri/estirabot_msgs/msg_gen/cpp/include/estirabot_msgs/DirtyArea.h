/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/msg/DirtyArea.msg */
#ifndef ESTIRABOT_MSGS_MESSAGE_DIRTYAREA_H
#define ESTIRABOT_MSGS_MESSAGE_DIRTYAREA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "estirabot_msgs/Ellipse.h"

namespace estirabot_msgs
{
template <class ContainerAllocator>
struct DirtyArea_ {
  typedef DirtyArea_<ContainerAllocator> Type;

  DirtyArea_()
  : id(0)
  , ellipse()
  , sparse(false)
  , area(0)
  , shape(0)
  {
  }

  DirtyArea_(const ContainerAllocator& _alloc)
  : id(0)
  , ellipse(_alloc)
  , sparse(false)
  , area(0)
  , shape(0)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef  ::estirabot_msgs::Ellipse_<ContainerAllocator>  _ellipse_type;
   ::estirabot_msgs::Ellipse_<ContainerAllocator>  ellipse;

  typedef uint8_t _sparse_type;
  uint8_t sparse;

  typedef uint8_t _area_type;
  uint8_t area;

  typedef uint8_t _shape_type;
  uint8_t shape;


  typedef boost::shared_ptr< ::estirabot_msgs::DirtyArea_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::DirtyArea_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DirtyArea
typedef  ::estirabot_msgs::DirtyArea_<std::allocator<void> > DirtyArea;

typedef boost::shared_ptr< ::estirabot_msgs::DirtyArea> DirtyAreaPtr;
typedef boost::shared_ptr< ::estirabot_msgs::DirtyArea const> DirtyAreaConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::estirabot_msgs::DirtyArea_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::estirabot_msgs::DirtyArea_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::DirtyArea_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::DirtyArea_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::DirtyArea_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b156136a0460cfb7965b803a38c7cc1";
  }

  static const char* value(const  ::estirabot_msgs::DirtyArea_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2b156136a0460cfbULL;
  static const uint64_t static_value2 = 0x7965b803a38c7cc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::DirtyArea_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/DirtyArea";
  }

  static const char* value(const  ::estirabot_msgs::DirtyArea_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::DirtyArea_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 id\n\
estirabot_msgs/Ellipse ellipse\n\
bool sparse\n\
uint8 area\n\
uint8 shape\n\
\n\
================================================================================\n\
MSG: estirabot_msgs/Ellipse\n\
iri_perception_msgs/ImagePoint center\n\
iri_perception_msgs/ImageSize size\n\
float64 angle\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/ImagePoint\n\
uint32 x\n\
uint32 y\n\
================================================================================\n\
MSG: iri_perception_msgs/ImageSize\n\
uint32 width\n\
uint32 height\n\
";
  }

  static const char* value(const  ::estirabot_msgs::DirtyArea_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estirabot_msgs::DirtyArea_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::DirtyArea_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.ellipse);
    stream.next(m.sparse);
    stream.next(m.area);
    stream.next(m.shape);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DirtyArea_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estirabot_msgs::DirtyArea_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::estirabot_msgs::DirtyArea_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "ellipse: ";
s << std::endl;
    Printer< ::estirabot_msgs::Ellipse_<ContainerAllocator> >::stream(s, indent + "  ", v.ellipse);
    s << indent << "sparse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sparse);
    s << indent << "area: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.area);
    s << indent << "shape: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shape);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ESTIRABOT_MSGS_MESSAGE_DIRTYAREA_H

