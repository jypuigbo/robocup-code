/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/srv/obs2action.srv */
#ifndef ESTIRABOT_MSGS_SERVICE_OBS2ACTION_H
#define ESTIRABOT_MSGS_SERVICE_OBS2ACTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace estirabot_msgs
{
template <class ContainerAllocator>
struct obs2actionRequest_ {
  typedef obs2actionRequest_<ContainerAllocator> Type;

  obs2actionRequest_()
  : first(false)
  , observation(0)
  {
  }

  obs2actionRequest_(const ContainerAllocator& _alloc)
  : first(false)
  , observation(0)
  {
  }

  typedef uint8_t _first_type;
  uint8_t first;

  typedef uint32_t _observation_type;
  uint32_t observation;


  typedef boost::shared_ptr< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct obs2actionRequest
typedef  ::estirabot_msgs::obs2actionRequest_<std::allocator<void> > obs2actionRequest;

typedef boost::shared_ptr< ::estirabot_msgs::obs2actionRequest> obs2actionRequestPtr;
typedef boost::shared_ptr< ::estirabot_msgs::obs2actionRequest const> obs2actionRequestConstPtr;


template <class ContainerAllocator>
struct obs2actionResponse_ {
  typedef obs2actionResponse_<ContainerAllocator> Type;

  obs2actionResponse_()
  : goal_reached(false)
  , action(0)
  {
  }

  obs2actionResponse_(const ContainerAllocator& _alloc)
  : goal_reached(false)
  , action(0)
  {
  }

  typedef uint8_t _goal_reached_type;
  uint8_t goal_reached;

  typedef uint32_t _action_type;
  uint32_t action;


  typedef boost::shared_ptr< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct obs2actionResponse
typedef  ::estirabot_msgs::obs2actionResponse_<std::allocator<void> > obs2actionResponse;

typedef boost::shared_ptr< ::estirabot_msgs::obs2actionResponse> obs2actionResponsePtr;
typedef boost::shared_ptr< ::estirabot_msgs::obs2actionResponse const> obs2actionResponseConstPtr;

struct obs2action
{

typedef obs2actionRequest Request;
typedef obs2actionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct obs2action
} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e60a6c74b7eccb51bd47208b25474bd3";
  }

  static const char* value(const  ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe60a6c74b7eccb51ULL;
  static const uint64_t static_value2 = 0xbd47208b25474bd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/obs2actionRequest";
  }

  static const char* value(const  ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool first\n\
uint32 observation\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bfee53a84ea26865ff03480d25e39664";
  }

  static const char* value(const  ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbfee53a84ea26865ULL;
  static const uint64_t static_value2 = 0xff03480d25e39664ULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/obs2actionResponse";
  }

  static const char* value(const  ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool goal_reached\n\
uint32 action\n\
\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::obs2actionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.first);
    stream.next(m.observation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct obs2actionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::obs2actionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.goal_reached);
    stream.next(m.action);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct obs2actionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<estirabot_msgs::obs2action> {
  static const char* value() 
  {
    return "370c545e7c55b03ea2f710e8d5f68de6";
  }

  static const char* value(const estirabot_msgs::obs2action&) { return value(); } 
};

template<>
struct DataType<estirabot_msgs::obs2action> {
  static const char* value() 
  {
    return "estirabot_msgs/obs2action";
  }

  static const char* value(const estirabot_msgs::obs2action&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estirabot_msgs::obs2actionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "370c545e7c55b03ea2f710e8d5f68de6";
  }

  static const char* value(const estirabot_msgs::obs2actionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estirabot_msgs::obs2actionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/obs2action";
  }

  static const char* value(const estirabot_msgs::obs2actionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estirabot_msgs::obs2actionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "370c545e7c55b03ea2f710e8d5f68de6";
  }

  static const char* value(const estirabot_msgs::obs2actionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estirabot_msgs::obs2actionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/obs2action";
  }

  static const char* value(const estirabot_msgs::obs2actionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ESTIRABOT_MSGS_SERVICE_OBS2ACTION_H

