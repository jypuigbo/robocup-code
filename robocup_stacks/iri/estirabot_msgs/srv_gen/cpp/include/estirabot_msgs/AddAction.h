/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/srv/AddAction.srv */
#ifndef ESTIRABOT_MSGS_SERVICE_ADDACTION_H
#define ESTIRABOT_MSGS_SERVICE_ADDACTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "estirabot_msgs/DirtyArea.h"
#include "estirabot_msgs/ArrayIndexes.h"
#include "estirabot_msgs/PointsDistanceMsg.h"



namespace estirabot_msgs
{
template <class ContainerAllocator>
struct AddActionRequest_ {
  typedef AddActionRequest_<ContainerAllocator> Type;

  AddActionRequest_()
  : action()
  , dirty_areas()
  , target_dirty_areas()
  , distances()
  , state_string()
  , action_movements_successful(false)
  {
  }

  AddActionRequest_(const ContainerAllocator& _alloc)
  : action(_alloc)
  , dirty_areas(_alloc)
  , target_dirty_areas(_alloc)
  , distances(_alloc)
  , state_string(_alloc)
  , action_movements_successful(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  action;

  typedef std::vector< ::estirabot_msgs::DirtyArea_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::estirabot_msgs::DirtyArea_<ContainerAllocator> >::other >  _dirty_areas_type;
  std::vector< ::estirabot_msgs::DirtyArea_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::estirabot_msgs::DirtyArea_<ContainerAllocator> >::other >  dirty_areas;

  typedef  ::estirabot_msgs::ArrayIndexes_<ContainerAllocator>  _target_dirty_areas_type;
   ::estirabot_msgs::ArrayIndexes_<ContainerAllocator>  target_dirty_areas;

  typedef std::vector< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> >::other >  _distances_type;
  std::vector< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::estirabot_msgs::PointsDistanceMsg_<ContainerAllocator> >::other >  distances;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_string_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  state_string;

  typedef uint8_t _action_movements_successful_type;
  uint8_t action_movements_successful;


  typedef boost::shared_ptr< ::estirabot_msgs::AddActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::AddActionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddActionRequest
typedef  ::estirabot_msgs::AddActionRequest_<std::allocator<void> > AddActionRequest;

typedef boost::shared_ptr< ::estirabot_msgs::AddActionRequest> AddActionRequestPtr;
typedef boost::shared_ptr< ::estirabot_msgs::AddActionRequest const> AddActionRequestConstPtr;


template <class ContainerAllocator>
struct AddActionResponse_ {
  typedef AddActionResponse_<ContainerAllocator> Type;

  AddActionResponse_()
  : needs_learning(false)
  {
  }

  AddActionResponse_(const ContainerAllocator& _alloc)
  : needs_learning(false)
  {
  }

  typedef uint8_t _needs_learning_type;
  uint8_t needs_learning;


  typedef boost::shared_ptr< ::estirabot_msgs::AddActionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::AddActionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddActionResponse
typedef  ::estirabot_msgs::AddActionResponse_<std::allocator<void> > AddActionResponse;

typedef boost::shared_ptr< ::estirabot_msgs::AddActionResponse> AddActionResponsePtr;
typedef boost::shared_ptr< ::estirabot_msgs::AddActionResponse const> AddActionResponseConstPtr;

struct AddAction
{

typedef AddActionRequest Request;
typedef AddActionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddAction
} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::AddActionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::AddActionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::AddActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8b2f9ffeecdc99c7f6cf766613ded2cf";
  }

  static const char* value(const  ::estirabot_msgs::AddActionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8b2f9ffeecdc99c7ULL;
  static const uint64_t static_value2 = 0xf6cf766613ded2cfULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::AddActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/AddActionRequest";
  }

  static const char* value(const  ::estirabot_msgs::AddActionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::AddActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string action\n\
estirabot_msgs/DirtyArea[] dirty_areas\n\
estirabot_msgs/ArrayIndexes target_dirty_areas\n\
estirabot_msgs/PointsDistanceMsg[] distances\n\
string state_string\n\
bool action_movements_successful\n\
\n\
================================================================================\n\
MSG: estirabot_msgs/DirtyArea\n\
int32 id\n\
estirabot_msgs/Ellipse ellipse\n\
bool sparse\n\
uint8 area\n\
uint8 shape\n\
\n\
================================================================================\n\
MSG: estirabot_msgs/Ellipse\n\
iri_perception_msgs/ImagePoint center\n\
iri_perception_msgs/ImageSize size\n\
float64 angle\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/ImagePoint\n\
uint32 x\n\
uint32 y\n\
================================================================================\n\
MSG: iri_perception_msgs/ImageSize\n\
uint32 width\n\
uint32 height\n\
================================================================================\n\
MSG: estirabot_msgs/ArrayIndexes\n\
uint32[] indexes\n\
================================================================================\n\
MSG: estirabot_msgs/PointsDistanceMsg\n\
uint32 origIdx\n\
uint32 dstIdx\n\
float64 distance\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::AddActionRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::AddActionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::AddActionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::AddActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f4377acd93bf078f61b24c8bc67a2b51";
  }

  static const char* value(const  ::estirabot_msgs::AddActionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf4377acd93bf078fULL;
  static const uint64_t static_value2 = 0x61b24c8bc67a2b51ULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::AddActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/AddActionResponse";
  }

  static const char* value(const  ::estirabot_msgs::AddActionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::AddActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool needs_learning\n\
\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::AddActionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estirabot_msgs::AddActionResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::AddActionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.action);
    stream.next(m.dirty_areas);
    stream.next(m.target_dirty_areas);
    stream.next(m.distances);
    stream.next(m.state_string);
    stream.next(m.action_movements_successful);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddActionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::AddActionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.needs_learning);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddActionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<estirabot_msgs::AddAction> {
  static const char* value() 
  {
    return "3ef83f1df6473e149ff74e23eea70811";
  }

  static const char* value(const estirabot_msgs::AddAction&) { return value(); } 
};

template<>
struct DataType<estirabot_msgs::AddAction> {
  static const char* value() 
  {
    return "estirabot_msgs/AddAction";
  }

  static const char* value(const estirabot_msgs::AddAction&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estirabot_msgs::AddActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ef83f1df6473e149ff74e23eea70811";
  }

  static const char* value(const estirabot_msgs::AddActionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estirabot_msgs::AddActionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/AddAction";
  }

  static const char* value(const estirabot_msgs::AddActionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estirabot_msgs::AddActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ef83f1df6473e149ff74e23eea70811";
  }

  static const char* value(const estirabot_msgs::AddActionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estirabot_msgs::AddActionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/AddAction";
  }

  static const char* value(const estirabot_msgs::AddActionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ESTIRABOT_MSGS_SERVICE_ADDACTION_H

