/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/srv/AddState.srv */
#ifndef ESTIRABOT_MSGS_SERVICE_ADDSTATE_H
#define ESTIRABOT_MSGS_SERVICE_ADDSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace estirabot_msgs
{
template <class ContainerAllocator>
struct AddStateRequest_ {
  typedef AddStateRequest_<ContainerAllocator> Type;

  AddStateRequest_()
  : state()
  {
  }

  AddStateRequest_(const ContainerAllocator& _alloc)
  : state(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  state;


  typedef boost::shared_ptr< ::estirabot_msgs::AddStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::AddStateRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddStateRequest
typedef  ::estirabot_msgs::AddStateRequest_<std::allocator<void> > AddStateRequest;

typedef boost::shared_ptr< ::estirabot_msgs::AddStateRequest> AddStateRequestPtr;
typedef boost::shared_ptr< ::estirabot_msgs::AddStateRequest const> AddStateRequestConstPtr;


template <class ContainerAllocator>
struct AddStateResponse_ {
  typedef AddStateResponse_<ContainerAllocator> Type;

  AddStateResponse_()
  : rules_updated(false)
  {
  }

  AddStateResponse_(const ContainerAllocator& _alloc)
  : rules_updated(false)
  {
  }

  typedef uint8_t _rules_updated_type;
  uint8_t rules_updated;


  typedef boost::shared_ptr< ::estirabot_msgs::AddStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::AddStateResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddStateResponse
typedef  ::estirabot_msgs::AddStateResponse_<std::allocator<void> > AddStateResponse;

typedef boost::shared_ptr< ::estirabot_msgs::AddStateResponse> AddStateResponsePtr;
typedef boost::shared_ptr< ::estirabot_msgs::AddStateResponse const> AddStateResponseConstPtr;

struct AddState
{

typedef AddStateRequest Request;
typedef AddStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddState
} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::AddStateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::AddStateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::AddStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "af6d3a99f0fbeb66d3248fa4b3e675fb";
  }

  static const char* value(const  ::estirabot_msgs::AddStateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaf6d3a99f0fbeb66ULL;
  static const uint64_t static_value2 = 0xd3248fa4b3e675fbULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::AddStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/AddStateRequest";
  }

  static const char* value(const  ::estirabot_msgs::AddStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::AddStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string state\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::AddStateRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::AddStateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::AddStateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::AddStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "83f79942edd92900f0a68f6e3f8b9fbc";
  }

  static const char* value(const  ::estirabot_msgs::AddStateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x83f79942edd92900ULL;
  static const uint64_t static_value2 = 0xf0a68f6e3f8b9fbcULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::AddStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/AddStateResponse";
  }

  static const char* value(const  ::estirabot_msgs::AddStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::AddStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool rules_updated\n\
\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::AddStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estirabot_msgs::AddStateResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::AddStateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddStateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::AddStateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rules_updated);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddStateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<estirabot_msgs::AddState> {
  static const char* value() 
  {
    return "cad71f86d65cfc59264a59a7bd0dbfe8";
  }

  static const char* value(const estirabot_msgs::AddState&) { return value(); } 
};

template<>
struct DataType<estirabot_msgs::AddState> {
  static const char* value() 
  {
    return "estirabot_msgs/AddState";
  }

  static const char* value(const estirabot_msgs::AddState&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estirabot_msgs::AddStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cad71f86d65cfc59264a59a7bd0dbfe8";
  }

  static const char* value(const estirabot_msgs::AddStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estirabot_msgs::AddStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/AddState";
  }

  static const char* value(const estirabot_msgs::AddStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estirabot_msgs::AddStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cad71f86d65cfc59264a59a7bd0dbfe8";
  }

  static const char* value(const estirabot_msgs::AddStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estirabot_msgs::AddStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/AddState";
  }

  static const char* value(const estirabot_msgs::AddStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ESTIRABOT_MSGS_SERVICE_ADDSTATE_H

