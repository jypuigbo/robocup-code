/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/estirabot_msgs/srv/StateRepresentationChanges.srv */
#ifndef ESTIRABOT_MSGS_SERVICE_STATEREPRESENTATIONCHANGES_H
#define ESTIRABOT_MSGS_SERVICE_STATEREPRESENTATIONCHANGES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/Image.h"
#include "sensor_msgs/Image.h"
#include "estirabot_msgs/DirtyArea.h"



namespace estirabot_msgs
{
template <class ContainerAllocator>
struct StateRepresentationChangesRequest_ {
  typedef StateRepresentationChangesRequest_<ContainerAllocator> Type;

  StateRepresentationChangesRequest_()
  : prev_image()
  , current_image()
  , ignored_dirty_areas()
  {
  }

  StateRepresentationChangesRequest_(const ContainerAllocator& _alloc)
  : prev_image(_alloc)
  , current_image(_alloc)
  , ignored_dirty_areas(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _prev_image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  prev_image;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _current_image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  current_image;

  typedef std::vector< ::estirabot_msgs::DirtyArea_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::estirabot_msgs::DirtyArea_<ContainerAllocator> >::other >  _ignored_dirty_areas_type;
  std::vector< ::estirabot_msgs::DirtyArea_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::estirabot_msgs::DirtyArea_<ContainerAllocator> >::other >  ignored_dirty_areas;


  typedef boost::shared_ptr< ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StateRepresentationChangesRequest
typedef  ::estirabot_msgs::StateRepresentationChangesRequest_<std::allocator<void> > StateRepresentationChangesRequest;

typedef boost::shared_ptr< ::estirabot_msgs::StateRepresentationChangesRequest> StateRepresentationChangesRequestPtr;
typedef boost::shared_ptr< ::estirabot_msgs::StateRepresentationChangesRequest const> StateRepresentationChangesRequestConstPtr;


template <class ContainerAllocator>
struct StateRepresentationChangesResponse_ {
  typedef StateRepresentationChangesResponse_<ContainerAllocator> Type;

  StateRepresentationChangesResponse_()
  : changed_ellipses(0)
  , differences_string()
  , pre_state_string()
  {
  }

  StateRepresentationChangesResponse_(const ContainerAllocator& _alloc)
  : changed_ellipses(0)
  , differences_string(_alloc)
  , pre_state_string(_alloc)
  {
  }

  typedef int32_t _changed_ellipses_type;
  int32_t changed_ellipses;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _differences_string_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  differences_string;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pre_state_string_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  pre_state_string;


  typedef boost::shared_ptr< ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StateRepresentationChangesResponse
typedef  ::estirabot_msgs::StateRepresentationChangesResponse_<std::allocator<void> > StateRepresentationChangesResponse;

typedef boost::shared_ptr< ::estirabot_msgs::StateRepresentationChangesResponse> StateRepresentationChangesResponsePtr;
typedef boost::shared_ptr< ::estirabot_msgs::StateRepresentationChangesResponse const> StateRepresentationChangesResponseConstPtr;

struct StateRepresentationChanges
{

typedef StateRepresentationChangesRequest Request;
typedef StateRepresentationChangesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StateRepresentationChanges
} // namespace estirabot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "768b4689e191dda14c3dcc9d76deb0aa";
  }

  static const char* value(const  ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x768b4689e191dda1ULL;
  static const uint64_t static_value2 = 0x4c3dcc9d76deb0aaULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/StateRepresentationChangesRequest";
  }

  static const char* value(const  ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Image prev_image\n\
sensor_msgs/Image current_image\n\
estirabot_msgs/DirtyArea[] ignored_dirty_areas\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: estirabot_msgs/DirtyArea\n\
int32 id\n\
estirabot_msgs/Ellipse ellipse\n\
bool sparse\n\
uint8 area\n\
uint8 shape\n\
\n\
================================================================================\n\
MSG: estirabot_msgs/Ellipse\n\
iri_perception_msgs/ImagePoint center\n\
iri_perception_msgs/ImageSize size\n\
float64 angle\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/ImagePoint\n\
uint32 x\n\
uint32 y\n\
================================================================================\n\
MSG: iri_perception_msgs/ImageSize\n\
uint32 width\n\
uint32 height\n\
";
  }

  static const char* value(const  ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae4a035c82db78550eb5a1e9b49e50aa";
  }

  static const char* value(const  ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xae4a035c82db7855ULL;
  static const uint64_t static_value2 = 0x0eb5a1e9b49e50aaULL;
};

template<class ContainerAllocator>
struct DataType< ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/StateRepresentationChangesResponse";
  }

  static const char* value(const  ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
int32 changed_ellipses\n\
string differences_string\n\
string pre_state_string\n\
\n\
";
  }

  static const char* value(const  ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.prev_image);
    stream.next(m.current_image);
    stream.next(m.ignored_dirty_areas);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StateRepresentationChangesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.changed_ellipses);
    stream.next(m.differences_string);
    stream.next(m.pre_state_string);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StateRepresentationChangesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<estirabot_msgs::StateRepresentationChanges> {
  static const char* value() 
  {
    return "b297ec3f6ef61c64fcfbb64052d30c6d";
  }

  static const char* value(const estirabot_msgs::StateRepresentationChanges&) { return value(); } 
};

template<>
struct DataType<estirabot_msgs::StateRepresentationChanges> {
  static const char* value() 
  {
    return "estirabot_msgs/StateRepresentationChanges";
  }

  static const char* value(const estirabot_msgs::StateRepresentationChanges&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b297ec3f6ef61c64fcfbb64052d30c6d";
  }

  static const char* value(const estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/StateRepresentationChanges";
  }

  static const char* value(const estirabot_msgs::StateRepresentationChangesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b297ec3f6ef61c64fcfbb64052d30c6d";
  }

  static const char* value(const estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estirabot_msgs/StateRepresentationChanges";
  }

  static const char* value(const estirabot_msgs::StateRepresentationChangesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ESTIRABOT_MSGS_SERVICE_STATEREPRESENTATIONCHANGES_H

