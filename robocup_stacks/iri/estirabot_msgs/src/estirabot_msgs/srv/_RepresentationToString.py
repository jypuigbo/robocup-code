"""autogenerated by genpy from estirabot_msgs/RepresentationToStringRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import estirabot_msgs.msg
import iri_perception_msgs.msg

class RepresentationToStringRequest(genpy.Message):
  _md5sum = "2d8b4c9001b9bfee1329ea66851228ae"
  _type = "estirabot_msgs/RepresentationToStringRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """estirabot_msgs/DirtyArea[] dirty_areas
estirabot_msgs/PointsDistanceMsg[] distances
estirabot_msgs/TraversedEllipses[] traversed_ellipses

================================================================================
MSG: estirabot_msgs/DirtyArea
int32 id
estirabot_msgs/Ellipse ellipse
bool sparse
uint8 area
uint8 shape

================================================================================
MSG: estirabot_msgs/Ellipse
iri_perception_msgs/ImagePoint center
iri_perception_msgs/ImageSize size
float64 angle

================================================================================
MSG: iri_perception_msgs/ImagePoint
uint32 x
uint32 y
================================================================================
MSG: iri_perception_msgs/ImageSize
uint32 width
uint32 height
================================================================================
MSG: estirabot_msgs/PointsDistanceMsg
uint32 origIdx
uint32 dstIdx
float64 distance

================================================================================
MSG: estirabot_msgs/TraversedEllipses
int32 idx1
int32 idx2
int32[] traversedIdxs

"""
  __slots__ = ['dirty_areas','distances','traversed_ellipses']
  _slot_types = ['estirabot_msgs/DirtyArea[]','estirabot_msgs/PointsDistanceMsg[]','estirabot_msgs/TraversedEllipses[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dirty_areas,distances,traversed_ellipses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RepresentationToStringRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.dirty_areas is None:
        self.dirty_areas = []
      if self.distances is None:
        self.distances = []
      if self.traversed_ellipses is None:
        self.traversed_ellipses = []
    else:
      self.dirty_areas = []
      self.distances = []
      self.traversed_ellipses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.dirty_areas)
      buff.write(_struct_I.pack(length))
      for val1 in self.dirty_areas:
        buff.write(_struct_i.pack(val1.id))
        _v1 = val1.ellipse
        _v2 = _v1.center
        _x = _v2
        buff.write(_struct_2I.pack(_x.x, _x.y))
        _v3 = _v1.size
        _x = _v3
        buff.write(_struct_2I.pack(_x.width, _x.height))
        buff.write(_struct_d.pack(_v1.angle))
        _x = val1
        buff.write(_struct_3B.pack(_x.sparse, _x.area, _x.shape))
      length = len(self.distances)
      buff.write(_struct_I.pack(length))
      for val1 in self.distances:
        _x = val1
        buff.write(_struct_2Id.pack(_x.origIdx, _x.dstIdx, _x.distance))
      length = len(self.traversed_ellipses)
      buff.write(_struct_I.pack(length))
      for val1 in self.traversed_ellipses:
        _x = val1
        buff.write(_struct_2i.pack(_x.idx1, _x.idx2))
        length = len(val1.traversedIdxs)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.traversedIdxs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.dirty_areas is None:
        self.dirty_areas = None
      if self.distances is None:
        self.distances = None
      if self.traversed_ellipses is None:
        self.traversed_ellipses = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dirty_areas = []
      for i in range(0, length):
        val1 = estirabot_msgs.msg.DirtyArea()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        _v4 = val1.ellipse
        _v5 = _v4.center
        _x = _v5
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2I.unpack(str[start:end])
        _v6 = _v4.size
        _x = _v6
        start = end
        end += 8
        (_x.width, _x.height,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 8
        (_v4.angle,) = _struct_d.unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.sparse, _x.area, _x.shape,) = _struct_3B.unpack(str[start:end])
        val1.sparse = bool(val1.sparse)
        self.dirty_areas.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.distances = []
      for i in range(0, length):
        val1 = estirabot_msgs.msg.PointsDistanceMsg()
        _x = val1
        start = end
        end += 16
        (_x.origIdx, _x.dstIdx, _x.distance,) = _struct_2Id.unpack(str[start:end])
        self.distances.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traversed_ellipses = []
      for i in range(0, length):
        val1 = estirabot_msgs.msg.TraversedEllipses()
        _x = val1
        start = end
        end += 8
        (_x.idx1, _x.idx2,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.traversedIdxs = struct.unpack(pattern, str[start:end])
        self.traversed_ellipses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.dirty_areas)
      buff.write(_struct_I.pack(length))
      for val1 in self.dirty_areas:
        buff.write(_struct_i.pack(val1.id))
        _v7 = val1.ellipse
        _v8 = _v7.center
        _x = _v8
        buff.write(_struct_2I.pack(_x.x, _x.y))
        _v9 = _v7.size
        _x = _v9
        buff.write(_struct_2I.pack(_x.width, _x.height))
        buff.write(_struct_d.pack(_v7.angle))
        _x = val1
        buff.write(_struct_3B.pack(_x.sparse, _x.area, _x.shape))
      length = len(self.distances)
      buff.write(_struct_I.pack(length))
      for val1 in self.distances:
        _x = val1
        buff.write(_struct_2Id.pack(_x.origIdx, _x.dstIdx, _x.distance))
      length = len(self.traversed_ellipses)
      buff.write(_struct_I.pack(length))
      for val1 in self.traversed_ellipses:
        _x = val1
        buff.write(_struct_2i.pack(_x.idx1, _x.idx2))
        length = len(val1.traversedIdxs)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.traversedIdxs.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.dirty_areas is None:
        self.dirty_areas = None
      if self.distances is None:
        self.distances = None
      if self.traversed_ellipses is None:
        self.traversed_ellipses = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dirty_areas = []
      for i in range(0, length):
        val1 = estirabot_msgs.msg.DirtyArea()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        _v10 = val1.ellipse
        _v11 = _v10.center
        _x = _v11
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2I.unpack(str[start:end])
        _v12 = _v10.size
        _x = _v12
        start = end
        end += 8
        (_x.width, _x.height,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 8
        (_v10.angle,) = _struct_d.unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.sparse, _x.area, _x.shape,) = _struct_3B.unpack(str[start:end])
        val1.sparse = bool(val1.sparse)
        self.dirty_areas.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.distances = []
      for i in range(0, length):
        val1 = estirabot_msgs.msg.PointsDistanceMsg()
        _x = val1
        start = end
        end += 16
        (_x.origIdx, _x.dstIdx, _x.distance,) = _struct_2Id.unpack(str[start:end])
        self.distances.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traversed_ellipses = []
      for i in range(0, length):
        val1 = estirabot_msgs.msg.TraversedEllipses()
        _x = val1
        start = end
        end += 8
        (_x.idx1, _x.idx2,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.traversedIdxs = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        self.traversed_ellipses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_i = struct.Struct("<i")
_struct_2I = struct.Struct("<2I")
_struct_3B = struct.Struct("<3B")
_struct_2Id = struct.Struct("<2Id")
_struct_2i = struct.Struct("<2i")
"""autogenerated by genpy from estirabot_msgs/RepresentationToStringResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RepresentationToStringResponse(genpy.Message):
  _md5sum = "5927826b25b95e12353eee87a92ed4ac"
  _type = "estirabot_msgs/RepresentationToStringResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string state_string

"""
  __slots__ = ['state_string']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state_string

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RepresentationToStringResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state_string is None:
        self.state_string = ''
    else:
      self.state_string = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_string = str[start:end].decode('utf-8')
      else:
        self.state_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_string = str[start:end].decode('utf-8')
      else:
        self.state_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class RepresentationToString(object):
  _type          = 'estirabot_msgs/RepresentationToString'
  _md5sum = 'a1b22891042192e0316f71d2c67c0d87'
  _request_class  = RepresentationToStringRequest
  _response_class = RepresentationToStringResponse
