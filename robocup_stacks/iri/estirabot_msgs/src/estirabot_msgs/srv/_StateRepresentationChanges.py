"""autogenerated by genpy from estirabot_msgs/StateRepresentationChangesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import estirabot_msgs.msg
import std_msgs.msg
import iri_perception_msgs.msg
import sensor_msgs.msg

class StateRepresentationChangesRequest(genpy.Message):
  _md5sum = "768b4689e191dda14c3dcc9d76deb0aa"
  _type = "estirabot_msgs/StateRepresentationChangesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sensor_msgs/Image prev_image
sensor_msgs/Image current_image
estirabot_msgs/DirtyArea[] ignored_dirty_areas

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: estirabot_msgs/DirtyArea
int32 id
estirabot_msgs/Ellipse ellipse
bool sparse
uint8 area
uint8 shape

================================================================================
MSG: estirabot_msgs/Ellipse
iri_perception_msgs/ImagePoint center
iri_perception_msgs/ImageSize size
float64 angle

================================================================================
MSG: iri_perception_msgs/ImagePoint
uint32 x
uint32 y
================================================================================
MSG: iri_perception_msgs/ImageSize
uint32 width
uint32 height
"""
  __slots__ = ['prev_image','current_image','ignored_dirty_areas']
  _slot_types = ['sensor_msgs/Image','sensor_msgs/Image','estirabot_msgs/DirtyArea[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prev_image,current_image,ignored_dirty_areas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateRepresentationChangesRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prev_image is None:
        self.prev_image = sensor_msgs.msg.Image()
      if self.current_image is None:
        self.current_image = sensor_msgs.msg.Image()
      if self.ignored_dirty_areas is None:
        self.ignored_dirty_areas = []
    else:
      self.prev_image = sensor_msgs.msg.Image()
      self.current_image = sensor_msgs.msg.Image()
      self.ignored_dirty_areas = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.prev_image.header.seq, _x.prev_image.header.stamp.secs, _x.prev_image.header.stamp.nsecs))
      _x = self.prev_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.prev_image.height, _x.prev_image.width))
      _x = self.prev_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.prev_image.is_bigendian, _x.prev_image.step))
      _x = self.prev_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.current_image.header.seq, _x.current_image.header.stamp.secs, _x.current_image.header.stamp.nsecs))
      _x = self.current_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.current_image.height, _x.current_image.width))
      _x = self.current_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.current_image.is_bigendian, _x.current_image.step))
      _x = self.current_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ignored_dirty_areas)
      buff.write(_struct_I.pack(length))
      for val1 in self.ignored_dirty_areas:
        buff.write(_struct_i.pack(val1.id))
        _v1 = val1.ellipse
        _v2 = _v1.center
        _x = _v2
        buff.write(_struct_2I.pack(_x.x, _x.y))
        _v3 = _v1.size
        _x = _v3
        buff.write(_struct_2I.pack(_x.width, _x.height))
        buff.write(_struct_d.pack(_v1.angle))
        _x = val1
        buff.write(_struct_3B.pack(_x.sparse, _x.area, _x.shape))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.prev_image is None:
        self.prev_image = sensor_msgs.msg.Image()
      if self.current_image is None:
        self.current_image = sensor_msgs.msg.Image()
      if self.ignored_dirty_areas is None:
        self.ignored_dirty_areas = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.prev_image.header.seq, _x.prev_image.header.stamp.secs, _x.prev_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prev_image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.prev_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.prev_image.height, _x.prev_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prev_image.encoding = str[start:end].decode('utf-8')
      else:
        self.prev_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.prev_image.is_bigendian, _x.prev_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prev_image.data = str[start:end].decode('utf-8')
      else:
        self.prev_image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.current_image.header.seq, _x.current_image.header.stamp.secs, _x.current_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.current_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.current_image.height, _x.current_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image.encoding = str[start:end].decode('utf-8')
      else:
        self.current_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.current_image.is_bigendian, _x.current_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image.data = str[start:end].decode('utf-8')
      else:
        self.current_image.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ignored_dirty_areas = []
      for i in range(0, length):
        val1 = estirabot_msgs.msg.DirtyArea()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        _v4 = val1.ellipse
        _v5 = _v4.center
        _x = _v5
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2I.unpack(str[start:end])
        _v6 = _v4.size
        _x = _v6
        start = end
        end += 8
        (_x.width, _x.height,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 8
        (_v4.angle,) = _struct_d.unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.sparse, _x.area, _x.shape,) = _struct_3B.unpack(str[start:end])
        val1.sparse = bool(val1.sparse)
        self.ignored_dirty_areas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.prev_image.header.seq, _x.prev_image.header.stamp.secs, _x.prev_image.header.stamp.nsecs))
      _x = self.prev_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.prev_image.height, _x.prev_image.width))
      _x = self.prev_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.prev_image.is_bigendian, _x.prev_image.step))
      _x = self.prev_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.current_image.header.seq, _x.current_image.header.stamp.secs, _x.current_image.header.stamp.nsecs))
      _x = self.current_image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.current_image.height, _x.current_image.width))
      _x = self.current_image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.current_image.is_bigendian, _x.current_image.step))
      _x = self.current_image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ignored_dirty_areas)
      buff.write(_struct_I.pack(length))
      for val1 in self.ignored_dirty_areas:
        buff.write(_struct_i.pack(val1.id))
        _v7 = val1.ellipse
        _v8 = _v7.center
        _x = _v8
        buff.write(_struct_2I.pack(_x.x, _x.y))
        _v9 = _v7.size
        _x = _v9
        buff.write(_struct_2I.pack(_x.width, _x.height))
        buff.write(_struct_d.pack(_v7.angle))
        _x = val1
        buff.write(_struct_3B.pack(_x.sparse, _x.area, _x.shape))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.prev_image is None:
        self.prev_image = sensor_msgs.msg.Image()
      if self.current_image is None:
        self.current_image = sensor_msgs.msg.Image()
      if self.ignored_dirty_areas is None:
        self.ignored_dirty_areas = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.prev_image.header.seq, _x.prev_image.header.stamp.secs, _x.prev_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prev_image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.prev_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.prev_image.height, _x.prev_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prev_image.encoding = str[start:end].decode('utf-8')
      else:
        self.prev_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.prev_image.is_bigendian, _x.prev_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prev_image.data = str[start:end].decode('utf-8')
      else:
        self.prev_image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.current_image.header.seq, _x.current_image.header.stamp.secs, _x.current_image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.current_image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.current_image.height, _x.current_image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image.encoding = str[start:end].decode('utf-8')
      else:
        self.current_image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.current_image.is_bigendian, _x.current_image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image.data = str[start:end].decode('utf-8')
      else:
        self.current_image.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ignored_dirty_areas = []
      for i in range(0, length):
        val1 = estirabot_msgs.msg.DirtyArea()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        _v10 = val1.ellipse
        _v11 = _v10.center
        _x = _v11
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2I.unpack(str[start:end])
        _v12 = _v10.size
        _x = _v12
        start = end
        end += 8
        (_x.width, _x.height,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 8
        (_v10.angle,) = _struct_d.unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.sparse, _x.area, _x.shape,) = _struct_3B.unpack(str[start:end])
        val1.sparse = bool(val1.sparse)
        self.ignored_dirty_areas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_i = struct.Struct("<i")
_struct_BI = struct.Struct("<BI")
_struct_3I = struct.Struct("<3I")
_struct_3B = struct.Struct("<3B")
_struct_2I = struct.Struct("<2I")
"""autogenerated by genpy from estirabot_msgs/StateRepresentationChangesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StateRepresentationChangesResponse(genpy.Message):
  _md5sum = "ae4a035c82db78550eb5a1e9b49e50aa"
  _type = "estirabot_msgs/StateRepresentationChangesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 changed_ellipses
string differences_string
string pre_state_string

"""
  __slots__ = ['changed_ellipses','differences_string','pre_state_string']
  _slot_types = ['int32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       changed_ellipses,differences_string,pre_state_string

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateRepresentationChangesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.changed_ellipses is None:
        self.changed_ellipses = 0
      if self.differences_string is None:
        self.differences_string = ''
      if self.pre_state_string is None:
        self.pre_state_string = ''
    else:
      self.changed_ellipses = 0
      self.differences_string = ''
      self.pre_state_string = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.changed_ellipses))
      _x = self.differences_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre_state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.changed_ellipses,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.differences_string = str[start:end].decode('utf-8')
      else:
        self.differences_string = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre_state_string = str[start:end].decode('utf-8')
      else:
        self.pre_state_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.changed_ellipses))
      _x = self.differences_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pre_state_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.changed_ellipses,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.differences_string = str[start:end].decode('utf-8')
      else:
        self.differences_string = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pre_state_string = str[start:end].decode('utf-8')
      else:
        self.pre_state_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class StateRepresentationChanges(object):
  _type          = 'estirabot_msgs/StateRepresentationChanges'
  _md5sum = 'b297ec3f6ef61c64fcfbb64052d30c6d'
  _request_class  = StateRepresentationChangesRequest
  _response_class = StateRepresentationChangesResponse
