"""autogenerated by genpy from estirabot_msgs/obs2actionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class obs2actionRequest(genpy.Message):
  _md5sum = "e60a6c74b7eccb51bd47208b25474bd3"
  _type = "estirabot_msgs/obs2actionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool first
uint32 observation

"""
  __slots__ = ['first','observation']
  _slot_types = ['bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       first,observation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obs2actionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.first is None:
        self.first = False
      if self.observation is None:
        self.observation = 0
    else:
      self.first = False
      self.observation = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.first, _x.observation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.first, _x.observation,) = _struct_BI.unpack(str[start:end])
      self.first = bool(self.first)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.first, _x.observation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.first, _x.observation,) = _struct_BI.unpack(str[start:end])
      self.first = bool(self.first)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI = struct.Struct("<BI")
"""autogenerated by genpy from estirabot_msgs/obs2actionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class obs2actionResponse(genpy.Message):
  _md5sum = "bfee53a84ea26865ff03480d25e39664"
  _type = "estirabot_msgs/obs2actionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool goal_reached
uint32 action


"""
  __slots__ = ['goal_reached','action']
  _slot_types = ['bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goal_reached,action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obs2actionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.goal_reached is None:
        self.goal_reached = False
      if self.action is None:
        self.action = 0
    else:
      self.goal_reached = False
      self.action = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.goal_reached, _x.action))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.goal_reached, _x.action,) = _struct_BI.unpack(str[start:end])
      self.goal_reached = bool(self.goal_reached)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI.pack(_x.goal_reached, _x.action))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.goal_reached, _x.action,) = _struct_BI.unpack(str[start:end])
      self.goal_reached = bool(self.goal_reached)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI = struct.Struct("<BI")
class obs2action(object):
  _type          = 'estirabot_msgs/obs2action'
  _md5sum = '370c545e7c55b03ea2f710e8d5f68de6'
  _request_class  = obs2actionRequest
  _response_class = obs2actionResponse
