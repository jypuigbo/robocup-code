/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_moped_handler/srv/enable.srv */
#ifndef IRI_MOPED_HANDLER_SERVICE_ENABLE_H
#define IRI_MOPED_HANDLER_SERVICE_ENABLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace iri_moped_handler
{
template <class ContainerAllocator>
struct enableRequest_ {
  typedef enableRequest_<ContainerAllocator> Type;

  enableRequest_()
  : enable(false)
  {
  }

  enableRequest_(const ContainerAllocator& _alloc)
  : enable(false)
  {
  }

  typedef uint8_t _enable_type;
  uint8_t enable;


  typedef boost::shared_ptr< ::iri_moped_handler::enableRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_moped_handler::enableRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct enableRequest
typedef  ::iri_moped_handler::enableRequest_<std::allocator<void> > enableRequest;

typedef boost::shared_ptr< ::iri_moped_handler::enableRequest> enableRequestPtr;
typedef boost::shared_ptr< ::iri_moped_handler::enableRequest const> enableRequestConstPtr;


template <class ContainerAllocator>
struct enableResponse_ {
  typedef enableResponse_<ContainerAllocator> Type;

  enableResponse_()
  : correct(false)
  {
  }

  enableResponse_(const ContainerAllocator& _alloc)
  : correct(false)
  {
  }

  typedef uint8_t _correct_type;
  uint8_t correct;


  typedef boost::shared_ptr< ::iri_moped_handler::enableResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_moped_handler::enableResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct enableResponse
typedef  ::iri_moped_handler::enableResponse_<std::allocator<void> > enableResponse;

typedef boost::shared_ptr< ::iri_moped_handler::enableResponse> enableResponsePtr;
typedef boost::shared_ptr< ::iri_moped_handler::enableResponse const> enableResponseConstPtr;

struct enable
{

typedef enableRequest Request;
typedef enableResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct enable
} // namespace iri_moped_handler

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_moped_handler::enableRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_moped_handler::enableRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_moped_handler::enableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8c1211af706069c994c06e00eb59ac9e";
  }

  static const char* value(const  ::iri_moped_handler::enableRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8c1211af706069c9ULL;
  static const uint64_t static_value2 = 0x94c06e00eb59ac9eULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_moped_handler::enableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_moped_handler/enableRequest";
  }

  static const char* value(const  ::iri_moped_handler::enableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_moped_handler::enableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool enable\n\
\n\
";
  }

  static const char* value(const  ::iri_moped_handler::enableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_moped_handler::enableRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_moped_handler::enableResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_moped_handler::enableResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_moped_handler::enableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0d7b90c75811aaad705aac4e2b606238";
  }

  static const char* value(const  ::iri_moped_handler::enableResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0d7b90c75811aaadULL;
  static const uint64_t static_value2 = 0x705aac4e2b606238ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_moped_handler::enableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_moped_handler/enableResponse";
  }

  static const char* value(const  ::iri_moped_handler::enableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_moped_handler::enableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool correct\n\
\n\
\n\
";
  }

  static const char* value(const  ::iri_moped_handler::enableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_moped_handler::enableResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_moped_handler::enableRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.enable);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct enableRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_moped_handler::enableResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.correct);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct enableResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<iri_moped_handler::enable> {
  static const char* value() 
  {
    return "99eaaa12ab016a770e9c949413327e2b";
  }

  static const char* value(const iri_moped_handler::enable&) { return value(); } 
};

template<>
struct DataType<iri_moped_handler::enable> {
  static const char* value() 
  {
    return "iri_moped_handler/enable";
  }

  static const char* value(const iri_moped_handler::enable&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_moped_handler::enableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "99eaaa12ab016a770e9c949413327e2b";
  }

  static const char* value(const iri_moped_handler::enableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_moped_handler::enableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_moped_handler/enable";
  }

  static const char* value(const iri_moped_handler::enableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_moped_handler::enableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "99eaaa12ab016a770e9c949413327e2b";
  }

  static const char* value(const iri_moped_handler::enableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_moped_handler::enableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_moped_handler/enable";
  }

  static const char* value(const iri_moped_handler::enableResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IRI_MOPED_HANDLER_SERVICE_ENABLE_H

