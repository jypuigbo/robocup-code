/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_moped_actionserver/msg/mopedActionGoal.msg */
#ifndef IRI_MOPED_ACTIONSERVER_MESSAGE_MOPEDACTIONGOAL_H
#define IRI_MOPED_ACTIONSERVER_MESSAGE_MOPEDACTIONGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "actionlib_msgs/GoalID.h"
#include "iri_moped_actionserver/mopedGoal.h"

namespace iri_moped_actionserver
{
template <class ContainerAllocator>
struct mopedActionGoal_ {
  typedef mopedActionGoal_<ContainerAllocator> Type;

  mopedActionGoal_()
  : header()
  , goal_id()
  , goal()
  {
  }

  mopedActionGoal_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , goal_id(_alloc)
  , goal(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
   ::actionlib_msgs::GoalID_<ContainerAllocator>  goal_id;

  typedef  ::iri_moped_actionserver::mopedGoal_<ContainerAllocator>  _goal_type;
   ::iri_moped_actionserver::mopedGoal_<ContainerAllocator>  goal;


  typedef boost::shared_ptr< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mopedActionGoal
typedef  ::iri_moped_actionserver::mopedActionGoal_<std::allocator<void> > mopedActionGoal;

typedef boost::shared_ptr< ::iri_moped_actionserver::mopedActionGoal> mopedActionGoalPtr;
typedef boost::shared_ptr< ::iri_moped_actionserver::mopedActionGoal const> mopedActionGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_moped_actionserver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "750d79916efdd14fa6039a1690fe033b";
  }

  static const char* value(const  ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x750d79916efdd14fULL;
  static const uint64_t static_value2 = 0xa6039a1690fe033bULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_moped_actionserver/mopedActionGoal";
  }

  static const char* value(const  ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
mopedGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: iri_moped_actionserver/mopedGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
sensor_msgs/Image image\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
";
  }

  static const char* value(const  ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.goal_id);
    stream.next(m.goal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mopedActionGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_moped_actionserver::mopedActionGoal_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
s << std::endl;
    Printer< ::iri_moped_actionserver::mopedGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_MOPED_ACTIONSERVER_MESSAGE_MOPEDACTIONGOAL_H

