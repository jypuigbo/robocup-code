/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_bow_object_detector/msg/WrinkledMap.msg */
#ifndef IRI_BOW_OBJECT_DETECTOR_MESSAGE_WRINKLEDMAP_H
#define IRI_BOW_OBJECT_DETECTOR_MESSAGE_WRINKLEDMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace iri_bow_object_detector
{
template <class ContainerAllocator>
struct WrinkledMap_ {
  typedef WrinkledMap_<ContainerAllocator> Type;

  WrinkledMap_()
  : h()
  , x()
  , y()
  , z()
  {
  }

  WrinkledMap_(const ContainerAllocator& _alloc)
  : h(_alloc)
  , x(_alloc)
  , y(_alloc)
  , z(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _h_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  h;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  x;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  y;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _z_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  z;


  typedef boost::shared_ptr< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WrinkledMap
typedef  ::iri_bow_object_detector::WrinkledMap_<std::allocator<void> > WrinkledMap;

typedef boost::shared_ptr< ::iri_bow_object_detector::WrinkledMap> WrinkledMapPtr;
typedef boost::shared_ptr< ::iri_bow_object_detector::WrinkledMap const> WrinkledMapConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_bow_object_detector

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "731afabcd74c0c172f1477d740d8aa06";
  }

  static const char* value(const  ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x731afabcd74c0c17ULL;
  static const uint64_t static_value2 = 0x2f1477d740d8aa06ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_bow_object_detector/WrinkledMap";
  }

  static const char* value(const  ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] h\n\
float32[] x\n\
float32[] y\n\
float32[] z\n\
";
  }

  static const char* value(const  ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.h);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WrinkledMap_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_bow_object_detector::WrinkledMap_<ContainerAllocator> & v) 
  {
    s << indent << "h[]" << std::endl;
    for (size_t i = 0; i < v.h.size(); ++i)
    {
      s << indent << "  h[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.h[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_BOW_OBJECT_DETECTOR_MESSAGE_WRINKLEDMAP_H

