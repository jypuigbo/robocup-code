"""autogenerated by genpy from iri_bow_object_detector/RefineGraspPointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import iri_bow_object_detector.msg
import geometry_msgs.msg
import std_msgs.msg
import iri_perception_msgs.msg
import sensor_msgs.msg

class RefineGraspPointRequest(genpy.Message):
  _md5sum = "0526af87c7b6cc76c0da62278b22490c"
  _type = "iri_bow_object_detector/RefineGraspPointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

iri_bow_object_detector/ObjectBox[] posible_solutions
sensor_msgs/Image image
iri_perception_msgs/DescriptorSet descriptor_set

================================================================================
MSG: iri_bow_object_detector/ObjectBox
iri_perception_msgs/ImagePoint point1
iri_perception_msgs/ImagePoint point2
float32 value
================================================================================
MSG: iri_perception_msgs/ImagePoint
uint32 x
uint32 y
================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: iri_perception_msgs/DescriptorSet
Header header
int32 num_orient_bins
int32 num_spa_bins
int32 num
int32 len
int32 width
int32 height
iri_perception_msgs/Descriptor[] descriptors

================================================================================
MSG: iri_perception_msgs/Descriptor
float32[] descriptor
geometry_msgs/Vector3 point3d
int32 u
int32 v
float32 orientation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['posible_solutions','image','descriptor_set']
  _slot_types = ['iri_bow_object_detector/ObjectBox[]','sensor_msgs/Image','iri_perception_msgs/DescriptorSet']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       posible_solutions,image,descriptor_set

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RefineGraspPointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.posible_solutions is None:
        self.posible_solutions = []
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.descriptor_set is None:
        self.descriptor_set = iri_perception_msgs.msg.DescriptorSet()
    else:
      self.posible_solutions = []
      self.image = sensor_msgs.msg.Image()
      self.descriptor_set = iri_perception_msgs.msg.DescriptorSet()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.posible_solutions)
      buff.write(_struct_I.pack(length))
      for val1 in self.posible_solutions:
        _v1 = val1.point1
        _x = _v1
        buff.write(_struct_2I.pack(_x.x, _x.y))
        _v2 = val1.point2
        _x = _v2
        buff.write(_struct_2I.pack(_x.x, _x.y))
        buff.write(_struct_f.pack(val1.value))
      _x = self
      buff.write(_struct_3I.pack(_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.descriptor_set.header.seq, _x.descriptor_set.header.stamp.secs, _x.descriptor_set.header.stamp.nsecs))
      _x = self.descriptor_set.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6i.pack(_x.descriptor_set.num_orient_bins, _x.descriptor_set.num_spa_bins, _x.descriptor_set.num, _x.descriptor_set.len, _x.descriptor_set.width, _x.descriptor_set.height))
      length = len(self.descriptor_set.descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.descriptor_set.descriptors:
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.descriptor))
        _v3 = val1.point3d
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2if.pack(_x.u, _x.v, _x.orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.posible_solutions is None:
        self.posible_solutions = None
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.descriptor_set is None:
        self.descriptor_set = iri_perception_msgs.msg.DescriptorSet()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.posible_solutions = []
      for i in range(0, length):
        val1 = iri_bow_object_detector.msg.ObjectBox()
        _v4 = val1.point1
        _x = _v4
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2I.unpack(str[start:end])
        _v5 = val1.point2
        _x = _v5
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (val1.value,) = _struct_f.unpack(str[start:end])
        self.posible_solutions.append(val1)
      _x = self
      start = end
      end += 12
      (_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.data = str[start:end].decode('utf-8')
      else:
        self.image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.descriptor_set.header.seq, _x.descriptor_set.header.stamp.secs, _x.descriptor_set.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.descriptor_set.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.descriptor_set.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.descriptor_set.num_orient_bins, _x.descriptor_set.num_spa_bins, _x.descriptor_set.num, _x.descriptor_set.len, _x.descriptor_set.width, _x.descriptor_set.height,) = _struct_6i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.descriptor_set.descriptors = []
      for i in range(0, length):
        val1 = iri_perception_msgs.msg.Descriptor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = struct.unpack(pattern, str[start:end])
        _v6 = val1.point3d
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.u, _x.v, _x.orientation,) = _struct_2if.unpack(str[start:end])
        self.descriptor_set.descriptors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.posible_solutions)
      buff.write(_struct_I.pack(length))
      for val1 in self.posible_solutions:
        _v7 = val1.point1
        _x = _v7
        buff.write(_struct_2I.pack(_x.x, _x.y))
        _v8 = val1.point2
        _x = _v8
        buff.write(_struct_2I.pack(_x.x, _x.y))
        buff.write(_struct_f.pack(val1.value))
      _x = self
      buff.write(_struct_3I.pack(_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.descriptor_set.header.seq, _x.descriptor_set.header.stamp.secs, _x.descriptor_set.header.stamp.nsecs))
      _x = self.descriptor_set.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6i.pack(_x.descriptor_set.num_orient_bins, _x.descriptor_set.num_spa_bins, _x.descriptor_set.num, _x.descriptor_set.len, _x.descriptor_set.width, _x.descriptor_set.height))
      length = len(self.descriptor_set.descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.descriptor_set.descriptors:
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.descriptor.tostring())
        _v9 = val1.point3d
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2if.pack(_x.u, _x.v, _x.orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.posible_solutions is None:
        self.posible_solutions = None
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      if self.descriptor_set is None:
        self.descriptor_set = iri_perception_msgs.msg.DescriptorSet()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.posible_solutions = []
      for i in range(0, length):
        val1 = iri_bow_object_detector.msg.ObjectBox()
        _v10 = val1.point1
        _x = _v10
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2I.unpack(str[start:end])
        _v11 = val1.point2
        _x = _v11
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (val1.value,) = _struct_f.unpack(str[start:end])
        self.posible_solutions.append(val1)
      _x = self
      start = end
      end += 12
      (_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.data = str[start:end].decode('utf-8')
      else:
        self.image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.descriptor_set.header.seq, _x.descriptor_set.header.stamp.secs, _x.descriptor_set.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.descriptor_set.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.descriptor_set.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.descriptor_set.num_orient_bins, _x.descriptor_set.num_spa_bins, _x.descriptor_set.num, _x.descriptor_set.len, _x.descriptor_set.width, _x.descriptor_set.height,) = _struct_6i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.descriptor_set.descriptors = []
      for i in range(0, length):
        val1 = iri_perception_msgs.msg.Descriptor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v12 = val1.point3d
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.u, _x.v, _x.orientation,) = _struct_2if.unpack(str[start:end])
        self.descriptor_set.descriptors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f = struct.Struct("<f")
_struct_6i = struct.Struct("<6i")
_struct_BI = struct.Struct("<BI")
_struct_3I = struct.Struct("<3I")
_struct_2if = struct.Struct("<2if")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from iri_bow_object_detector/RefineGraspPointResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import iri_perception_msgs.msg

class RefineGraspPointResponse(genpy.Message):
  _md5sum = "a1d3d6d5081395c0c4a6d2daa9a86c56"
  _type = "iri_bow_object_detector/RefineGraspPointResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
iri_perception_msgs/ImagePoint grasp_point


================================================================================
MSG: iri_perception_msgs/ImagePoint
uint32 x
uint32 y
"""
  __slots__ = ['grasp_point']
  _slot_types = ['iri_perception_msgs/ImagePoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grasp_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RefineGraspPointResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.grasp_point is None:
        self.grasp_point = iri_perception_msgs.msg.ImagePoint()
    else:
      self.grasp_point = iri_perception_msgs.msg.ImagePoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.grasp_point.x, _x.grasp_point.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.grasp_point is None:
        self.grasp_point = iri_perception_msgs.msg.ImagePoint()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.grasp_point.x, _x.grasp_point.y,) = _struct_2I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.grasp_point.x, _x.grasp_point.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.grasp_point is None:
        self.grasp_point = iri_perception_msgs.msg.ImagePoint()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.grasp_point.x, _x.grasp_point.y,) = _struct_2I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I = struct.Struct("<2I")
class RefineGraspPoint(object):
  _type          = 'iri_bow_object_detector/RefineGraspPoint'
  _md5sum = '4df81184ea52bef77e8b614f35924fb4'
  _request_class  = RefineGraspPointRequest
  _response_class = RefineGraspPointResponse
