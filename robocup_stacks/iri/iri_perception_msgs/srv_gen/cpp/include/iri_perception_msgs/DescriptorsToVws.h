/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/srv/DescriptorsToVws.srv */
#ifndef IRI_PERCEPTION_MSGS_SERVICE_DESCRIPTORSTOVWS_H
#define IRI_PERCEPTION_MSGS_SERVICE_DESCRIPTORSTOVWS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "iri_perception_msgs/DescriptorSet.h"


#include "iri_perception_msgs/GeoVwSet.h"

namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct DescriptorsToVwsRequest_ {
  typedef DescriptorsToVwsRequest_<ContainerAllocator> Type;

  DescriptorsToVwsRequest_()
  : descriptor_set()
  {
  }

  DescriptorsToVwsRequest_(const ContainerAllocator& _alloc)
  : descriptor_set(_alloc)
  {
  }

  typedef  ::iri_perception_msgs::DescriptorSet_<ContainerAllocator>  _descriptor_set_type;
   ::iri_perception_msgs::DescriptorSet_<ContainerAllocator>  descriptor_set;


  typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DescriptorsToVwsRequest
typedef  ::iri_perception_msgs::DescriptorsToVwsRequest_<std::allocator<void> > DescriptorsToVwsRequest;

typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorsToVwsRequest> DescriptorsToVwsRequestPtr;
typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorsToVwsRequest const> DescriptorsToVwsRequestConstPtr;


template <class ContainerAllocator>
struct DescriptorsToVwsResponse_ {
  typedef DescriptorsToVwsResponse_<ContainerAllocator> Type;

  DescriptorsToVwsResponse_()
  : geo_vw_set()
  {
  }

  DescriptorsToVwsResponse_(const ContainerAllocator& _alloc)
  : geo_vw_set(_alloc)
  {
  }

  typedef  ::iri_perception_msgs::GeoVwSet_<ContainerAllocator>  _geo_vw_set_type;
   ::iri_perception_msgs::GeoVwSet_<ContainerAllocator>  geo_vw_set;


  typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DescriptorsToVwsResponse
typedef  ::iri_perception_msgs::DescriptorsToVwsResponse_<std::allocator<void> > DescriptorsToVwsResponse;

typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorsToVwsResponse> DescriptorsToVwsResponsePtr;
typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorsToVwsResponse const> DescriptorsToVwsResponseConstPtr;

struct DescriptorsToVws
{

typedef DescriptorsToVwsRequest Request;
typedef DescriptorsToVwsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DescriptorsToVws
} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "db5e12e66d3b02ca867728f150b58d69";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdb5e12e66d3b02caULL;
  static const uint64_t static_value2 = 0x867728f150b58d69ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/DescriptorsToVwsRequest";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
iri_perception_msgs/DescriptorSet descriptor_set\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/DescriptorSet\n\
Header header\n\
int32 num_orient_bins\n\
int32 num_spa_bins\n\
int32 num\n\
int32 len\n\
int32 width\n\
int32 height\n\
iri_perception_msgs/Descriptor[] descriptors\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/Descriptor\n\
float32[] descriptor\n\
geometry_msgs/Vector3 point3d\n\
int32 u\n\
int32 v\n\
float32 orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fbaeb4cf1b5d7cd6619b89880488beae";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfbaeb4cf1b5d7cd6ULL;
  static const uint64_t static_value2 = 0x619b89880488beaeULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/DescriptorsToVwsResponse";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
iri_perception_msgs/GeoVwSet geo_vw_set\n\
\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/GeoVwSet\n\
iri_perception_msgs/GeoVw[] geo_vws\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/GeoVw\n\
uint32 x\n\
uint32 y\n\
uint32 word\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.descriptor_set);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DescriptorsToVwsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.geo_vw_set);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DescriptorsToVwsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<iri_perception_msgs::DescriptorsToVws> {
  static const char* value() 
  {
    return "22b3d75b6de6a8033e791170a75fab55";
  }

  static const char* value(const iri_perception_msgs::DescriptorsToVws&) { return value(); } 
};

template<>
struct DataType<iri_perception_msgs::DescriptorsToVws> {
  static const char* value() 
  {
    return "iri_perception_msgs/DescriptorsToVws";
  }

  static const char* value(const iri_perception_msgs::DescriptorsToVws&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22b3d75b6de6a8033e791170a75fab55";
  }

  static const char* value(const iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/DescriptorsToVws";
  }

  static const char* value(const iri_perception_msgs::DescriptorsToVwsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22b3d75b6de6a8033e791170a75fab55";
  }

  static const char* value(const iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/DescriptorsToVws";
  }

  static const char* value(const iri_perception_msgs::DescriptorsToVwsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_SERVICE_DESCRIPTORSTOVWS_H

