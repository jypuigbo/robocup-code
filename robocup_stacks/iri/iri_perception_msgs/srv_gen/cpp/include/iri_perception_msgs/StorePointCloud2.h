/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/srv/StorePointCloud2.srv */
#ifndef IRI_PERCEPTION_MSGS_SERVICE_STOREPOINTCLOUD2_H
#define IRI_PERCEPTION_MSGS_SERVICE_STOREPOINTCLOUD2_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/String.h"
#include "geometry_msgs/PoseStamped.h"
#include "sensor_msgs/PointCloud2.h"



namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct StorePointCloud2Request_ {
  typedef StorePointCloud2Request_<ContainerAllocator> Type;

  StorePointCloud2Request_()
  : file_name()
  , sensor_pose()
  , point_cloud()
  {
  }

  StorePointCloud2Request_(const ContainerAllocator& _alloc)
  : file_name(_alloc)
  , sensor_pose(_alloc)
  , point_cloud(_alloc)
  {
  }

  typedef  ::std_msgs::String_<ContainerAllocator>  _file_name_type;
   ::std_msgs::String_<ContainerAllocator>  file_name;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _sensor_pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  sensor_pose;

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _point_cloud_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  point_cloud;


  typedef boost::shared_ptr< ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StorePointCloud2Request
typedef  ::iri_perception_msgs::StorePointCloud2Request_<std::allocator<void> > StorePointCloud2Request;

typedef boost::shared_ptr< ::iri_perception_msgs::StorePointCloud2Request> StorePointCloud2RequestPtr;
typedef boost::shared_ptr< ::iri_perception_msgs::StorePointCloud2Request const> StorePointCloud2RequestConstPtr;


template <class ContainerAllocator>
struct StorePointCloud2Response_ {
  typedef StorePointCloud2Response_<ContainerAllocator> Type;

  StorePointCloud2Response_()
  {
  }

  StorePointCloud2Response_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StorePointCloud2Response
typedef  ::iri_perception_msgs::StorePointCloud2Response_<std::allocator<void> > StorePointCloud2Response;

typedef boost::shared_ptr< ::iri_perception_msgs::StorePointCloud2Response> StorePointCloud2ResponsePtr;
typedef boost::shared_ptr< ::iri_perception_msgs::StorePointCloud2Response const> StorePointCloud2ResponseConstPtr;

struct StorePointCloud2
{

typedef StorePointCloud2Request Request;
typedef StorePointCloud2Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StorePointCloud2
} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "620f2fb25ff410464561f8872a6e9668";
  }

  static const char* value(const  ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x620f2fb25ff41046ULL;
  static const uint64_t static_value2 = 0x4561f8872a6e9668ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/StorePointCloud2Request";
  }

  static const char* value(const  ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
std_msgs/String           file_name\n\
geometry_msgs/PoseStamped sensor_pose\n\
sensor_msgs/PointCloud2   point_cloud\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/StorePointCloud2Response";
  }

  static const char* value(const  ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.file_name);
    stream.next(m.sensor_pose);
    stream.next(m.point_cloud);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StorePointCloud2Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StorePointCloud2Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<iri_perception_msgs::StorePointCloud2> {
  static const char* value() 
  {
    return "620f2fb25ff410464561f8872a6e9668";
  }

  static const char* value(const iri_perception_msgs::StorePointCloud2&) { return value(); } 
};

template<>
struct DataType<iri_perception_msgs::StorePointCloud2> {
  static const char* value() 
  {
    return "iri_perception_msgs/StorePointCloud2";
  }

  static const char* value(const iri_perception_msgs::StorePointCloud2&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "620f2fb25ff410464561f8872a6e9668";
  }

  static const char* value(const iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/StorePointCloud2";
  }

  static const char* value(const iri_perception_msgs::StorePointCloud2Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "620f2fb25ff410464561f8872a6e9668";
  }

  static const char* value(const iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/StorePointCloud2";
  }

  static const char* value(const iri_perception_msgs::StorePointCloud2Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_SERVICE_STOREPOINTCLOUD2_H

