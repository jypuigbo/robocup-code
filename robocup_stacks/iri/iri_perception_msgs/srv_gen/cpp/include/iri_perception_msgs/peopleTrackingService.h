/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/srv/peopleTrackingService.srv */
#ifndef IRI_PERCEPTION_MSGS_SERVICE_PEOPLETRACKINGSERVICE_H
#define IRI_PERCEPTION_MSGS_SERVICE_PEOPLETRACKINGSERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "iri_perception_msgs/peopleTrackingArray.h"

namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct peopleTrackingServiceRequest_ {
  typedef peopleTrackingServiceRequest_<ContainerAllocator> Type;

  peopleTrackingServiceRequest_()
  {
  }

  peopleTrackingServiceRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct peopleTrackingServiceRequest
typedef  ::iri_perception_msgs::peopleTrackingServiceRequest_<std::allocator<void> > peopleTrackingServiceRequest;

typedef boost::shared_ptr< ::iri_perception_msgs::peopleTrackingServiceRequest> peopleTrackingServiceRequestPtr;
typedef boost::shared_ptr< ::iri_perception_msgs::peopleTrackingServiceRequest const> peopleTrackingServiceRequestConstPtr;


template <class ContainerAllocator>
struct peopleTrackingServiceResponse_ {
  typedef peopleTrackingServiceResponse_<ContainerAllocator> Type;

  peopleTrackingServiceResponse_()
  : peopleSet()
  {
  }

  peopleTrackingServiceResponse_(const ContainerAllocator& _alloc)
  : peopleSet(_alloc)
  {
  }

  typedef  ::iri_perception_msgs::peopleTrackingArray_<ContainerAllocator>  _peopleSet_type;
   ::iri_perception_msgs::peopleTrackingArray_<ContainerAllocator>  peopleSet;


  typedef boost::shared_ptr< ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct peopleTrackingServiceResponse
typedef  ::iri_perception_msgs::peopleTrackingServiceResponse_<std::allocator<void> > peopleTrackingServiceResponse;

typedef boost::shared_ptr< ::iri_perception_msgs::peopleTrackingServiceResponse> peopleTrackingServiceResponsePtr;
typedef boost::shared_ptr< ::iri_perception_msgs::peopleTrackingServiceResponse const> peopleTrackingServiceResponseConstPtr;

struct peopleTrackingService
{

typedef peopleTrackingServiceRequest Request;
typedef peopleTrackingServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct peopleTrackingService
} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/peopleTrackingServiceRequest";
  }

  static const char* value(const  ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe22c69eec47e5d3de106e176d235190";
  }

  static const char* value(const  ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfe22c69eec47e5d3ULL;
  static const uint64_t static_value2 = 0xde106e176d235190ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/peopleTrackingServiceResponse";
  }

  static const char* value(const  ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
peopleTrackingArray peopleSet\n\
\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/peopleTrackingArray\n\
# timestamp, frame id\n\
Header header\n\
\n\
#set of targets being tracked\n\
peopleTracking[] peopleSet\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/peopleTracking\n\
#target id\n\
int32 targetId\n\
\n\
#target status is a bitwise OR of the following values\n\
#      TO_BE_REMOVED = 0x01,\n\
#      OCCLUDDED = 0x02,\n\
#      CANDIDATE = 0x04,\n\
#      LEGGED_TARGET = 0x08,\n\
#      VISUALLY_CONFIRMED = 0x10,\n\
#      FRIEND_IN_SIGHT = 0x20,\n\
#      BACK_LEARNT = 0x40,\n\
#      FACE_LEARNT = 0x80\n\
int32 targetStatus\n\
\n\
#target 2D position\n\
float64 x\n\
float64 y\n\
\n\
#target 2D linear velocity\n\
float64 vx\n\
float64 vy\n\
\n\
#(x,y,vx,vy) covariance matrix\n\
float64[16] covariances\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct peopleTrackingServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.peopleSet);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct peopleTrackingServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<iri_perception_msgs::peopleTrackingService> {
  static const char* value() 
  {
    return "fe22c69eec47e5d3de106e176d235190";
  }

  static const char* value(const iri_perception_msgs::peopleTrackingService&) { return value(); } 
};

template<>
struct DataType<iri_perception_msgs::peopleTrackingService> {
  static const char* value() 
  {
    return "iri_perception_msgs/peopleTrackingService";
  }

  static const char* value(const iri_perception_msgs::peopleTrackingService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe22c69eec47e5d3de106e176d235190";
  }

  static const char* value(const iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/peopleTrackingService";
  }

  static const char* value(const iri_perception_msgs::peopleTrackingServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe22c69eec47e5d3de106e176d235190";
  }

  static const char* value(const iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/peopleTrackingService";
  }

  static const char* value(const iri_perception_msgs::peopleTrackingServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_SERVICE_PEOPLETRACKINGSERVICE_H

