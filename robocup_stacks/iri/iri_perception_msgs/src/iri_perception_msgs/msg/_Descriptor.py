"""autogenerated by genpy from iri_perception_msgs/Descriptor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Descriptor(genpy.Message):
  _md5sum = "6d50cb80b89d1ec47a9b4fa09aadf05a"
  _type = "iri_perception_msgs/Descriptor"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] descriptor
geometry_msgs/Vector3 point3d
int32 u
int32 v
float32 orientation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['descriptor','point3d','u','v','orientation']
  _slot_types = ['float32[]','geometry_msgs/Vector3','int32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       descriptor,point3d,u,v,orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Descriptor, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.descriptor is None:
        self.descriptor = []
      if self.point3d is None:
        self.point3d = geometry_msgs.msg.Vector3()
      if self.u is None:
        self.u = 0
      if self.v is None:
        self.v = 0
      if self.orientation is None:
        self.orientation = 0.
    else:
      self.descriptor = []
      self.point3d = geometry_msgs.msg.Vector3()
      self.u = 0
      self.v = 0
      self.orientation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.descriptor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.descriptor))
      _x = self
      buff.write(_struct_3d2if.pack(_x.point3d.x, _x.point3d.y, _x.point3d.z, _x.u, _x.v, _x.orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point3d is None:
        self.point3d = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.descriptor = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 36
      (_x.point3d.x, _x.point3d.y, _x.point3d.z, _x.u, _x.v, _x.orientation,) = _struct_3d2if.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.descriptor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.descriptor.tostring())
      _x = self
      buff.write(_struct_3d2if.pack(_x.point3d.x, _x.point3d.y, _x.point3d.z, _x.u, _x.v, _x.orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point3d is None:
        self.point3d = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 36
      (_x.point3d.x, _x.point3d.y, _x.point3d.z, _x.u, _x.v, _x.orientation,) = _struct_3d2if.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d2if = struct.Struct("<3d2if")
