/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/msg/Descriptor.msg */
#ifndef IRI_PERCEPTION_MSGS_MESSAGE_DESCRIPTOR_H
#define IRI_PERCEPTION_MSGS_MESSAGE_DESCRIPTOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"

namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct Descriptor_ {
  typedef Descriptor_<ContainerAllocator> Type;

  Descriptor_()
  : descriptor()
  , point3d()
  , u(0)
  , v(0)
  , orientation(0.0)
  {
  }

  Descriptor_(const ContainerAllocator& _alloc)
  : descriptor(_alloc)
  , point3d(_alloc)
  , u(0)
  , v(0)
  , orientation(0.0)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descriptor_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  descriptor;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _point3d_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  point3d;

  typedef int32_t _u_type;
  int32_t u;

  typedef int32_t _v_type;
  int32_t v;

  typedef float _orientation_type;
  float orientation;


  typedef boost::shared_ptr< ::iri_perception_msgs::Descriptor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::Descriptor_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Descriptor
typedef  ::iri_perception_msgs::Descriptor_<std::allocator<void> > Descriptor;

typedef boost::shared_ptr< ::iri_perception_msgs::Descriptor> DescriptorPtr;
typedef boost::shared_ptr< ::iri_perception_msgs::Descriptor const> DescriptorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_perception_msgs::Descriptor_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_perception_msgs::Descriptor_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::Descriptor_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::Descriptor_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::Descriptor_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6d50cb80b89d1ec47a9b4fa09aadf05a";
  }

  static const char* value(const  ::iri_perception_msgs::Descriptor_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6d50cb80b89d1ec4ULL;
  static const uint64_t static_value2 = 0x7a9b4fa09aadf05aULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::Descriptor_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/Descriptor";
  }

  static const char* value(const  ::iri_perception_msgs::Descriptor_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::Descriptor_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] descriptor\n\
geometry_msgs/Vector3 point3d\n\
int32 u\n\
int32 v\n\
float32 orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::Descriptor_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::Descriptor_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.descriptor);
    stream.next(m.point3d);
    stream.next(m.u);
    stream.next(m.v);
    stream.next(m.orientation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Descriptor_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_perception_msgs::Descriptor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_perception_msgs::Descriptor_<ContainerAllocator> & v) 
  {
    s << indent << "descriptor[]" << std::endl;
    for (size_t i = 0; i < v.descriptor.size(); ++i)
    {
      s << indent << "  descriptor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descriptor[i]);
    }
    s << indent << "point3d: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.point3d);
    s << indent << "u: ";
    Printer<int32_t>::stream(s, indent + "  ", v.u);
    s << indent << "v: ";
    Printer<int32_t>::stream(s, indent + "  ", v.v);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_MESSAGE_DESCRIPTOR_H

