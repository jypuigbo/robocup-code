/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/msg/DescriptorSet.msg */
#ifndef IRI_PERCEPTION_MSGS_MESSAGE_DESCRIPTORSET_H
#define IRI_PERCEPTION_MSGS_MESSAGE_DESCRIPTORSET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "iri_perception_msgs/Descriptor.h"

namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct DescriptorSet_ {
  typedef DescriptorSet_<ContainerAllocator> Type;

  DescriptorSet_()
  : header()
  , num_orient_bins(0)
  , num_spa_bins(0)
  , num(0)
  , len(0)
  , width(0)
  , height(0)
  , descriptors()
  {
  }

  DescriptorSet_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , num_orient_bins(0)
  , num_spa_bins(0)
  , num(0)
  , len(0)
  , width(0)
  , height(0)
  , descriptors(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _num_orient_bins_type;
  int32_t num_orient_bins;

  typedef int32_t _num_spa_bins_type;
  int32_t num_spa_bins;

  typedef int32_t _num_type;
  int32_t num;

  typedef int32_t _len_type;
  int32_t len;

  typedef int32_t _width_type;
  int32_t width;

  typedef int32_t _height_type;
  int32_t height;

  typedef std::vector< ::iri_perception_msgs::Descriptor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iri_perception_msgs::Descriptor_<ContainerAllocator> >::other >  _descriptors_type;
  std::vector< ::iri_perception_msgs::Descriptor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iri_perception_msgs::Descriptor_<ContainerAllocator> >::other >  descriptors;


  typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DescriptorSet
typedef  ::iri_perception_msgs::DescriptorSet_<std::allocator<void> > DescriptorSet;

typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorSet> DescriptorSetPtr;
typedef boost::shared_ptr< ::iri_perception_msgs::DescriptorSet const> DescriptorSetConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f594e954dd6a77d9bb6c9198cfee269";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3f594e954dd6a77dULL;
  static const uint64_t static_value2 = 0x9bb6c9198cfee269ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/DescriptorSet";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32 num_orient_bins\n\
int32 num_spa_bins\n\
int32 num\n\
int32 len\n\
int32 width\n\
int32 height\n\
iri_perception_msgs/Descriptor[] descriptors\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/Descriptor\n\
float32[] descriptor\n\
geometry_msgs/Vector3 point3d\n\
int32 u\n\
int32 v\n\
float32 orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.num_orient_bins);
    stream.next(m.num_spa_bins);
    stream.next(m.num);
    stream.next(m.len);
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.descriptors);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DescriptorSet_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_perception_msgs::DescriptorSet_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_orient_bins: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_orient_bins);
    s << indent << "num_spa_bins: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_spa_bins);
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "len: ";
    Printer<int32_t>::stream(s, indent + "  ", v.len);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "descriptors[]" << std::endl;
    for (size_t i = 0; i < v.descriptors.size(); ++i)
    {
      s << indent << "  descriptors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::iri_perception_msgs::Descriptor_<ContainerAllocator> >::stream(s, indent + "    ", v.descriptors[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_MESSAGE_DESCRIPTORSET_H

