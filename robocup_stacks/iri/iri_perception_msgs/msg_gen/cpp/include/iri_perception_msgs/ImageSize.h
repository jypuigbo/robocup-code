/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/msg/ImageSize.msg */
#ifndef IRI_PERCEPTION_MSGS_MESSAGE_IMAGESIZE_H
#define IRI_PERCEPTION_MSGS_MESSAGE_IMAGESIZE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct ImageSize_ {
  typedef ImageSize_<ContainerAllocator> Type;

  ImageSize_()
  : width(0)
  , height(0)
  {
  }

  ImageSize_(const ContainerAllocator& _alloc)
  : width(0)
  , height(0)
  {
  }

  typedef uint32_t _width_type;
  uint32_t width;

  typedef uint32_t _height_type;
  uint32_t height;


  typedef boost::shared_ptr< ::iri_perception_msgs::ImageSize_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::ImageSize_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ImageSize
typedef  ::iri_perception_msgs::ImageSize_<std::allocator<void> > ImageSize;

typedef boost::shared_ptr< ::iri_perception_msgs::ImageSize> ImageSizePtr;
typedef boost::shared_ptr< ::iri_perception_msgs::ImageSize const> ImageSizeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_perception_msgs::ImageSize_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_perception_msgs::ImageSize_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::ImageSize_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::ImageSize_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::ImageSize_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d00b1659f7d843bad3388af53e042f94";
  }

  static const char* value(const  ::iri_perception_msgs::ImageSize_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd00b1659f7d843baULL;
  static const uint64_t static_value2 = 0xd3388af53e042f94ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::ImageSize_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/ImageSize";
  }

  static const char* value(const  ::iri_perception_msgs::ImageSize_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::ImageSize_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 width\n\
uint32 height\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::ImageSize_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_perception_msgs::ImageSize_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::ImageSize_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.width);
    stream.next(m.height);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ImageSize_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_perception_msgs::ImageSize_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_perception_msgs::ImageSize_<ContainerAllocator> & v) 
  {
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_MESSAGE_IMAGESIZE_H

