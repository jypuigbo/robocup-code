/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/msg/object_pose_detectionResult.msg */
#ifndef IRI_PERCEPTION_MSGS_MESSAGE_OBJECT_POSE_DETECTIONRESULT_H
#define IRI_PERCEPTION_MSGS_MESSAGE_OBJECT_POSE_DETECTIONRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/PoseStamped.h"

namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct object_pose_detectionResult_ {
  typedef object_pose_detectionResult_<ContainerAllocator> Type;

  object_pose_detectionResult_()
  : pose()
  {
  }

  object_pose_detectionResult_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct object_pose_detectionResult
typedef  ::iri_perception_msgs::object_pose_detectionResult_<std::allocator<void> > object_pose_detectionResult;

typedef boost::shared_ptr< ::iri_perception_msgs::object_pose_detectionResult> object_pose_detectionResultPtr;
typedef boost::shared_ptr< ::iri_perception_msgs::object_pose_detectionResult const> object_pose_detectionResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f8930d968a3e84d471dff917bb1cdae";
  }

  static const char* value(const  ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3f8930d968a3e84dULL;
  static const uint64_t static_value2 = 0x471dff917bb1cdaeULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/object_pose_detectionResult";
  }

  static const char* value(const  ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
geometry_msgs/PoseStamped pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct object_pose_detectionResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_perception_msgs::object_pose_detectionResult_<ContainerAllocator> & v) 
  {
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_MESSAGE_OBJECT_POSE_DETECTIONRESULT_H

