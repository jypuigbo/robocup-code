/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/msg/GeoVw.msg */
#ifndef IRI_PERCEPTION_MSGS_MESSAGE_GEOVW_H
#define IRI_PERCEPTION_MSGS_MESSAGE_GEOVW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct GeoVw_ {
  typedef GeoVw_<ContainerAllocator> Type;

  GeoVw_()
  : x(0)
  , y(0)
  , word(0)
  {
  }

  GeoVw_(const ContainerAllocator& _alloc)
  : x(0)
  , y(0)
  , word(0)
  {
  }

  typedef uint32_t _x_type;
  uint32_t x;

  typedef uint32_t _y_type;
  uint32_t y;

  typedef uint32_t _word_type;
  uint32_t word;


  typedef boost::shared_ptr< ::iri_perception_msgs::GeoVw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::GeoVw_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GeoVw
typedef  ::iri_perception_msgs::GeoVw_<std::allocator<void> > GeoVw;

typedef boost::shared_ptr< ::iri_perception_msgs::GeoVw> GeoVwPtr;
typedef boost::shared_ptr< ::iri_perception_msgs::GeoVw const> GeoVwConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_perception_msgs::GeoVw_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_perception_msgs::GeoVw_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::GeoVw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::GeoVw_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::GeoVw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "060e8b4afb3efb459a6ff75a4ab5f685";
  }

  static const char* value(const  ::iri_perception_msgs::GeoVw_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x060e8b4afb3efb45ULL;
  static const uint64_t static_value2 = 0x9a6ff75a4ab5f685ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::GeoVw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/GeoVw";
  }

  static const char* value(const  ::iri_perception_msgs::GeoVw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::GeoVw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 x\n\
uint32 y\n\
uint32 word\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::GeoVw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::iri_perception_msgs::GeoVw_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::GeoVw_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.word);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GeoVw_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_perception_msgs::GeoVw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_perception_msgs::GeoVw_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y);
    s << indent << "word: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.word);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_MESSAGE_GEOVW_H

