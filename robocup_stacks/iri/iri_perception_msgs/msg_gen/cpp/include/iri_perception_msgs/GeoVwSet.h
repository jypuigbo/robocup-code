/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/iri_perception_msgs/msg/GeoVwSet.msg */
#ifndef IRI_PERCEPTION_MSGS_MESSAGE_GEOVWSET_H
#define IRI_PERCEPTION_MSGS_MESSAGE_GEOVWSET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "iri_perception_msgs/GeoVw.h"

namespace iri_perception_msgs
{
template <class ContainerAllocator>
struct GeoVwSet_ {
  typedef GeoVwSet_<ContainerAllocator> Type;

  GeoVwSet_()
  : geo_vws()
  {
  }

  GeoVwSet_(const ContainerAllocator& _alloc)
  : geo_vws(_alloc)
  {
  }

  typedef std::vector< ::iri_perception_msgs::GeoVw_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iri_perception_msgs::GeoVw_<ContainerAllocator> >::other >  _geo_vws_type;
  std::vector< ::iri_perception_msgs::GeoVw_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::iri_perception_msgs::GeoVw_<ContainerAllocator> >::other >  geo_vws;


  typedef boost::shared_ptr< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GeoVwSet
typedef  ::iri_perception_msgs::GeoVwSet_<std::allocator<void> > GeoVwSet;

typedef boost::shared_ptr< ::iri_perception_msgs::GeoVwSet> GeoVwSetPtr;
typedef boost::shared_ptr< ::iri_perception_msgs::GeoVwSet const> GeoVwSetConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace iri_perception_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b756dd2b9516b315bb183bf5d4030e0b";
  }

  static const char* value(const  ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb756dd2b9516b315ULL;
  static const uint64_t static_value2 = 0xbb183bf5d4030e0bULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/GeoVwSet";
  }

  static const char* value(const  ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_perception_msgs/GeoVw[] geo_vws\n\
\n\
================================================================================\n\
MSG: iri_perception_msgs/GeoVw\n\
uint32 x\n\
uint32 y\n\
uint32 word\n\
";
  }

  static const char* value(const  ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.geo_vws);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GeoVwSet_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::iri_perception_msgs::GeoVwSet_<ContainerAllocator> & v) 
  {
    s << indent << "geo_vws[]" << std::endl;
    for (size_t i = 0; i < v.geo_vws.size(); ++i)
    {
      s << indent << "  geo_vws[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::iri_perception_msgs::GeoVw_<ContainerAllocator> >::stream(s, indent + "    ", v.geo_vws[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // IRI_PERCEPTION_MSGS_MESSAGE_GEOVWSET_H

