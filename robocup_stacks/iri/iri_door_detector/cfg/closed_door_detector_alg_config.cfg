#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_door_detector'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#       Name                    Type            Reconfiguration level   Description                     Default         Min     Max
gen.add("min_door_width",	int_t,			0,		"Minimum door width",		300,		50,	1500)
gen.add("max_door_width",	int_t,			0,		"Maximum door width",		750,		50,	1500)
gen.add("min_door_height",	int_t,			0,		"Minimum door height",		850,		50,	1500)
gen.add("max_door_height",	int_t,			0,		"Maximum door height",		1200,		50,	1500)
gen.add("handle_width",		int_t,			0,		"Percentage of door width",	12,		1,	20)
gen.add("handle_height",	int_t,			0,		"Percentage of door height",	6,		1,	20)
gen.add("handle_location",	int_t,			0,		"Distance from door edge",	15,		0,	50)
gen.add("allowed_blobs",	int_t,			0,		"Blob Threshold",		130,		0,	400)
gen.add("segment_fidelity",	int_t,			0,		"Edge Fidelity of Segmentation",40,		0,	255)
gen.add("segment_size",		int_t,			0,		"Segment Area",			40,		0,	255)
gen.add("debugging_images",	int_t,			0,		"Show Images for Debugging",	0, 		0,	5)
gen.add("no_simulator",		bool_t,			0,		"Run without simulation",	True)
gen.add("DSC",			bool_t,			0,		"Show Door Size Calibrator",	False)
gen.add("SHM",			bool_t,			0,		"Show Handle Mask",		False)
gen.add("SVP",			bool_t,			0,		"Show Virtual Points",		False)
gen.add("SFT",			bool_t,			0,		"Show Flatness Test",		False)
gen.add("Range_filter",		bool_t,			0,		"Apply Sensor range filter",	True)
gen.add("Persp_filter",		bool_t,			0,		"Apply Perspective filter",	True)
gen.add("Geom_filter",		bool_t,			0,		"Apply Geometry filter",	True)
gen.add("Size_filter",		bool_t,			0,		"Apply Size filter",		True)
gen.add("Aspect_filter",	bool_t,			0,		"Apply Aspect ratio filter",	True)

exit(gen.generate(PACKAGE, "ClosedDoorDetectorAlgorithm", "ClosedDoorDetector"))
