"""autogenerated by genpy from tibi_dabo_msgs/battery_status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class battery_status(genpy.Message):
  _md5sum = "9cc10a535f6582725be65cc15269919b"
  _type = "tibi_dabo_msgs/battery_status"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 voltage
float64 temperature
uint8 status
float64 input_current
float64 output_current
float64 remaining_capacity
float64 time_to_charged
float64 time_to_discharged

"""
  __slots__ = ['voltage','temperature','status','input_current','output_current','remaining_capacity','time_to_charged','time_to_discharged']
  _slot_types = ['float64','float64','uint8','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voltage,temperature,status,input_current,output_current,remaining_capacity,time_to_charged,time_to_discharged

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(battery_status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.voltage is None:
        self.voltage = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.status is None:
        self.status = 0
      if self.input_current is None:
        self.input_current = 0.
      if self.output_current is None:
        self.output_current = 0.
      if self.remaining_capacity is None:
        self.remaining_capacity = 0.
      if self.time_to_charged is None:
        self.time_to_charged = 0.
      if self.time_to_discharged is None:
        self.time_to_discharged = 0.
    else:
      self.voltage = 0.
      self.temperature = 0.
      self.status = 0
      self.input_current = 0.
      self.output_current = 0.
      self.remaining_capacity = 0.
      self.time_to_charged = 0.
      self.time_to_discharged = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2dB5d.pack(_x.voltage, _x.temperature, _x.status, _x.input_current, _x.output_current, _x.remaining_capacity, _x.time_to_charged, _x.time_to_discharged))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.voltage, _x.temperature, _x.status, _x.input_current, _x.output_current, _x.remaining_capacity, _x.time_to_charged, _x.time_to_discharged,) = _struct_2dB5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2dB5d.pack(_x.voltage, _x.temperature, _x.status, _x.input_current, _x.output_current, _x.remaining_capacity, _x.time_to_charged, _x.time_to_discharged))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.voltage, _x.temperature, _x.status, _x.input_current, _x.output_current, _x.remaining_capacity, _x.time_to_charged, _x.time_to_discharged,) = _struct_2dB5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2dB5d = struct.Struct("<2dB5d")
