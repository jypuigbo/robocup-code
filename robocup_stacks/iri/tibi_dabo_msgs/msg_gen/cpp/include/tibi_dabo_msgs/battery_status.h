/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/tibi_dabo_msgs/msg/battery_status.msg */
#ifndef TIBI_DABO_MSGS_MESSAGE_BATTERY_STATUS_H
#define TIBI_DABO_MSGS_MESSAGE_BATTERY_STATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tibi_dabo_msgs
{
template <class ContainerAllocator>
struct battery_status_ {
  typedef battery_status_<ContainerAllocator> Type;

  battery_status_()
  : voltage(0.0)
  , temperature(0.0)
  , status(0)
  , input_current(0.0)
  , output_current(0.0)
  , remaining_capacity(0.0)
  , time_to_charged(0.0)
  , time_to_discharged(0.0)
  {
  }

  battery_status_(const ContainerAllocator& _alloc)
  : voltage(0.0)
  , temperature(0.0)
  , status(0)
  , input_current(0.0)
  , output_current(0.0)
  , remaining_capacity(0.0)
  , time_to_charged(0.0)
  , time_to_discharged(0.0)
  {
  }

  typedef double _voltage_type;
  double voltage;

  typedef double _temperature_type;
  double temperature;

  typedef uint8_t _status_type;
  uint8_t status;

  typedef double _input_current_type;
  double input_current;

  typedef double _output_current_type;
  double output_current;

  typedef double _remaining_capacity_type;
  double remaining_capacity;

  typedef double _time_to_charged_type;
  double time_to_charged;

  typedef double _time_to_discharged_type;
  double time_to_discharged;


  typedef boost::shared_ptr< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tibi_dabo_msgs::battery_status_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct battery_status
typedef  ::tibi_dabo_msgs::battery_status_<std::allocator<void> > battery_status;

typedef boost::shared_ptr< ::tibi_dabo_msgs::battery_status> battery_statusPtr;
typedef boost::shared_ptr< ::tibi_dabo_msgs::battery_status const> battery_statusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tibi_dabo_msgs::battery_status_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tibi_dabo_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tibi_dabo_msgs::battery_status_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9cc10a535f6582725be65cc15269919b";
  }

  static const char* value(const  ::tibi_dabo_msgs::battery_status_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9cc10a535f658272ULL;
  static const uint64_t static_value2 = 0x5be65cc15269919bULL;
};

template<class ContainerAllocator>
struct DataType< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tibi_dabo_msgs/battery_status";
  }

  static const char* value(const  ::tibi_dabo_msgs::battery_status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 voltage\n\
float64 temperature\n\
uint8 status\n\
float64 input_current\n\
float64 output_current\n\
float64 remaining_capacity\n\
float64 time_to_charged\n\
float64 time_to_discharged\n\
\n\
";
  }

  static const char* value(const  ::tibi_dabo_msgs::battery_status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.voltage);
    stream.next(m.temperature);
    stream.next(m.status);
    stream.next(m.input_current);
    stream.next(m.output_current);
    stream.next(m.remaining_capacity);
    stream.next(m.time_to_charged);
    stream.next(m.time_to_discharged);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct battery_status_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tibi_dabo_msgs::battery_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tibi_dabo_msgs::battery_status_<ContainerAllocator> & v) 
  {
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "input_current: ";
    Printer<double>::stream(s, indent + "  ", v.input_current);
    s << indent << "output_current: ";
    Printer<double>::stream(s, indent + "  ", v.output_current);
    s << indent << "remaining_capacity: ";
    Printer<double>::stream(s, indent + "  ", v.remaining_capacity);
    s << indent << "time_to_charged: ";
    Printer<double>::stream(s, indent + "  ", v.time_to_charged);
    s << indent << "time_to_discharged: ";
    Printer<double>::stream(s, indent + "  ", v.time_to_discharged);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TIBI_DABO_MSGS_MESSAGE_BATTERY_STATUS_H

