/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/tibi_dabo_msgs/msg/sequenceGoal.msg */
#ifndef TIBI_DABO_MSGS_MESSAGE_SEQUENCEGOAL_H
#define TIBI_DABO_MSGS_MESSAGE_SEQUENCEGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tibi_dabo_msgs
{
template <class ContainerAllocator>
struct sequenceGoal_ {
  typedef sequenceGoal_<ContainerAllocator> Type;

  sequenceGoal_()
  : sequence_file()
  , num_repetitions()
  {
  }

  sequenceGoal_(const ContainerAllocator& _alloc)
  : sequence_file(_alloc)
  , num_repetitions(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _sequence_file_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  sequence_file;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _num_repetitions_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  num_repetitions;


  typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sequenceGoal
typedef  ::tibi_dabo_msgs::sequenceGoal_<std::allocator<void> > sequenceGoal;

typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceGoal> sequenceGoalPtr;
typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceGoal const> sequenceGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tibi_dabo_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f43f9a28a5d82ac92983f1e553ed78b4";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf43f9a28a5d82ac9ULL;
  static const uint64_t static_value2 = 0x2983f1e553ed78b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tibi_dabo_msgs/sequenceGoal";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
string[]  sequence_file\n\
int32[]   num_repetitions\n\
\n\
";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sequence_file);
    stream.next(m.num_repetitions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sequenceGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tibi_dabo_msgs::sequenceGoal_<ContainerAllocator> & v) 
  {
    s << indent << "sequence_file[]" << std::endl;
    for (size_t i = 0; i < v.sequence_file.size(); ++i)
    {
      s << indent << "  sequence_file[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sequence_file[i]);
    }
    s << indent << "num_repetitions[]" << std::endl;
    for (size_t i = 0; i < v.num_repetitions.size(); ++i)
    {
      s << indent << "  num_repetitions[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.num_repetitions[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TIBI_DABO_MSGS_MESSAGE_SEQUENCEGOAL_H

