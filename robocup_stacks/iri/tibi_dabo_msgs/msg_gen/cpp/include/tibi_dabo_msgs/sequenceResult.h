/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/tibi_dabo_msgs/msg/sequenceResult.msg */
#ifndef TIBI_DABO_MSGS_MESSAGE_SEQUENCERESULT_H
#define TIBI_DABO_MSGS_MESSAGE_SEQUENCERESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tibi_dabo_msgs
{
template <class ContainerAllocator>
struct sequenceResult_ {
  typedef sequenceResult_<ContainerAllocator> Type;

  sequenceResult_()
  : successful()
  , observations()
  {
  }

  sequenceResult_(const ContainerAllocator& _alloc)
  : successful(_alloc)
  , observations(_alloc)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _successful_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  successful;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _observations_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  observations;


  typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sequenceResult
typedef  ::tibi_dabo_msgs::sequenceResult_<std::allocator<void> > sequenceResult;

typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceResult> sequenceResultPtr;
typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceResult const> sequenceResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tibi_dabo_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5166c3db2c743179afd29dd6caf59d72";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5166c3db2c743179ULL;
  static const uint64_t static_value2 = 0xafd29dd6caf59d72ULL;
};

template<class ContainerAllocator>
struct DataType< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tibi_dabo_msgs/sequenceResult";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
bool[]    successful\n\
string[]  observations\n\
\n\
";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.successful);
    stream.next(m.observations);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sequenceResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tibi_dabo_msgs::sequenceResult_<ContainerAllocator> & v) 
  {
    s << indent << "successful[]" << std::endl;
    for (size_t i = 0; i < v.successful.size(); ++i)
    {
      s << indent << "  successful[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.successful[i]);
    }
    s << indent << "observations[]" << std::endl;
    for (size_t i = 0; i < v.observations.size(); ++i)
    {
      s << indent << "  observations[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.observations[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TIBI_DABO_MSGS_MESSAGE_SEQUENCERESULT_H

