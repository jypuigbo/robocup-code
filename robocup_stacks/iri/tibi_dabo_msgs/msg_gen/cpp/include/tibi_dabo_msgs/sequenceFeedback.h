/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/iri/tibi_dabo_msgs/msg/sequenceFeedback.msg */
#ifndef TIBI_DABO_MSGS_MESSAGE_SEQUENCEFEEDBACK_H
#define TIBI_DABO_MSGS_MESSAGE_SEQUENCEFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tibi_dabo_msgs
{
template <class ContainerAllocator>
struct sequenceFeedback_ {
  typedef sequenceFeedback_<ContainerAllocator> Type;

  sequenceFeedback_()
  : percentage()
  {
  }

  sequenceFeedback_(const ContainerAllocator& _alloc)
  : percentage(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _percentage_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  percentage;


  typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sequenceFeedback
typedef  ::tibi_dabo_msgs::sequenceFeedback_<std::allocator<void> > sequenceFeedback;

typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceFeedback> sequenceFeedbackPtr;
typedef boost::shared_ptr< ::tibi_dabo_msgs::sequenceFeedback const> sequenceFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tibi_dabo_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a2b75d80960a49a6a18ec7c3938622d1";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa2b75d80960a49a6ULL;
  static const uint64_t static_value2 = 0xa18ec7c3938622d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tibi_dabo_msgs/sequenceFeedback";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
float32[] percentage\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.percentage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sequenceFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tibi_dabo_msgs::sequenceFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "percentage[]" << std::endl;
    for (size_t i = 0; i < v.percentage.size(); ++i)
    {
      s << indent << "  percentage[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.percentage[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TIBI_DABO_MSGS_MESSAGE_SEQUENCEFEEDBACK_H

