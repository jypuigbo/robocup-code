"""autogenerated by genpy from normal_descriptor_node/ndesc_pc.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import normal_descriptor_node.msg
import std_msgs.msg

class ndesc_pc(genpy.Message):
  _md5sum = "c679de87ba14c801c3867289ca709eb0"
  _type = "normal_descriptor_node/ndesc_pc"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int32 num_orient_bins
int32 num_spa_bins
int32 num
int32 len
int32 width
int32 height
normal_descriptor_node/ndesc[] descriptors

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: normal_descriptor_node/ndesc
float32[] descriptor
geometry_msgs/Vector3 point3d
int32 u
int32 v
float32 ori
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','num_orient_bins','num_spa_bins','num','len','width','height','descriptors']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','normal_descriptor_node/ndesc[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,num_orient_bins,num_spa_bins,num,len,width,height,descriptors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ndesc_pc, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.num_orient_bins is None:
        self.num_orient_bins = 0
      if self.num_spa_bins is None:
        self.num_spa_bins = 0
      if self.num is None:
        self.num = 0
      if self.len is None:
        self.len = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.descriptors is None:
        self.descriptors = []
    else:
      self.header = std_msgs.msg.Header()
      self.num_orient_bins = 0
      self.num_spa_bins = 0
      self.num = 0
      self.len = 0
      self.width = 0
      self.height = 0
      self.descriptors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6i.pack(_x.num_orient_bins, _x.num_spa_bins, _x.num, _x.len, _x.width, _x.height))
      length = len(self.descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.descriptors:
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.descriptor))
        _v1 = val1.point3d
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2if.pack(_x.u, _x.v, _x.ori))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.descriptors is None:
        self.descriptors = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.num_orient_bins, _x.num_spa_bins, _x.num, _x.len, _x.width, _x.height,) = _struct_6i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.descriptors = []
      for i in range(0, length):
        val1 = normal_descriptor_node.msg.ndesc()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = struct.unpack(pattern, str[start:end])
        _v2 = val1.point3d
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.u, _x.v, _x.ori,) = _struct_2if.unpack(str[start:end])
        self.descriptors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6i.pack(_x.num_orient_bins, _x.num_spa_bins, _x.num, _x.len, _x.width, _x.height))
      length = len(self.descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.descriptors:
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.descriptor.tostring())
        _v3 = val1.point3d
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2if.pack(_x.u, _x.v, _x.ori))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.descriptors is None:
        self.descriptors = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.num_orient_bins, _x.num_spa_bins, _x.num, _x.len, _x.width, _x.height,) = _struct_6i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.descriptors = []
      for i in range(0, length):
        val1 = normal_descriptor_node.msg.ndesc()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v4 = val1.point3d
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.u, _x.v, _x.ori,) = _struct_2if.unpack(str[start:end])
        self.descriptors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2if = struct.Struct("<2if")
_struct_6i = struct.Struct("<6i")
_struct_3I = struct.Struct("<3I")
_struct_3d = struct.Struct("<3d")
