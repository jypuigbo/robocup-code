/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/reem_mocks/object_recognition_mock/msg/DetectedObject.msg */
#ifndef OBJECT_RECOGNITION_MOCK_MESSAGE_DETECTEDOBJECT_H
#define OBJECT_RECOGNITION_MOCK_MESSAGE_DETECTEDOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "object_recognition_mock/Pixel.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Point.h"

namespace object_recognition_mock
{
template <class ContainerAllocator>
struct DetectedObject_ {
  typedef DetectedObject_<ContainerAllocator> Type;

  DetectedObject_()
  : points2d()
  , points3d()
  , pose()
  , points3d_model()
  , octave()
  {
  }

  DetectedObject_(const ContainerAllocator& _alloc)
  : points2d(_alloc)
  , points3d(_alloc)
  , pose(_alloc)
  , points3d_model(_alloc)
  , octave(_alloc)
  {
  }

  typedef std::vector< ::object_recognition_mock::Pixel_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_recognition_mock::Pixel_<ContainerAllocator> >::other >  _points2d_type;
  std::vector< ::object_recognition_mock::Pixel_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_recognition_mock::Pixel_<ContainerAllocator> >::other >  points2d;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points3d_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  points3d;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points3d_model_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  points3d_model;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _octave_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  octave;


  typedef boost::shared_ptr< ::object_recognition_mock::DetectedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_recognition_mock::DetectedObject_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectedObject
typedef  ::object_recognition_mock::DetectedObject_<std::allocator<void> > DetectedObject;

typedef boost::shared_ptr< ::object_recognition_mock::DetectedObject> DetectedObjectPtr;
typedef boost::shared_ptr< ::object_recognition_mock::DetectedObject const> DetectedObjectConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::object_recognition_mock::DetectedObject_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::object_recognition_mock::DetectedObject_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace object_recognition_mock

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::object_recognition_mock::DetectedObject_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::object_recognition_mock::DetectedObject_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::object_recognition_mock::DetectedObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "db086185ac6f68f8b4560ea38a8ec39b";
  }

  static const char* value(const  ::object_recognition_mock::DetectedObject_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdb086185ac6f68f8ULL;
  static const uint64_t static_value2 = 0xb4560ea38a8ec39bULL;
};

template<class ContainerAllocator>
struct DataType< ::object_recognition_mock::DetectedObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "object_recognition_mock/DetectedObject";
  }

  static const char* value(const  ::object_recognition_mock::DetectedObject_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::object_recognition_mock::DetectedObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Information of object detected in an image by re_vision\n\
#\n\
\n\
# detected points in the image\n\
Pixel[] points2d\n\
# detected 3d points in the camera reference\n\
geometry_msgs/Point[] points3d\n\
# pose of the object in the camera reference\n\
geometry_msgs/Pose pose\n\
# detected 3d points in the model reference\n\
geometry_msgs/Point[] points3d_model\n\
# detected 3d points octave\n\
int32[] octave\n\
\n\
================================================================================\n\
MSG: object_recognition_mock/Pixel\n\
# top-left corner: (0,0)\n\
\n\
int32 x\n\
int32 y\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::object_recognition_mock::DetectedObject_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::object_recognition_mock::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.points2d);
    stream.next(m.points3d);
    stream.next(m.pose);
    stream.next(m.points3d_model);
    stream.next(m.octave);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectedObject_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_recognition_mock::DetectedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::object_recognition_mock::DetectedObject_<ContainerAllocator> & v) 
  {
    s << indent << "points2d[]" << std::endl;
    for (size_t i = 0; i < v.points2d.size(); ++i)
    {
      s << indent << "  points2d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_recognition_mock::Pixel_<ContainerAllocator> >::stream(s, indent + "    ", v.points2d[i]);
    }
    s << indent << "points3d[]" << std::endl;
    for (size_t i = 0; i < v.points3d.size(); ++i)
    {
      s << indent << "  points3d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points3d[i]);
    }
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "points3d_model[]" << std::endl;
    for (size_t i = 0; i < v.points3d_model.size(); ++i)
    {
      s << indent << "  points3d_model[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points3d_model[i]);
    }
    s << indent << "octave[]" << std::endl;
    for (size_t i = 0; i < v.octave.size(); ++i)
    {
      s << indent << "  octave[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.octave[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBJECT_RECOGNITION_MOCK_MESSAGE_DETECTEDOBJECT_H

