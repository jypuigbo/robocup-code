/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/reem_mocks/person_detector_mock/msg/peopleTracking.msg */
#ifndef PERSON_DETECTOR_MOCK_MESSAGE_PEOPLETRACKING_H
#define PERSON_DETECTOR_MOCK_MESSAGE_PEOPLETRACKING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace person_detector_mock
{
template <class ContainerAllocator>
struct peopleTracking_ {
  typedef peopleTracking_<ContainerAllocator> Type;

  peopleTracking_()
  : targetId(0)
  , x(0.0)
  , y(0.0)
  , vx(0.0)
  , vy(0.0)
  , covariances()
  {
    covariances.assign(0.0);
  }

  peopleTracking_(const ContainerAllocator& _alloc)
  : targetId(0)
  , x(0.0)
  , y(0.0)
  , vx(0.0)
  , vy(0.0)
  , covariances()
  {
    covariances.assign(0.0);
  }

  typedef int32_t _targetId_type;
  int32_t targetId;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _vx_type;
  double vx;

  typedef double _vy_type;
  double vy;

  typedef boost::array<double, 16>  _covariances_type;
  boost::array<double, 16>  covariances;


  typedef boost::shared_ptr< ::person_detector_mock::peopleTracking_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::person_detector_mock::peopleTracking_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct peopleTracking
typedef  ::person_detector_mock::peopleTracking_<std::allocator<void> > peopleTracking;

typedef boost::shared_ptr< ::person_detector_mock::peopleTracking> peopleTrackingPtr;
typedef boost::shared_ptr< ::person_detector_mock::peopleTracking const> peopleTrackingConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::person_detector_mock::peopleTracking_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::person_detector_mock::peopleTracking_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace person_detector_mock

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::person_detector_mock::peopleTracking_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::person_detector_mock::peopleTracking_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::person_detector_mock::peopleTracking_<ContainerAllocator> > {
  static const char* value() 
  {
    return "70343516d9aaa5364e362443390175f5";
  }

  static const char* value(const  ::person_detector_mock::peopleTracking_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x70343516d9aaa536ULL;
  static const uint64_t static_value2 = 0x4e362443390175f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::person_detector_mock::peopleTracking_<ContainerAllocator> > {
  static const char* value() 
  {
    return "person_detector_mock/peopleTracking";
  }

  static const char* value(const  ::person_detector_mock::peopleTracking_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::person_detector_mock::peopleTracking_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 targetId\n\
float64 x\n\
float64 y\n\
float64 vx\n\
float64 vy\n\
float64[16] covariances\n\
\n\
";
  }

  static const char* value(const  ::person_detector_mock::peopleTracking_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::person_detector_mock::peopleTracking_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::person_detector_mock::peopleTracking_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.targetId);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.vx);
    stream.next(m.vy);
    stream.next(m.covariances);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct peopleTracking_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::person_detector_mock::peopleTracking_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::person_detector_mock::peopleTracking_<ContainerAllocator> & v) 
  {
    s << indent << "targetId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.targetId);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "covariances[]" << std::endl;
    for (size_t i = 0; i < v.covariances.size(); ++i)
    {
      s << indent << "  covariances[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariances[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PERSON_DETECTOR_MOCK_MESSAGE_PEOPLETRACKING_H

