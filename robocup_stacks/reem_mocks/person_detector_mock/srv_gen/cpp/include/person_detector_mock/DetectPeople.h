/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/reem_mocks/person_detector_mock/srv/DetectPeople.srv */
#ifndef PERSON_DETECTOR_MOCK_SERVICE_DETECTPEOPLE_H
#define PERSON_DETECTOR_MOCK_SERVICE_DETECTPEOPLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "person_detector_mock/peopleTrackingArray.h"

namespace person_detector_mock
{
template <class ContainerAllocator>
struct DetectPeopleRequest_ {
  typedef DetectPeopleRequest_<ContainerAllocator> Type;

  DetectPeopleRequest_()
  {
  }

  DetectPeopleRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectPeopleRequest
typedef  ::person_detector_mock::DetectPeopleRequest_<std::allocator<void> > DetectPeopleRequest;

typedef boost::shared_ptr< ::person_detector_mock::DetectPeopleRequest> DetectPeopleRequestPtr;
typedef boost::shared_ptr< ::person_detector_mock::DetectPeopleRequest const> DetectPeopleRequestConstPtr;


template <class ContainerAllocator>
struct DetectPeopleResponse_ {
  typedef DetectPeopleResponse_<ContainerAllocator> Type;

  DetectPeopleResponse_()
  : peopleSet()
  {
  }

  DetectPeopleResponse_(const ContainerAllocator& _alloc)
  : peopleSet(_alloc)
  {
  }

  typedef  ::person_detector_mock::peopleTrackingArray_<ContainerAllocator>  _peopleSet_type;
   ::person_detector_mock::peopleTrackingArray_<ContainerAllocator>  peopleSet;


  typedef boost::shared_ptr< ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectPeopleResponse
typedef  ::person_detector_mock::DetectPeopleResponse_<std::allocator<void> > DetectPeopleResponse;

typedef boost::shared_ptr< ::person_detector_mock::DetectPeopleResponse> DetectPeopleResponsePtr;
typedef boost::shared_ptr< ::person_detector_mock::DetectPeopleResponse const> DetectPeopleResponseConstPtr;

struct DetectPeople
{

typedef DetectPeopleRequest Request;
typedef DetectPeopleResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DetectPeople
} // namespace person_detector_mock

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "person_detector_mock/DetectPeopleRequest";
  }

  static const char* value(const  ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fb55709fde01cfa26cd33335972baf09";
  }

  static const char* value(const  ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfb55709fde01cfa2ULL;
  static const uint64_t static_value2 = 0x6cd33335972baf09ULL;
};

template<class ContainerAllocator>
struct DataType< ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "person_detector_mock/DetectPeopleResponse";
  }

  static const char* value(const  ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "peopleTrackingArray peopleSet\n\
\n\
\n\
================================================================================\n\
MSG: person_detector_mock/peopleTrackingArray\n\
# timestamp, frame id\n\
Header header\n\
\n\
#set of targets being tracked\n\
peopleTracking[] peopleSet\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: person_detector_mock/peopleTracking\n\
int32 targetId\n\
float64 x\n\
float64 y\n\
float64 vx\n\
float64 vy\n\
float64[16] covariances\n\
\n\
";
  }

  static const char* value(const  ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::person_detector_mock::DetectPeopleRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectPeopleRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::person_detector_mock::DetectPeopleResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.peopleSet);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectPeopleResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<person_detector_mock::DetectPeople> {
  static const char* value() 
  {
    return "fb55709fde01cfa26cd33335972baf09";
  }

  static const char* value(const person_detector_mock::DetectPeople&) { return value(); } 
};

template<>
struct DataType<person_detector_mock::DetectPeople> {
  static const char* value() 
  {
    return "person_detector_mock/DetectPeople";
  }

  static const char* value(const person_detector_mock::DetectPeople&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<person_detector_mock::DetectPeopleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fb55709fde01cfa26cd33335972baf09";
  }

  static const char* value(const person_detector_mock::DetectPeopleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<person_detector_mock::DetectPeopleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "person_detector_mock/DetectPeople";
  }

  static const char* value(const person_detector_mock::DetectPeopleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<person_detector_mock::DetectPeopleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fb55709fde01cfa26cd33335972baf09";
  }

  static const char* value(const person_detector_mock::DetectPeopleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<person_detector_mock::DetectPeopleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "person_detector_mock/DetectPeople";
  }

  static const char* value(const person_detector_mock::DetectPeopleResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PERSON_DETECTOR_MOCK_SERVICE_DETECTPEOPLE_H

