/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/moped/pr_msgs/msg/WAMPrecomputedBlendElement.msg */
#ifndef PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDELEMENT_H
#define PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDELEMENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "pr_msgs/Joints.h"
#include "pr_msgs/Joints.h"

namespace pr_msgs
{
template <class ContainerAllocator>
struct WAMPrecomputedBlendElement_ {
  typedef WAMPrecomputedBlendElement_<ContainerAllocator> Type;

  WAMPrecomputedBlendElement_()
  : start_pos()
  , end_pos()
  , start_time(0.0)
  , duration(0.0)
  , max_path_velocity(0.0)
  , max_path_acceleration(0.0)
  {
  }

  WAMPrecomputedBlendElement_(const ContainerAllocator& _alloc)
  : start_pos(_alloc)
  , end_pos(_alloc)
  , start_time(0.0)
  , duration(0.0)
  , max_path_velocity(0.0)
  , max_path_acceleration(0.0)
  {
  }

  typedef  ::pr_msgs::Joints_<ContainerAllocator>  _start_pos_type;
   ::pr_msgs::Joints_<ContainerAllocator>  start_pos;

  typedef  ::pr_msgs::Joints_<ContainerAllocator>  _end_pos_type;
   ::pr_msgs::Joints_<ContainerAllocator>  end_pos;

  typedef double _start_time_type;
  double start_time;

  typedef double _duration_type;
  double duration;

  typedef double _max_path_velocity_type;
  double max_path_velocity;

  typedef double _max_path_acceleration_type;
  double max_path_acceleration;


  typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WAMPrecomputedBlendElement
typedef  ::pr_msgs::WAMPrecomputedBlendElement_<std::allocator<void> > WAMPrecomputedBlendElement;

typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendElement> WAMPrecomputedBlendElementPtr;
typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendElement const> WAMPrecomputedBlendElementConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "431cf004c67a8db19f0c5e2f55655018";
  }

  static const char* value(const  ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x431cf004c67a8db1ULL;
  static const uint64_t static_value2 = 0x9f0c5e2f55655018ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/WAMPrecomputedBlendElement";
  }

  static const char* value(const  ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/Joints start_pos\n\
pr_msgs/Joints end_pos\n\
float64 start_time\n\
float64 duration\n\
float64 max_path_velocity\n\
float64 max_path_acceleration\n\
\n\
================================================================================\n\
MSG: pr_msgs/Joints\n\
float64[] j\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.start_pos);
    stream.next(m.end_pos);
    stream.next(m.start_time);
    stream.next(m.duration);
    stream.next(m.max_path_velocity);
    stream.next(m.max_path_acceleration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WAMPrecomputedBlendElement_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> & v) 
  {
    s << indent << "start_pos: ";
s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.start_pos);
    s << indent << "end_pos: ";
s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.end_pos);
    s << indent << "start_time: ";
    Printer<double>::stream(s, indent + "  ", v.start_time);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "max_path_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.max_path_velocity);
    s << indent << "max_path_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.max_path_acceleration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDELEMENT_H

