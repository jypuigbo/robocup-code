/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/moped/pr_msgs/msg/WAMState.msg */
#ifndef PR_MSGS_MESSAGE_WAMSTATE_H
#define PR_MSGS_MESSAGE_WAMSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "pr_msgs/TrajInfo.h"
#include "pr_msgs/TrajInfo.h"

namespace pr_msgs
{
template <class ContainerAllocator>
struct WAMState_ {
  typedef WAMState_<ContainerAllocator> Type;

  WAMState_()
  : header()
  , positions()
  , jpositions()
  , torques()
  , trajectory_queue()
  , prev_trajectory()
  , state(0)
  {
  }

  WAMState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , positions(_alloc)
  , jpositions(_alloc)
  , torques(_alloc)
  , trajectory_queue(_alloc)
  , prev_trajectory(_alloc)
  , state(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positions_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  positions;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _jpositions_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  jpositions;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _torques_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  torques;

  typedef std::vector< ::pr_msgs::TrajInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr_msgs::TrajInfo_<ContainerAllocator> >::other >  _trajectory_queue_type;
  std::vector< ::pr_msgs::TrajInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr_msgs::TrajInfo_<ContainerAllocator> >::other >  trajectory_queue;

  typedef  ::pr_msgs::TrajInfo_<ContainerAllocator>  _prev_trajectory_type;
   ::pr_msgs::TrajInfo_<ContainerAllocator>  prev_trajectory;

  typedef uint8_t _state_type;
  uint8_t state;

  enum { state_free = 0 };
  enum { state_fixed = 1 };
  enum { state_traj_active = 2 };
  enum { state_traj_stalled = 3 };
  enum { state_traj_paused = 4 };
  enum { state_inactive = 255 };
  enum { state_moving = 2 };
  enum { state_stalled = 3 };

  typedef boost::shared_ptr< ::pr_msgs::WAMState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::WAMState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WAMState
typedef  ::pr_msgs::WAMState_<std::allocator<void> > WAMState;

typedef boost::shared_ptr< ::pr_msgs::WAMState> WAMStatePtr;
typedef boost::shared_ptr< ::pr_msgs::WAMState const> WAMStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::WAMState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::WAMState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::WAMState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::WAMState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::WAMState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "25cd353827aaf5484b1466979582c59d";
  }

  static const char* value(const  ::pr_msgs::WAMState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x25cd353827aaf548ULL;
  static const uint64_t static_value2 = 0x4b1466979582c59dULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::WAMState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/WAMState";
  }

  static const char* value(const  ::pr_msgs::WAMState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::WAMState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
float64[] positions\n\
float64[] jpositions\n\
# float64[] velocities  # not implemented yet\n\
float64[] torques\n\
pr_msgs/TrajInfo[] trajectory_queue\n\
pr_msgs/TrajInfo prev_trajectory\n\
uint8 state\n\
\n\
uint8 state_free=0\n\
uint8 state_fixed=1\n\
uint8 state_traj_active=2\n\
uint8 state_traj_stalled=3\n\
uint8 state_traj_paused=4\n\
uint8 state_inactive=255\n\
\n\
# Deprecated state names; please switch to the ones above\n\
uint8 state_moving=2 # deprecated\n\
uint8 state_stalled=3 # deprecated\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pr_msgs/TrajInfo\n\
uint32 id\n\
string type\n\
float64[] end_position\n\
uint32 state\n\
\n\
uint8 state_pending=0\n\
uint8 state_active=1\n\
uint8 state_done=3\n\
uint8 state_aborted=4\n\
\n\
# Deprecated state names; please use the ones above\n\
uint8 state_running=1 # deprecated\n\
uint8 state_paused=2  # deprecated: look for state_traj_paused in WAMState.state\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::WAMState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr_msgs::WAMState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr_msgs::WAMState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::WAMState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.positions);
    stream.next(m.jpositions);
    stream.next(m.torques);
    stream.next(m.trajectory_queue);
    stream.next(m.prev_trajectory);
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WAMState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::WAMState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::WAMState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "jpositions[]" << std::endl;
    for (size_t i = 0; i < v.jpositions.size(); ++i)
    {
      s << indent << "  jpositions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.jpositions[i]);
    }
    s << indent << "torques[]" << std::endl;
    for (size_t i = 0; i < v.torques.size(); ++i)
    {
      s << indent << "  torques[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torques[i]);
    }
    s << indent << "trajectory_queue[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_queue.size(); ++i)
    {
      s << indent << "  trajectory_queue[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr_msgs::TrajInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_queue[i]);
    }
    s << indent << "prev_trajectory: ";
s << std::endl;
    Printer< ::pr_msgs::TrajInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.prev_trajectory);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_WAMSTATE_H

