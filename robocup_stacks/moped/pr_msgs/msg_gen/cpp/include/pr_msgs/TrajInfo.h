/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/moped/pr_msgs/msg/TrajInfo.msg */
#ifndef PR_MSGS_MESSAGE_TRAJINFO_H
#define PR_MSGS_MESSAGE_TRAJINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr_msgs
{
template <class ContainerAllocator>
struct TrajInfo_ {
  typedef TrajInfo_<ContainerAllocator> Type;

  TrajInfo_()
  : id(0)
  , type()
  , end_position()
  , state(0)
  {
  }

  TrajInfo_(const ContainerAllocator& _alloc)
  : id(0)
  , type(_alloc)
  , end_position(_alloc)
  , state(0)
  {
  }

  typedef uint32_t _id_type;
  uint32_t id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _end_position_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  end_position;

  typedef uint32_t _state_type;
  uint32_t state;

  enum { state_pending = 0 };
  enum { state_active = 1 };
  enum { state_done = 3 };
  enum { state_aborted = 4 };
  enum { state_running = 1 };
  enum { state_paused = 2 };

  typedef boost::shared_ptr< ::pr_msgs::TrajInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::TrajInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrajInfo
typedef  ::pr_msgs::TrajInfo_<std::allocator<void> > TrajInfo;

typedef boost::shared_ptr< ::pr_msgs::TrajInfo> TrajInfoPtr;
typedef boost::shared_ptr< ::pr_msgs::TrajInfo const> TrajInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::TrajInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::TrajInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::TrajInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::TrajInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::TrajInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "82f4530e5ffe77991769af4f85589db5";
  }

  static const char* value(const  ::pr_msgs::TrajInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x82f4530e5ffe7799ULL;
  static const uint64_t static_value2 = 0x1769af4f85589db5ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::TrajInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/TrajInfo";
  }

  static const char* value(const  ::pr_msgs::TrajInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::TrajInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 id\n\
string type\n\
float64[] end_position\n\
uint32 state\n\
\n\
uint8 state_pending=0\n\
uint8 state_active=1\n\
uint8 state_done=3\n\
uint8 state_aborted=4\n\
\n\
# Deprecated state names; please use the ones above\n\
uint8 state_running=1 # deprecated\n\
uint8 state_paused=2  # deprecated: look for state_traj_paused in WAMState.state\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::TrajInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::TrajInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.type);
    stream.next(m.end_position);
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::TrajInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::TrajInfo_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "end_position[]" << std::endl;
    for (size_t i = 0; i < v.end_position.size(); ++i)
    {
      s << indent << "  end_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end_position[i]);
    }
    s << indent << "state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_TRAJINFO_H

