/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/moped/pr_msgs/msg/BHTactile.msg */
#ifndef PR_MSGS_MESSAGE_BHTACTILE_H
#define PR_MSGS_MESSAGE_BHTACTILE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr_msgs
{
template <class ContainerAllocator>
struct BHTactile_ {
  typedef BHTactile_<ContainerAllocator> Type;

  BHTactile_()
  : finger1()
  , finger2()
  , finger3()
  , palm()
  {
  }

  BHTactile_(const ContainerAllocator& _alloc)
  : finger1(_alloc)
  , finger2(_alloc)
  , finger3(_alloc)
  , palm(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _finger1_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  finger1;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _finger2_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  finger2;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _finger3_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  finger3;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _palm_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  palm;


  typedef boost::shared_ptr< ::pr_msgs::BHTactile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::BHTactile_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BHTactile
typedef  ::pr_msgs::BHTactile_<std::allocator<void> > BHTactile;

typedef boost::shared_ptr< ::pr_msgs::BHTactile> BHTactilePtr;
typedef boost::shared_ptr< ::pr_msgs::BHTactile const> BHTactileConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::BHTactile_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::BHTactile_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::BHTactile_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::BHTactile_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::BHTactile_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f40a82aa99391835587004e5c16d74c4";
  }

  static const char* value(const  ::pr_msgs::BHTactile_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf40a82aa99391835ULL;
  static const uint64_t static_value2 = 0x587004e5c16d74c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::BHTactile_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/BHTactile";
  }

  static const char* value(const  ::pr_msgs::BHTactile_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::BHTactile_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] finger1\n\
float32[] finger2\n\
float32[] finger3\n\
float32[] palm\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::BHTactile_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::BHTactile_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.finger1);
    stream.next(m.finger2);
    stream.next(m.finger3);
    stream.next(m.palm);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BHTactile_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::BHTactile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::BHTactile_<ContainerAllocator> & v) 
  {
    s << indent << "finger1[]" << std::endl;
    for (size_t i = 0; i < v.finger1.size(); ++i)
    {
      s << indent << "  finger1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.finger1[i]);
    }
    s << indent << "finger2[]" << std::endl;
    for (size_t i = 0; i < v.finger2.size(); ++i)
    {
      s << indent << "  finger2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.finger2[i]);
    }
    s << indent << "finger3[]" << std::endl;
    for (size_t i = 0; i < v.finger3.size(); ++i)
    {
      s << indent << "  finger3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.finger3[i]);
    }
    s << indent << "palm[]" << std::endl;
    for (size_t i = 0; i < v.palm.size(); ++i)
    {
      s << indent << "  palm[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.palm[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_BHTACTILE_H

