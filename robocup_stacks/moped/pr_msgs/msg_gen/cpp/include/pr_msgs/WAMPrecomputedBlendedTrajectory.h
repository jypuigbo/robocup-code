/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/moped/pr_msgs/msg/WAMPrecomputedBlendedTrajectory.msg */
#ifndef PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDEDTRAJECTORY_H
#define PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDEDTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "pr_msgs/Joints.h"
#include "pr_msgs/Joints.h"
#include "pr_msgs/Joints.h"
#include "pr_msgs/Joints.h"
#include "pr_msgs/WAMPrecomputedBlendElement.h"

namespace pr_msgs
{
template <class ContainerAllocator>
struct WAMPrecomputedBlendedTrajectory_ {
  typedef WAMPrecomputedBlendedTrajectory_<ContainerAllocator> Type;

  WAMPrecomputedBlendedTrajectory_()
  : id(0)
  , HoldOnStall(false)
  , WaitForStart(false)
  , start_position()
  , end_position()
  , max_joint_vel()
  , max_joint_accel()
  , macpieces()
  , traj_duration(0.0)
  {
  }

  WAMPrecomputedBlendedTrajectory_(const ContainerAllocator& _alloc)
  : id(0)
  , HoldOnStall(false)
  , WaitForStart(false)
  , start_position(_alloc)
  , end_position(_alloc)
  , max_joint_vel(_alloc)
  , max_joint_accel(_alloc)
  , macpieces(_alloc)
  , traj_duration(0.0)
  {
  }

  typedef int16_t _id_type;
  int16_t id;

  typedef uint8_t _HoldOnStall_type;
  uint8_t HoldOnStall;

  typedef uint8_t _WaitForStart_type;
  uint8_t WaitForStart;

  typedef  ::pr_msgs::Joints_<ContainerAllocator>  _start_position_type;
   ::pr_msgs::Joints_<ContainerAllocator>  start_position;

  typedef  ::pr_msgs::Joints_<ContainerAllocator>  _end_position_type;
   ::pr_msgs::Joints_<ContainerAllocator>  end_position;

  typedef  ::pr_msgs::Joints_<ContainerAllocator>  _max_joint_vel_type;
   ::pr_msgs::Joints_<ContainerAllocator>  max_joint_vel;

  typedef  ::pr_msgs::Joints_<ContainerAllocator>  _max_joint_accel_type;
   ::pr_msgs::Joints_<ContainerAllocator>  max_joint_accel;

  typedef std::vector< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> >::other >  _macpieces_type;
  std::vector< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> >::other >  macpieces;

  typedef double _traj_duration_type;
  double traj_duration;


  typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WAMPrecomputedBlendedTrajectory
typedef  ::pr_msgs::WAMPrecomputedBlendedTrajectory_<std::allocator<void> > WAMPrecomputedBlendedTrajectory;

typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendedTrajectory> WAMPrecomputedBlendedTrajectoryPtr;
typedef boost::shared_ptr< ::pr_msgs::WAMPrecomputedBlendedTrajectory const> WAMPrecomputedBlendedTrajectoryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "71bcabe3695718cad854012f233bf235";
  }

  static const char* value(const  ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x71bcabe3695718caULL;
  static const uint64_t static_value2 = 0xd854012f233bf235ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/WAMPrecomputedBlendedTrajectory";
  }

  static const char* value(const  ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 id\n\
bool HoldOnStall\n\
bool WaitForStart\n\
pr_msgs/Joints start_position\n\
pr_msgs/Joints end_position\n\
pr_msgs/Joints max_joint_vel\n\
pr_msgs/Joints max_joint_accel\n\
pr_msgs/WAMPrecomputedBlendElement[] macpieces\n\
float64 traj_duration\n\
\n\
================================================================================\n\
MSG: pr_msgs/Joints\n\
float64[] j\n\
\n\
================================================================================\n\
MSG: pr_msgs/WAMPrecomputedBlendElement\n\
pr_msgs/Joints start_pos\n\
pr_msgs/Joints end_pos\n\
float64 start_time\n\
float64 duration\n\
float64 max_path_velocity\n\
float64 max_path_acceleration\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.HoldOnStall);
    stream.next(m.WaitForStart);
    stream.next(m.start_position);
    stream.next(m.end_position);
    stream.next(m.max_joint_vel);
    stream.next(m.max_joint_accel);
    stream.next(m.macpieces);
    stream.next(m.traj_duration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WAMPrecomputedBlendedTrajectory_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "HoldOnStall: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HoldOnStall);
    s << indent << "WaitForStart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WaitForStart);
    s << indent << "start_position: ";
s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.start_position);
    s << indent << "end_position: ";
s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.end_position);
    s << indent << "max_joint_vel: ";
s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.max_joint_vel);
    s << indent << "max_joint_accel: ";
s << std::endl;
    Printer< ::pr_msgs::Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.max_joint_accel);
    s << indent << "macpieces[]" << std::endl;
    for (size_t i = 0; i < v.macpieces.size(); ++i)
    {
      s << indent << "  macpieces[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr_msgs::WAMPrecomputedBlendElement_<ContainerAllocator> >::stream(s, indent + "    ", v.macpieces[i]);
    }
    s << indent << "traj_duration: ";
    Printer<double>::stream(s, indent + "  ", v.traj_duration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR_MSGS_MESSAGE_WAMPRECOMPUTEDBLENDEDTRAJECTORY_H

