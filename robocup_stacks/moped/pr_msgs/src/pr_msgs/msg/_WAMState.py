"""autogenerated by genpy from pr_msgs/WAMState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pr_msgs.msg
import std_msgs.msg

class WAMState(genpy.Message):
  _md5sum = "25cd353827aaf5484b1466979582c59d"
  _type = "pr_msgs/WAMState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

float64[] positions
float64[] jpositions
# float64[] velocities  # not implemented yet
float64[] torques
pr_msgs/TrajInfo[] trajectory_queue
pr_msgs/TrajInfo prev_trajectory
uint8 state

uint8 state_free=0
uint8 state_fixed=1
uint8 state_traj_active=2
uint8 state_traj_stalled=3
uint8 state_traj_paused=4
uint8 state_inactive=255

# Deprecated state names; please switch to the ones above
uint8 state_moving=2 # deprecated
uint8 state_stalled=3 # deprecated

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: pr_msgs/TrajInfo
uint32 id
string type
float64[] end_position
uint32 state

uint8 state_pending=0
uint8 state_active=1
uint8 state_done=3
uint8 state_aborted=4

# Deprecated state names; please use the ones above
uint8 state_running=1 # deprecated
uint8 state_paused=2  # deprecated: look for state_traj_paused in WAMState.state




"""
  # Pseudo-constants
  state_free = 0
  state_fixed = 1
  state_traj_active = 2
  state_traj_stalled = 3
  state_traj_paused = 4
  state_inactive = 255
  state_moving = 2
  state_stalled = 3

  __slots__ = ['header','positions','jpositions','torques','trajectory_queue','prev_trajectory','state']
  _slot_types = ['std_msgs/Header','float64[]','float64[]','float64[]','pr_msgs/TrajInfo[]','pr_msgs/TrajInfo','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,positions,jpositions,torques,trajectory_queue,prev_trajectory,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WAMState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.positions is None:
        self.positions = []
      if self.jpositions is None:
        self.jpositions = []
      if self.torques is None:
        self.torques = []
      if self.trajectory_queue is None:
        self.trajectory_queue = []
      if self.prev_trajectory is None:
        self.prev_trajectory = pr_msgs.msg.TrajInfo()
      if self.state is None:
        self.state = 0
    else:
      self.header = std_msgs.msg.Header()
      self.positions = []
      self.jpositions = []
      self.torques = []
      self.trajectory_queue = []
      self.prev_trajectory = pr_msgs.msg.TrajInfo()
      self.state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.positions))
      length = len(self.jpositions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.jpositions))
      length = len(self.torques)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.torques))
      length = len(self.trajectory_queue)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_queue:
        buff.write(_struct_I.pack(val1.id))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.end_position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.end_position))
        buff.write(_struct_I.pack(val1.state))
      buff.write(_struct_I.pack(self.prev_trajectory.id))
      _x = self.prev_trajectory.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.prev_trajectory.end_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.prev_trajectory.end_position))
      _x = self
      buff.write(_struct_IB.pack(_x.prev_trajectory.state, _x.state))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trajectory_queue is None:
        self.trajectory_queue = None
      if self.prev_trajectory is None:
        self.prev_trajectory = pr_msgs.msg.TrajInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.positions = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.jpositions = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.torques = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_queue = []
      for i in range(0, length):
        val1 = pr_msgs.msg.TrajInfo()
        start = end
        end += 4
        (val1.id,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.end_position = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (val1.state,) = _struct_I.unpack(str[start:end])
        self.trajectory_queue.append(val1)
      start = end
      end += 4
      (self.prev_trajectory.id,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prev_trajectory.type = str[start:end].decode('utf-8')
      else:
        self.prev_trajectory.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.prev_trajectory.end_position = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 5
      (_x.prev_trajectory.state, _x.state,) = _struct_IB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.positions.tostring())
      length = len(self.jpositions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.jpositions.tostring())
      length = len(self.torques)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.torques.tostring())
      length = len(self.trajectory_queue)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_queue:
        buff.write(_struct_I.pack(val1.id))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.end_position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.end_position.tostring())
        buff.write(_struct_I.pack(val1.state))
      buff.write(_struct_I.pack(self.prev_trajectory.id))
      _x = self.prev_trajectory.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.prev_trajectory.end_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.prev_trajectory.end_position.tostring())
      _x = self
      buff.write(_struct_IB.pack(_x.prev_trajectory.state, _x.state))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trajectory_queue is None:
        self.trajectory_queue = None
      if self.prev_trajectory is None:
        self.prev_trajectory = pr_msgs.msg.TrajInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.jpositions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.torques = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_queue = []
      for i in range(0, length):
        val1 = pr_msgs.msg.TrajInfo()
        start = end
        end += 4
        (val1.id,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.end_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (val1.state,) = _struct_I.unpack(str[start:end])
        self.trajectory_queue.append(val1)
      start = end
      end += 4
      (self.prev_trajectory.id,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prev_trajectory.type = str[start:end].decode('utf-8')
      else:
        self.prev_trajectory.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.prev_trajectory.end_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 5
      (_x.prev_trajectory.state, _x.state,) = _struct_IB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_IB = struct.Struct("<IB")
