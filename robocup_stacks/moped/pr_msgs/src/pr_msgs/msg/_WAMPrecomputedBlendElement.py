"""autogenerated by genpy from pr_msgs/WAMPrecomputedBlendElement.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pr_msgs.msg

class WAMPrecomputedBlendElement(genpy.Message):
  _md5sum = "431cf004c67a8db19f0c5e2f55655018"
  _type = "pr_msgs/WAMPrecomputedBlendElement"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """pr_msgs/Joints start_pos
pr_msgs/Joints end_pos
float64 start_time
float64 duration
float64 max_path_velocity
float64 max_path_acceleration

================================================================================
MSG: pr_msgs/Joints
float64[] j

"""
  __slots__ = ['start_pos','end_pos','start_time','duration','max_path_velocity','max_path_acceleration']
  _slot_types = ['pr_msgs/Joints','pr_msgs/Joints','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_pos,end_pos,start_time,duration,max_path_velocity,max_path_acceleration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WAMPrecomputedBlendElement, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_pos is None:
        self.start_pos = pr_msgs.msg.Joints()
      if self.end_pos is None:
        self.end_pos = pr_msgs.msg.Joints()
      if self.start_time is None:
        self.start_time = 0.
      if self.duration is None:
        self.duration = 0.
      if self.max_path_velocity is None:
        self.max_path_velocity = 0.
      if self.max_path_acceleration is None:
        self.max_path_acceleration = 0.
    else:
      self.start_pos = pr_msgs.msg.Joints()
      self.end_pos = pr_msgs.msg.Joints()
      self.start_time = 0.
      self.duration = 0.
      self.max_path_velocity = 0.
      self.max_path_acceleration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.start_pos.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.start_pos.j))
      length = len(self.end_pos.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.end_pos.j))
      _x = self
      buff.write(_struct_4d.pack(_x.start_time, _x.duration, _x.max_path_velocity, _x.max_path_acceleration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_pos is None:
        self.start_pos = pr_msgs.msg.Joints()
      if self.end_pos is None:
        self.end_pos = pr_msgs.msg.Joints()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_pos.j = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_pos.j = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.start_time, _x.duration, _x.max_path_velocity, _x.max_path_acceleration,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.start_pos.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.start_pos.j.tostring())
      length = len(self.end_pos.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.end_pos.j.tostring())
      _x = self
      buff.write(_struct_4d.pack(_x.start_time, _x.duration, _x.max_path_velocity, _x.max_path_acceleration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_pos is None:
        self.start_pos = pr_msgs.msg.Joints()
      if self.end_pos is None:
        self.end_pos = pr_msgs.msg.Joints()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_pos.j = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_pos.j = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.start_time, _x.duration, _x.max_path_velocity, _x.max_path_acceleration,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
