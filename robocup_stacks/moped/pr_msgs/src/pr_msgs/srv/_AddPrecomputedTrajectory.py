"""autogenerated by genpy from pr_msgs/AddPrecomputedTrajectoryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pr_msgs.msg

class AddPrecomputedTrajectoryRequest(genpy.Message):
  _md5sum = "75e7d5e1c8aabc62097ff8b39b0402be"
  _type = "pr_msgs/AddPrecomputedTrajectoryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """pr_msgs/WAMPrecomputedBlendedTrajectory traj

================================================================================
MSG: pr_msgs/WAMPrecomputedBlendedTrajectory
int16 id
bool HoldOnStall
bool WaitForStart
pr_msgs/Joints start_position
pr_msgs/Joints end_position
pr_msgs/Joints max_joint_vel
pr_msgs/Joints max_joint_accel
pr_msgs/WAMPrecomputedBlendElement[] macpieces
float64 traj_duration

================================================================================
MSG: pr_msgs/Joints
float64[] j

================================================================================
MSG: pr_msgs/WAMPrecomputedBlendElement
pr_msgs/Joints start_pos
pr_msgs/Joints end_pos
float64 start_time
float64 duration
float64 max_path_velocity
float64 max_path_acceleration

"""
  __slots__ = ['traj']
  _slot_types = ['pr_msgs/WAMPrecomputedBlendedTrajectory']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       traj

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AddPrecomputedTrajectoryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.traj is None:
        self.traj = pr_msgs.msg.WAMPrecomputedBlendedTrajectory()
    else:
      self.traj = pr_msgs.msg.WAMPrecomputedBlendedTrajectory()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_h2B.pack(_x.traj.id, _x.traj.HoldOnStall, _x.traj.WaitForStart))
      length = len(self.traj.start_position.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.traj.start_position.j))
      length = len(self.traj.end_position.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.traj.end_position.j))
      length = len(self.traj.max_joint_vel.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.traj.max_joint_vel.j))
      length = len(self.traj.max_joint_accel.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.traj.max_joint_accel.j))
      length = len(self.traj.macpieces)
      buff.write(_struct_I.pack(length))
      for val1 in self.traj.macpieces:
        _v1 = val1.start_pos
        length = len(_v1.j)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v1.j))
        _v2 = val1.end_pos
        length = len(_v2.j)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v2.j))
        _x = val1
        buff.write(_struct_4d.pack(_x.start_time, _x.duration, _x.max_path_velocity, _x.max_path_acceleration))
      buff.write(_struct_d.pack(self.traj.traj_duration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.traj is None:
        self.traj = pr_msgs.msg.WAMPrecomputedBlendedTrajectory()
      end = 0
      _x = self
      start = end
      end += 4
      (_x.traj.id, _x.traj.HoldOnStall, _x.traj.WaitForStart,) = _struct_h2B.unpack(str[start:end])
      self.traj.HoldOnStall = bool(self.traj.HoldOnStall)
      self.traj.WaitForStart = bool(self.traj.WaitForStart)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.start_position.j = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.end_position.j = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.max_joint_vel.j = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.max_joint_accel.j = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traj.macpieces = []
      for i in range(0, length):
        val1 = pr_msgs.msg.WAMPrecomputedBlendElement()
        _v3 = val1.start_pos
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v3.j = struct.unpack(pattern, str[start:end])
        _v4 = val1.end_pos
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v4.j = struct.unpack(pattern, str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.start_time, _x.duration, _x.max_path_velocity, _x.max_path_acceleration,) = _struct_4d.unpack(str[start:end])
        self.traj.macpieces.append(val1)
      start = end
      end += 8
      (self.traj.traj_duration,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_h2B.pack(_x.traj.id, _x.traj.HoldOnStall, _x.traj.WaitForStart))
      length = len(self.traj.start_position.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.traj.start_position.j.tostring())
      length = len(self.traj.end_position.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.traj.end_position.j.tostring())
      length = len(self.traj.max_joint_vel.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.traj.max_joint_vel.j.tostring())
      length = len(self.traj.max_joint_accel.j)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.traj.max_joint_accel.j.tostring())
      length = len(self.traj.macpieces)
      buff.write(_struct_I.pack(length))
      for val1 in self.traj.macpieces:
        _v5 = val1.start_pos
        length = len(_v5.j)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v5.j.tostring())
        _v6 = val1.end_pos
        length = len(_v6.j)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v6.j.tostring())
        _x = val1
        buff.write(_struct_4d.pack(_x.start_time, _x.duration, _x.max_path_velocity, _x.max_path_acceleration))
      buff.write(_struct_d.pack(self.traj.traj_duration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.traj is None:
        self.traj = pr_msgs.msg.WAMPrecomputedBlendedTrajectory()
      end = 0
      _x = self
      start = end
      end += 4
      (_x.traj.id, _x.traj.HoldOnStall, _x.traj.WaitForStart,) = _struct_h2B.unpack(str[start:end])
      self.traj.HoldOnStall = bool(self.traj.HoldOnStall)
      self.traj.WaitForStart = bool(self.traj.WaitForStart)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.start_position.j = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.end_position.j = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.max_joint_vel.j = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.traj.max_joint_accel.j = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traj.macpieces = []
      for i in range(0, length):
        val1 = pr_msgs.msg.WAMPrecomputedBlendElement()
        _v7 = val1.start_pos
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v7.j = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v8 = val1.end_pos
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v8.j = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 32
        (_x.start_time, _x.duration, _x.max_path_velocity, _x.max_path_acceleration,) = _struct_4d.unpack(str[start:end])
        self.traj.macpieces.append(val1)
      start = end
      end += 8
      (self.traj.traj_duration,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_d = struct.Struct("<d")
_struct_h2B = struct.Struct("<h2B")
"""autogenerated by genpy from pr_msgs/AddPrecomputedTrajectoryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AddPrecomputedTrajectoryResponse(genpy.Message):
  _md5sum = "ad2e2c70d0557970f2c1628f5539a6dd"
  _type = "pr_msgs/AddPrecomputedTrajectoryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool ok
string reason
uint32 id


"""
  __slots__ = ['ok','reason','id']
  _slot_types = ['bool','string','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ok,reason,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AddPrecomputedTrajectoryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ok is None:
        self.ok = False
      if self.reason is None:
        self.reason = ''
      if self.id is None:
        self.id = 0
    else:
      self.ok = False
      self.reason = ''
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.ok))
      _x = self.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ok,) = _struct_B.unpack(str[start:end])
      self.ok = bool(self.ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reason = str[start:end].decode('utf-8')
      else:
        self.reason = str[start:end]
      start = end
      end += 4
      (self.id,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.ok))
      _x = self.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.id))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.ok,) = _struct_B.unpack(str[start:end])
      self.ok = bool(self.ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reason = str[start:end].decode('utf-8')
      else:
        self.reason = str[start:end]
      start = end
      end += 4
      (self.id,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class AddPrecomputedTrajectory(object):
  _type          = 'pr_msgs/AddPrecomputedTrajectory'
  _md5sum = 'df6b014b3af6aad7a3a7cf42649684a6'
  _request_class  = AddPrecomputedTrajectoryRequest
  _response_class = AddPrecomputedTrajectoryResponse
