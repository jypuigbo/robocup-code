/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/moped/pr_msgs/srv/AddPrecomputedTrajectory.srv */
#ifndef PR_MSGS_SERVICE_ADDPRECOMPUTEDTRAJECTORY_H
#define PR_MSGS_SERVICE_ADDPRECOMPUTEDTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "pr_msgs/WAMPrecomputedBlendedTrajectory.h"



namespace pr_msgs
{
template <class ContainerAllocator>
struct AddPrecomputedTrajectoryRequest_ {
  typedef AddPrecomputedTrajectoryRequest_<ContainerAllocator> Type;

  AddPrecomputedTrajectoryRequest_()
  : traj()
  {
  }

  AddPrecomputedTrajectoryRequest_(const ContainerAllocator& _alloc)
  : traj(_alloc)
  {
  }

  typedef  ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator>  _traj_type;
   ::pr_msgs::WAMPrecomputedBlendedTrajectory_<ContainerAllocator>  traj;


  typedef boost::shared_ptr< ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddPrecomputedTrajectoryRequest
typedef  ::pr_msgs::AddPrecomputedTrajectoryRequest_<std::allocator<void> > AddPrecomputedTrajectoryRequest;

typedef boost::shared_ptr< ::pr_msgs::AddPrecomputedTrajectoryRequest> AddPrecomputedTrajectoryRequestPtr;
typedef boost::shared_ptr< ::pr_msgs::AddPrecomputedTrajectoryRequest const> AddPrecomputedTrajectoryRequestConstPtr;


template <class ContainerAllocator>
struct AddPrecomputedTrajectoryResponse_ {
  typedef AddPrecomputedTrajectoryResponse_<ContainerAllocator> Type;

  AddPrecomputedTrajectoryResponse_()
  : ok(false)
  , reason()
  , id(0)
  {
  }

  AddPrecomputedTrajectoryResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  , id(0)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;

  typedef uint32_t _id_type;
  uint32_t id;


  typedef boost::shared_ptr< ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddPrecomputedTrajectoryResponse
typedef  ::pr_msgs::AddPrecomputedTrajectoryResponse_<std::allocator<void> > AddPrecomputedTrajectoryResponse;

typedef boost::shared_ptr< ::pr_msgs::AddPrecomputedTrajectoryResponse> AddPrecomputedTrajectoryResponsePtr;
typedef boost::shared_ptr< ::pr_msgs::AddPrecomputedTrajectoryResponse const> AddPrecomputedTrajectoryResponseConstPtr;

struct AddPrecomputedTrajectory
{

typedef AddPrecomputedTrajectoryRequest Request;
typedef AddPrecomputedTrajectoryResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddPrecomputedTrajectory
} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "75e7d5e1c8aabc62097ff8b39b0402be";
  }

  static const char* value(const  ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x75e7d5e1c8aabc62ULL;
  static const uint64_t static_value2 = 0x097ff8b39b0402beULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AddPrecomputedTrajectoryRequest";
  }

  static const char* value(const  ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/WAMPrecomputedBlendedTrajectory traj\n\
\n\
================================================================================\n\
MSG: pr_msgs/WAMPrecomputedBlendedTrajectory\n\
int16 id\n\
bool HoldOnStall\n\
bool WaitForStart\n\
pr_msgs/Joints start_position\n\
pr_msgs/Joints end_position\n\
pr_msgs/Joints max_joint_vel\n\
pr_msgs/Joints max_joint_accel\n\
pr_msgs/WAMPrecomputedBlendElement[] macpieces\n\
float64 traj_duration\n\
\n\
================================================================================\n\
MSG: pr_msgs/Joints\n\
float64[] j\n\
\n\
================================================================================\n\
MSG: pr_msgs/WAMPrecomputedBlendElement\n\
pr_msgs/Joints start_pos\n\
pr_msgs/Joints end_pos\n\
float64 start_time\n\
float64 duration\n\
float64 max_path_velocity\n\
float64 max_path_acceleration\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ad2e2c70d0557970f2c1628f5539a6dd";
  }

  static const char* value(const  ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xad2e2c70d0557970ULL;
  static const uint64_t static_value2 = 0xf2c1628f5539a6ddULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AddPrecomputedTrajectoryResponse";
  }

  static const char* value(const  ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
uint32 id\n\
\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.traj);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddPrecomputedTrajectoryRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddPrecomputedTrajectoryResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<pr_msgs::AddPrecomputedTrajectory> {
  static const char* value() 
  {
    return "df6b014b3af6aad7a3a7cf42649684a6";
  }

  static const char* value(const pr_msgs::AddPrecomputedTrajectory&) { return value(); } 
};

template<>
struct DataType<pr_msgs::AddPrecomputedTrajectory> {
  static const char* value() 
  {
    return "pr_msgs/AddPrecomputedTrajectory";
  }

  static const char* value(const pr_msgs::AddPrecomputedTrajectory&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df6b014b3af6aad7a3a7cf42649684a6";
  }

  static const char* value(const pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AddPrecomputedTrajectory";
  }

  static const char* value(const pr_msgs::AddPrecomputedTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df6b014b3af6aad7a3a7cf42649684a6";
  }

  static const char* value(const pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/AddPrecomputedTrajectory";
  }

  static const char* value(const pr_msgs::AddPrecomputedTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PR_MSGS_SERVICE_ADDPRECOMPUTEDTRAJECTORY_H

