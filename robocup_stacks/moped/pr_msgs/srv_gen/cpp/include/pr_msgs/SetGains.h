/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/moped/pr_msgs/srv/SetGains.srv */
#ifndef PR_MSGS_SERVICE_SETGAINS_H
#define PR_MSGS_SERVICE_SETGAINS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "pr_msgs/PIDgains.h"



namespace pr_msgs
{
template <class ContainerAllocator>
struct SetGainsRequest_ {
  typedef SetGainsRequest_<ContainerAllocator> Type;

  SetGainsRequest_()
  : joint(0)
  , gains()
  {
  }

  SetGainsRequest_(const ContainerAllocator& _alloc)
  : joint(0)
  , gains(_alloc)
  {
  }

  typedef uint8_t _joint_type;
  uint8_t joint;

  typedef  ::pr_msgs::PIDgains_<ContainerAllocator>  _gains_type;
   ::pr_msgs::PIDgains_<ContainerAllocator>  gains;


  typedef boost::shared_ptr< ::pr_msgs::SetGainsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::SetGainsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetGainsRequest
typedef  ::pr_msgs::SetGainsRequest_<std::allocator<void> > SetGainsRequest;

typedef boost::shared_ptr< ::pr_msgs::SetGainsRequest> SetGainsRequestPtr;
typedef boost::shared_ptr< ::pr_msgs::SetGainsRequest const> SetGainsRequestConstPtr;


template <class ContainerAllocator>
struct SetGainsResponse_ {
  typedef SetGainsResponse_<ContainerAllocator> Type;

  SetGainsResponse_()
  {
  }

  SetGainsResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::pr_msgs::SetGainsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::SetGainsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetGainsResponse
typedef  ::pr_msgs::SetGainsResponse_<std::allocator<void> > SetGainsResponse;

typedef boost::shared_ptr< ::pr_msgs::SetGainsResponse> SetGainsResponsePtr;
typedef boost::shared_ptr< ::pr_msgs::SetGainsResponse const> SetGainsResponseConstPtr;

struct SetGains
{

typedef SetGainsRequest Request;
typedef SetGainsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetGains
} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::SetGainsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::SetGainsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::SetGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e1b236ea8d7f7d7cef0473991af0ae8";
  }

  static const char* value(const  ::pr_msgs::SetGainsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8e1b236ea8d7f7d7ULL;
  static const uint64_t static_value2 = 0xcef0473991af0ae8ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::SetGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/SetGainsRequest";
  }

  static const char* value(const  ::pr_msgs::SetGainsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::SetGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 joint\n\
pr_msgs/PIDgains gains\n\
\n\
================================================================================\n\
MSG: pr_msgs/PIDgains\n\
float64 kp\n\
float64 kd\n\
float64 ki\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::SetGainsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr_msgs::SetGainsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::SetGainsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::SetGainsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::SetGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::pr_msgs::SetGainsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::SetGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/SetGainsResponse";
  }

  static const char* value(const  ::pr_msgs::SetGainsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::SetGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::SetGainsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr_msgs::SetGainsResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::SetGainsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint);
    stream.next(m.gains);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetGainsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::SetGainsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetGainsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<pr_msgs::SetGains> {
  static const char* value() 
  {
    return "8e1b236ea8d7f7d7cef0473991af0ae8";
  }

  static const char* value(const pr_msgs::SetGains&) { return value(); } 
};

template<>
struct DataType<pr_msgs::SetGains> {
  static const char* value() 
  {
    return "pr_msgs/SetGains";
  }

  static const char* value(const pr_msgs::SetGains&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pr_msgs::SetGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e1b236ea8d7f7d7cef0473991af0ae8";
  }

  static const char* value(const pr_msgs::SetGainsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pr_msgs::SetGainsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/SetGains";
  }

  static const char* value(const pr_msgs::SetGainsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pr_msgs::SetGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e1b236ea8d7f7d7cef0473991af0ae8";
  }

  static const char* value(const pr_msgs::SetGainsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pr_msgs::SetGainsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/SetGains";
  }

  static const char* value(const pr_msgs::SetGainsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PR_MSGS_SERVICE_SETGAINS_H

