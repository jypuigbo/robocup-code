/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/moped/pr_msgs/srv/SetForceInputThreshold.srv */
#ifndef PR_MSGS_SERVICE_SETFORCEINPUTTHRESHOLD_H
#define PR_MSGS_SERVICE_SETFORCEINPUTTHRESHOLD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"



namespace pr_msgs
{
template <class ContainerAllocator>
struct SetForceInputThresholdRequest_ {
  typedef SetForceInputThresholdRequest_<ContainerAllocator> Type;

  SetForceInputThresholdRequest_()
  : direction()
  , force(0.0)
  , torques()
  {
  }

  SetForceInputThresholdRequest_(const ContainerAllocator& _alloc)
  : direction(_alloc)
  , force(0.0)
  , torques(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _direction_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  direction;

  typedef double _force_type;
  double force;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _torques_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  torques;


  typedef boost::shared_ptr< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetForceInputThresholdRequest
typedef  ::pr_msgs::SetForceInputThresholdRequest_<std::allocator<void> > SetForceInputThresholdRequest;

typedef boost::shared_ptr< ::pr_msgs::SetForceInputThresholdRequest> SetForceInputThresholdRequestPtr;
typedef boost::shared_ptr< ::pr_msgs::SetForceInputThresholdRequest const> SetForceInputThresholdRequestConstPtr;


template <class ContainerAllocator>
struct SetForceInputThresholdResponse_ {
  typedef SetForceInputThresholdResponse_<ContainerAllocator> Type;

  SetForceInputThresholdResponse_()
  : ok(false)
  , reason()
  {
  }

  SetForceInputThresholdResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , reason(_alloc)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;


  typedef boost::shared_ptr< ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetForceInputThresholdResponse
typedef  ::pr_msgs::SetForceInputThresholdResponse_<std::allocator<void> > SetForceInputThresholdResponse;

typedef boost::shared_ptr< ::pr_msgs::SetForceInputThresholdResponse> SetForceInputThresholdResponsePtr;
typedef boost::shared_ptr< ::pr_msgs::SetForceInputThresholdResponse const> SetForceInputThresholdResponseConstPtr;

struct SetForceInputThreshold
{

typedef SetForceInputThresholdRequest Request;
typedef SetForceInputThresholdResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetForceInputThreshold
} // namespace pr_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "667c67fac1f7f607f50ecfa816afa76d";
  }

  static const char* value(const  ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x667c67fac1f7f607ULL;
  static const uint64_t static_value2 = 0xf50ecfa816afa76dULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/SetForceInputThresholdRequest";
  }

  static const char* value(const  ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Vector3 direction\n\
float64 force\n\
geometry_msgs/Vector3 torques\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4679398f882e7cbdea165980d3ec2888";
  }

  static const char* value(const  ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4679398f882e7cbdULL;
  static const uint64_t static_value2 = 0xea165980d3ec2888ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/SetForceInputThresholdResponse";
  }

  static const char* value(const  ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool ok\n\
string reason\n\
\n\
\n\
";
  }

  static const char* value(const  ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.direction);
    stream.next(m.force);
    stream.next(m.torques);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetForceInputThresholdRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.reason);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetForceInputThresholdResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<pr_msgs::SetForceInputThreshold> {
  static const char* value() 
  {
    return "bc61c9402d5e0ad2a8b687c96a82cc21";
  }

  static const char* value(const pr_msgs::SetForceInputThreshold&) { return value(); } 
};

template<>
struct DataType<pr_msgs::SetForceInputThreshold> {
  static const char* value() 
  {
    return "pr_msgs/SetForceInputThreshold";
  }

  static const char* value(const pr_msgs::SetForceInputThreshold&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bc61c9402d5e0ad2a8b687c96a82cc21";
  }

  static const char* value(const pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/SetForceInputThreshold";
  }

  static const char* value(const pr_msgs::SetForceInputThresholdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bc61c9402d5e0ad2a8b687c96a82cc21";
  }

  static const char* value(const pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr_msgs/SetForceInputThreshold";
  }

  static const char* value(const pr_msgs::SetForceInputThresholdResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PR_MSGS_SERVICE_SETFORCEINPUTTHRESHOLD_H

