/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/state_machines/gpsrSoar/real/gpsrSoar/msg/gpsrActionGoal.msg */
#ifndef GPSRSOAR_MESSAGE_GPSRACTIONGOAL_H
#define GPSRSOAR_MESSAGE_GPSRACTIONGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "gpsrSoar/order.h"

namespace gpsrSoar
{
template <class ContainerAllocator>
struct gpsrActionGoal_ {
  typedef gpsrActionGoal_<ContainerAllocator> Type;

  gpsrActionGoal_()
  : orderList()
  {
  }

  gpsrActionGoal_(const ContainerAllocator& _alloc)
  : orderList(_alloc)
  {
  }

  typedef std::vector< ::gpsrSoar::order_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gpsrSoar::order_<ContainerAllocator> >::other >  _orderList_type;
  std::vector< ::gpsrSoar::order_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gpsrSoar::order_<ContainerAllocator> >::other >  orderList;


  typedef boost::shared_ptr< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct gpsrActionGoal
typedef  ::gpsrSoar::gpsrActionGoal_<std::allocator<void> > gpsrActionGoal;

typedef boost::shared_ptr< ::gpsrSoar::gpsrActionGoal> gpsrActionGoalPtr;
typedef boost::shared_ptr< ::gpsrSoar::gpsrActionGoal const> gpsrActionGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gpsrSoar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "66d97907987fc1f7c6136c5bbed48e87";
  }

  static const char* value(const  ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x66d97907987fc1f7ULL;
  static const uint64_t static_value2 = 0xc6136c5bbed48e87ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gpsrSoar/gpsrActionGoal";
  }

  static const char* value(const  ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
order[] orderList\n\
\n\
================================================================================\n\
MSG: gpsrSoar/order\n\
string action\n\
string person\n\
string location\n\
string item\n\
\n\
";
  }

  static const char* value(const  ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.orderList);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct gpsrActionGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gpsrSoar::gpsrActionGoal_<ContainerAllocator> & v) 
  {
    s << indent << "orderList[]" << std::endl;
    for (size_t i = 0; i < v.orderList.size(); ++i)
    {
      s << indent << "  orderList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gpsrSoar::order_<ContainerAllocator> >::stream(s, indent + "    ", v.orderList[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPSRSOAR_MESSAGE_GPSRACTIONGOAL_H

