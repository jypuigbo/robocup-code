/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/state_machines/gpsrSoar/real/gpsrSoar/msg/gpsrActionFeedback.msg */
#ifndef GPSRSOAR_MESSAGE_GPSRACTIONFEEDBACK_H
#define GPSRSOAR_MESSAGE_GPSRACTIONFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace gpsrSoar
{
template <class ContainerAllocator>
struct gpsrActionFeedback_ {
  typedef gpsrActionFeedback_<ContainerAllocator> Type;

  gpsrActionFeedback_()
  : order_id(0)
  {
  }

  gpsrActionFeedback_(const ContainerAllocator& _alloc)
  : order_id(0)
  {
  }

  typedef uint8_t _order_id_type;
  uint8_t order_id;


  typedef boost::shared_ptr< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct gpsrActionFeedback
typedef  ::gpsrSoar::gpsrActionFeedback_<std::allocator<void> > gpsrActionFeedback;

typedef boost::shared_ptr< ::gpsrSoar::gpsrActionFeedback> gpsrActionFeedbackPtr;
typedef boost::shared_ptr< ::gpsrSoar::gpsrActionFeedback const> gpsrActionFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gpsrSoar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "380a887720e23b07d9d68a5be3c3ff4a";
  }

  static const char* value(const  ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x380a887720e23b07ULL;
  static const uint64_t static_value2 = 0xd9d68a5be3c3ff4aULL;
};

template<class ContainerAllocator>
struct DataType< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gpsrSoar/gpsrActionFeedback";
  }

  static const char* value(const  ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
uint8   order_id\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.order_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct gpsrActionFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gpsrSoar::gpsrActionFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "order_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.order_id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPSRSOAR_MESSAGE_GPSRACTIONFEEDBACK_H

