/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/state_machines/gpsr/msg/action_list.msg */
#ifndef GPSR_MESSAGE_ACTION_LIST_H
#define GPSR_MESSAGE_ACTION_LIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "gpsr/action.h"

namespace gpsr
{
template <class ContainerAllocator>
struct action_list_ {
  typedef action_list_<ContainerAllocator> Type;

  action_list_()
  : actionList()
  {
  }

  action_list_(const ContainerAllocator& _alloc)
  : actionList(_alloc)
  {
  }

  typedef std::vector< ::gpsr::action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gpsr::action_<ContainerAllocator> >::other >  _actionList_type;
  std::vector< ::gpsr::action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gpsr::action_<ContainerAllocator> >::other >  actionList;


  typedef boost::shared_ptr< ::gpsr::action_list_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpsr::action_list_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct action_list
typedef  ::gpsr::action_list_<std::allocator<void> > action_list;

typedef boost::shared_ptr< ::gpsr::action_list> action_listPtr;
typedef boost::shared_ptr< ::gpsr::action_list const> action_listConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gpsr::action_list_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gpsr::action_list_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gpsr

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gpsr::action_list_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gpsr::action_list_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gpsr::action_list_<ContainerAllocator> > {
  static const char* value() 
  {
    return "787e44f80e004f43718f2db3eba127b0";
  }

  static const char* value(const  ::gpsr::action_list_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x787e44f80e004f43ULL;
  static const uint64_t static_value2 = 0x718f2db3eba127b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpsr::action_list_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gpsr/action_list";
  }

  static const char* value(const  ::gpsr::action_list_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gpsr::action_list_<ContainerAllocator> > {
  static const char* value() 
  {
    return "action[] actionList\n\
================================================================================\n\
MSG: gpsr/action\n\
string action\n\
string person\n\
string location\n\
string item\n\
\n\
";
  }

  static const char* value(const  ::gpsr::action_list_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gpsr::action_list_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.actionList);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct action_list_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpsr::action_list_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gpsr::action_list_<ContainerAllocator> & v) 
  {
    s << indent << "actionList[]" << std::endl;
    for (size_t i = 0; i < v.actionList.size(); ++i)
    {
      s << indent << "  actionList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gpsr::action_<ContainerAllocator> >::stream(s, indent + "    ", v.actionList[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPSR_MESSAGE_ACTION_LIST_H

