/* Auto-generated by genmsg_cpp for file /home/sampfeiffer/branches_svn/migration/ROBOCUP_STACKS_INTEGRATION/stacks/robocup_stacks/door_detector_pal/msg/DoorDetectorGoal.msg */
#ifndef DOOR_DETECTOR_PAL_MESSAGE_DOORDETECTORGOAL_H
#define DOOR_DETECTOR_PAL_MESSAGE_DOORDETECTORGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace door_detector_pal
{
template <class ContainerAllocator>
struct DoorDetectorGoal_ {
  typedef DoorDetectorGoal_<ContainerAllocator> Type;

  DoorDetectorGoal_()
  : votation(0)
  {
  }

  DoorDetectorGoal_(const ContainerAllocator& _alloc)
  : votation(0)
  {
  }

  typedef int8_t _votation_type;
  int8_t votation;


  typedef boost::shared_ptr< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DoorDetectorGoal
typedef  ::door_detector_pal::DoorDetectorGoal_<std::allocator<void> > DoorDetectorGoal;

typedef boost::shared_ptr< ::door_detector_pal::DoorDetectorGoal> DoorDetectorGoalPtr;
typedef boost::shared_ptr< ::door_detector_pal::DoorDetectorGoal const> DoorDetectorGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace door_detector_pal

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "33dde40a30662752291cd32efdcae2f5";
  }

  static const char* value(const  ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x33dde40a30662752ULL;
  static const uint64_t static_value2 = 0x291cd32efdcae2f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "door_detector_pal/DoorDetectorGoal";
  }

  static const char* value(const  ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal\n\
# votation == 0 -> Stop\n\
# votation >  0 -> votation is the number of times in a row we need to detect again door closed/open to return results\n\
int8 votation\n\
\n\
";
  }

  static const char* value(const  ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.votation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DoorDetectorGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::door_detector_pal::DoorDetectorGoal_<ContainerAllocator> & v) 
  {
    s << indent << "votation: ";
    Printer<int8_t>::stream(s, indent + "  ", v.votation);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DOOR_DETECTOR_PAL_MESSAGE_DOORDETECTORGOAL_H

